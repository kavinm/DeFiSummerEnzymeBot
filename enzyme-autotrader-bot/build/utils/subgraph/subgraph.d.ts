import { GraphQLClient } from 'graphql-request';
import * as Dom from 'graphql-request/dist/types.dom';
export declare type Maybe<T> = T | null;
export declare type Exact<T extends {
    [key: string]: unknown;
}> = {
    [K in keyof T]: T[K];
};
export declare type MakeOptional<T, K extends keyof T> = Omit<T, K> & {
    [SubKey in K]?: Maybe<T[SubKey]>;
};
export declare type MakeMaybe<T, K extends keyof T> = Omit<T, K> & {
    [SubKey in K]: Maybe<T[SubKey]>;
};
/** All built-in and custom scalars, mapped to their actual values */
export declare type Scalars = {
    ID: string;
    String: string;
    Boolean: boolean;
    Int: number;
    Float: number;
    BigDecimal: any;
    BigInt: any;
    Bytes: any;
};
export declare type AccessorSetEvent = EventInterface & FundEventInterface & {
    __typename?: 'AccessorSetEvent';
    id: Scalars['ID'];
    fund: Fund;
    prevAccessor?: Maybe<Scalars['String']>;
    nextAccessor: Scalars['String'];
    transaction: Transaction;
    timestamp: Scalars['BigInt'];
};
export declare type AccessorSetEvent_Filter = {
    id?: Maybe<Scalars['ID']>;
    id_not?: Maybe<Scalars['ID']>;
    id_gt?: Maybe<Scalars['ID']>;
    id_lt?: Maybe<Scalars['ID']>;
    id_gte?: Maybe<Scalars['ID']>;
    id_lte?: Maybe<Scalars['ID']>;
    id_in?: Maybe<Array<Scalars['ID']>>;
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    fund?: Maybe<Scalars['String']>;
    fund_not?: Maybe<Scalars['String']>;
    fund_gt?: Maybe<Scalars['String']>;
    fund_lt?: Maybe<Scalars['String']>;
    fund_gte?: Maybe<Scalars['String']>;
    fund_lte?: Maybe<Scalars['String']>;
    fund_in?: Maybe<Array<Scalars['String']>>;
    fund_not_in?: Maybe<Array<Scalars['String']>>;
    fund_contains?: Maybe<Scalars['String']>;
    fund_not_contains?: Maybe<Scalars['String']>;
    fund_starts_with?: Maybe<Scalars['String']>;
    fund_not_starts_with?: Maybe<Scalars['String']>;
    fund_ends_with?: Maybe<Scalars['String']>;
    fund_not_ends_with?: Maybe<Scalars['String']>;
    prevAccessor?: Maybe<Scalars['String']>;
    prevAccessor_not?: Maybe<Scalars['String']>;
    prevAccessor_gt?: Maybe<Scalars['String']>;
    prevAccessor_lt?: Maybe<Scalars['String']>;
    prevAccessor_gte?: Maybe<Scalars['String']>;
    prevAccessor_lte?: Maybe<Scalars['String']>;
    prevAccessor_in?: Maybe<Array<Scalars['String']>>;
    prevAccessor_not_in?: Maybe<Array<Scalars['String']>>;
    prevAccessor_contains?: Maybe<Scalars['String']>;
    prevAccessor_not_contains?: Maybe<Scalars['String']>;
    prevAccessor_starts_with?: Maybe<Scalars['String']>;
    prevAccessor_not_starts_with?: Maybe<Scalars['String']>;
    prevAccessor_ends_with?: Maybe<Scalars['String']>;
    prevAccessor_not_ends_with?: Maybe<Scalars['String']>;
    nextAccessor?: Maybe<Scalars['String']>;
    nextAccessor_not?: Maybe<Scalars['String']>;
    nextAccessor_gt?: Maybe<Scalars['String']>;
    nextAccessor_lt?: Maybe<Scalars['String']>;
    nextAccessor_gte?: Maybe<Scalars['String']>;
    nextAccessor_lte?: Maybe<Scalars['String']>;
    nextAccessor_in?: Maybe<Array<Scalars['String']>>;
    nextAccessor_not_in?: Maybe<Array<Scalars['String']>>;
    nextAccessor_contains?: Maybe<Scalars['String']>;
    nextAccessor_not_contains?: Maybe<Scalars['String']>;
    nextAccessor_starts_with?: Maybe<Scalars['String']>;
    nextAccessor_not_starts_with?: Maybe<Scalars['String']>;
    nextAccessor_ends_with?: Maybe<Scalars['String']>;
    nextAccessor_not_ends_with?: Maybe<Scalars['String']>;
    transaction?: Maybe<Scalars['String']>;
    transaction_not?: Maybe<Scalars['String']>;
    transaction_gt?: Maybe<Scalars['String']>;
    transaction_lt?: Maybe<Scalars['String']>;
    transaction_gte?: Maybe<Scalars['String']>;
    transaction_lte?: Maybe<Scalars['String']>;
    transaction_in?: Maybe<Array<Scalars['String']>>;
    transaction_not_in?: Maybe<Array<Scalars['String']>>;
    transaction_contains?: Maybe<Scalars['String']>;
    transaction_not_contains?: Maybe<Scalars['String']>;
    transaction_starts_with?: Maybe<Scalars['String']>;
    transaction_not_starts_with?: Maybe<Scalars['String']>;
    transaction_ends_with?: Maybe<Scalars['String']>;
    transaction_not_ends_with?: Maybe<Scalars['String']>;
    timestamp?: Maybe<Scalars['BigInt']>;
    timestamp_not?: Maybe<Scalars['BigInt']>;
    timestamp_gt?: Maybe<Scalars['BigInt']>;
    timestamp_lt?: Maybe<Scalars['BigInt']>;
    timestamp_gte?: Maybe<Scalars['BigInt']>;
    timestamp_lte?: Maybe<Scalars['BigInt']>;
    timestamp_in?: Maybe<Array<Scalars['BigInt']>>;
    timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;
};
export declare enum AccessorSetEvent_OrderBy {
    Id = "id",
    Fund = "fund",
    PrevAccessor = "prevAccessor",
    NextAccessor = "nextAccessor",
    Transaction = "transaction",
    Timestamp = "timestamp"
}
export declare type Account = {
    __typename?: 'Account';
    id: Scalars['ID'];
    firstSeen: Scalars['BigInt'];
    manager: Scalars['Boolean'];
    managerSince?: Maybe<Scalars['BigInt']>;
    managements: Array<Fund>;
    investor: Scalars['Boolean'];
    investorSince?: Maybe<Scalars['BigInt']>;
    investments: Array<Investment>;
    authUser: Scalars['Boolean'];
    authorizedForComptroller: Array<ComptrollerProxy>;
    sharesChanges: Array<SharesChangeInterface>;
    feeSharesChanges: Array<FeeSharesChangeInterface>;
    investmentSharesChanges: Array<InvestmentSharesChangeInterface>;
    whitelisted: Array<InvestorWhitelistSetting>;
};
export declare type AccountManagementsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<Fund_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<Fund_Filter>;
};
export declare type AccountInvestmentsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<Investment_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<Investment_Filter>;
};
export declare type AccountAuthorizedForComptrollerArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<ComptrollerProxy_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<ComptrollerProxy_Filter>;
};
export declare type AccountSharesChangesArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<SharesChangeInterface_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<SharesChangeInterface_Filter>;
};
export declare type AccountFeeSharesChangesArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<FeeSharesChangeInterface_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<FeeSharesChangeInterface_Filter>;
};
export declare type AccountInvestmentSharesChangesArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<InvestmentSharesChangeInterface_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<InvestmentSharesChangeInterface_Filter>;
};
export declare type AccountWhitelistedArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<InvestorWhitelistSetting_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<InvestorWhitelistSetting_Filter>;
};
export declare type Account_Filter = {
    id?: Maybe<Scalars['ID']>;
    id_not?: Maybe<Scalars['ID']>;
    id_gt?: Maybe<Scalars['ID']>;
    id_lt?: Maybe<Scalars['ID']>;
    id_gte?: Maybe<Scalars['ID']>;
    id_lte?: Maybe<Scalars['ID']>;
    id_in?: Maybe<Array<Scalars['ID']>>;
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    firstSeen?: Maybe<Scalars['BigInt']>;
    firstSeen_not?: Maybe<Scalars['BigInt']>;
    firstSeen_gt?: Maybe<Scalars['BigInt']>;
    firstSeen_lt?: Maybe<Scalars['BigInt']>;
    firstSeen_gte?: Maybe<Scalars['BigInt']>;
    firstSeen_lte?: Maybe<Scalars['BigInt']>;
    firstSeen_in?: Maybe<Array<Scalars['BigInt']>>;
    firstSeen_not_in?: Maybe<Array<Scalars['BigInt']>>;
    manager?: Maybe<Scalars['Boolean']>;
    manager_not?: Maybe<Scalars['Boolean']>;
    manager_in?: Maybe<Array<Scalars['Boolean']>>;
    manager_not_in?: Maybe<Array<Scalars['Boolean']>>;
    managerSince?: Maybe<Scalars['BigInt']>;
    managerSince_not?: Maybe<Scalars['BigInt']>;
    managerSince_gt?: Maybe<Scalars['BigInt']>;
    managerSince_lt?: Maybe<Scalars['BigInt']>;
    managerSince_gte?: Maybe<Scalars['BigInt']>;
    managerSince_lte?: Maybe<Scalars['BigInt']>;
    managerSince_in?: Maybe<Array<Scalars['BigInt']>>;
    managerSince_not_in?: Maybe<Array<Scalars['BigInt']>>;
    investor?: Maybe<Scalars['Boolean']>;
    investor_not?: Maybe<Scalars['Boolean']>;
    investor_in?: Maybe<Array<Scalars['Boolean']>>;
    investor_not_in?: Maybe<Array<Scalars['Boolean']>>;
    investorSince?: Maybe<Scalars['BigInt']>;
    investorSince_not?: Maybe<Scalars['BigInt']>;
    investorSince_gt?: Maybe<Scalars['BigInt']>;
    investorSince_lt?: Maybe<Scalars['BigInt']>;
    investorSince_gte?: Maybe<Scalars['BigInt']>;
    investorSince_lte?: Maybe<Scalars['BigInt']>;
    investorSince_in?: Maybe<Array<Scalars['BigInt']>>;
    investorSince_not_in?: Maybe<Array<Scalars['BigInt']>>;
    authUser?: Maybe<Scalars['Boolean']>;
    authUser_not?: Maybe<Scalars['Boolean']>;
    authUser_in?: Maybe<Array<Scalars['Boolean']>>;
    authUser_not_in?: Maybe<Array<Scalars['Boolean']>>;
};
export declare enum Account_OrderBy {
    Id = "id",
    FirstSeen = "firstSeen",
    Manager = "manager",
    ManagerSince = "managerSince",
    Managements = "managements",
    Investor = "investor",
    InvestorSince = "investorSince",
    Investments = "investments",
    AuthUser = "authUser",
    AuthorizedForComptroller = "authorizedForComptroller",
    SharesChanges = "sharesChanges",
    FeeSharesChanges = "feeSharesChanges",
    InvestmentSharesChanges = "investmentSharesChanges",
    Whitelisted = "whitelisted"
}
export declare type AdapterBlacklistAddressesAddedEvent = EventInterface & FundEventInterface & {
    __typename?: 'AdapterBlacklistAddressesAddedEvent';
    id: Scalars['ID'];
    fund: Fund;
    timestamp: Scalars['BigInt'];
    transaction: Transaction;
    comptrollerProxy: Scalars['String'];
    items: Array<IntegrationAdapter>;
};
export declare type AdapterBlacklistAddressesAddedEventItemsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<IntegrationAdapter_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<IntegrationAdapter_Filter>;
};
export declare type AdapterBlacklistAddressesAddedEvent_Filter = {
    id?: Maybe<Scalars['ID']>;
    id_not?: Maybe<Scalars['ID']>;
    id_gt?: Maybe<Scalars['ID']>;
    id_lt?: Maybe<Scalars['ID']>;
    id_gte?: Maybe<Scalars['ID']>;
    id_lte?: Maybe<Scalars['ID']>;
    id_in?: Maybe<Array<Scalars['ID']>>;
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    fund?: Maybe<Scalars['String']>;
    fund_not?: Maybe<Scalars['String']>;
    fund_gt?: Maybe<Scalars['String']>;
    fund_lt?: Maybe<Scalars['String']>;
    fund_gte?: Maybe<Scalars['String']>;
    fund_lte?: Maybe<Scalars['String']>;
    fund_in?: Maybe<Array<Scalars['String']>>;
    fund_not_in?: Maybe<Array<Scalars['String']>>;
    fund_contains?: Maybe<Scalars['String']>;
    fund_not_contains?: Maybe<Scalars['String']>;
    fund_starts_with?: Maybe<Scalars['String']>;
    fund_not_starts_with?: Maybe<Scalars['String']>;
    fund_ends_with?: Maybe<Scalars['String']>;
    fund_not_ends_with?: Maybe<Scalars['String']>;
    timestamp?: Maybe<Scalars['BigInt']>;
    timestamp_not?: Maybe<Scalars['BigInt']>;
    timestamp_gt?: Maybe<Scalars['BigInt']>;
    timestamp_lt?: Maybe<Scalars['BigInt']>;
    timestamp_gte?: Maybe<Scalars['BigInt']>;
    timestamp_lte?: Maybe<Scalars['BigInt']>;
    timestamp_in?: Maybe<Array<Scalars['BigInt']>>;
    timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;
    transaction?: Maybe<Scalars['String']>;
    transaction_not?: Maybe<Scalars['String']>;
    transaction_gt?: Maybe<Scalars['String']>;
    transaction_lt?: Maybe<Scalars['String']>;
    transaction_gte?: Maybe<Scalars['String']>;
    transaction_lte?: Maybe<Scalars['String']>;
    transaction_in?: Maybe<Array<Scalars['String']>>;
    transaction_not_in?: Maybe<Array<Scalars['String']>>;
    transaction_contains?: Maybe<Scalars['String']>;
    transaction_not_contains?: Maybe<Scalars['String']>;
    transaction_starts_with?: Maybe<Scalars['String']>;
    transaction_not_starts_with?: Maybe<Scalars['String']>;
    transaction_ends_with?: Maybe<Scalars['String']>;
    transaction_not_ends_with?: Maybe<Scalars['String']>;
    comptrollerProxy?: Maybe<Scalars['String']>;
    comptrollerProxy_not?: Maybe<Scalars['String']>;
    comptrollerProxy_gt?: Maybe<Scalars['String']>;
    comptrollerProxy_lt?: Maybe<Scalars['String']>;
    comptrollerProxy_gte?: Maybe<Scalars['String']>;
    comptrollerProxy_lte?: Maybe<Scalars['String']>;
    comptrollerProxy_in?: Maybe<Array<Scalars['String']>>;
    comptrollerProxy_not_in?: Maybe<Array<Scalars['String']>>;
    comptrollerProxy_contains?: Maybe<Scalars['String']>;
    comptrollerProxy_not_contains?: Maybe<Scalars['String']>;
    comptrollerProxy_starts_with?: Maybe<Scalars['String']>;
    comptrollerProxy_not_starts_with?: Maybe<Scalars['String']>;
    comptrollerProxy_ends_with?: Maybe<Scalars['String']>;
    comptrollerProxy_not_ends_with?: Maybe<Scalars['String']>;
    items?: Maybe<Array<Scalars['String']>>;
    items_not?: Maybe<Array<Scalars['String']>>;
    items_contains?: Maybe<Array<Scalars['String']>>;
    items_not_contains?: Maybe<Array<Scalars['String']>>;
};
export declare enum AdapterBlacklistAddressesAddedEvent_OrderBy {
    Id = "id",
    Fund = "fund",
    Timestamp = "timestamp",
    Transaction = "transaction",
    ComptrollerProxy = "comptrollerProxy",
    Items = "items"
}
export declare type AdapterBlacklistAddressesRemovedEvent = EventInterface & FundEventInterface & {
    __typename?: 'AdapterBlacklistAddressesRemovedEvent';
    id: Scalars['ID'];
    fund: Fund;
    timestamp: Scalars['BigInt'];
    transaction: Transaction;
    comptrollerProxy: Scalars['String'];
    items: Array<IntegrationAdapter>;
};
export declare type AdapterBlacklistAddressesRemovedEventItemsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<IntegrationAdapter_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<IntegrationAdapter_Filter>;
};
export declare type AdapterBlacklistAddressesRemovedEvent_Filter = {
    id?: Maybe<Scalars['ID']>;
    id_not?: Maybe<Scalars['ID']>;
    id_gt?: Maybe<Scalars['ID']>;
    id_lt?: Maybe<Scalars['ID']>;
    id_gte?: Maybe<Scalars['ID']>;
    id_lte?: Maybe<Scalars['ID']>;
    id_in?: Maybe<Array<Scalars['ID']>>;
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    fund?: Maybe<Scalars['String']>;
    fund_not?: Maybe<Scalars['String']>;
    fund_gt?: Maybe<Scalars['String']>;
    fund_lt?: Maybe<Scalars['String']>;
    fund_gte?: Maybe<Scalars['String']>;
    fund_lte?: Maybe<Scalars['String']>;
    fund_in?: Maybe<Array<Scalars['String']>>;
    fund_not_in?: Maybe<Array<Scalars['String']>>;
    fund_contains?: Maybe<Scalars['String']>;
    fund_not_contains?: Maybe<Scalars['String']>;
    fund_starts_with?: Maybe<Scalars['String']>;
    fund_not_starts_with?: Maybe<Scalars['String']>;
    fund_ends_with?: Maybe<Scalars['String']>;
    fund_not_ends_with?: Maybe<Scalars['String']>;
    timestamp?: Maybe<Scalars['BigInt']>;
    timestamp_not?: Maybe<Scalars['BigInt']>;
    timestamp_gt?: Maybe<Scalars['BigInt']>;
    timestamp_lt?: Maybe<Scalars['BigInt']>;
    timestamp_gte?: Maybe<Scalars['BigInt']>;
    timestamp_lte?: Maybe<Scalars['BigInt']>;
    timestamp_in?: Maybe<Array<Scalars['BigInt']>>;
    timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;
    transaction?: Maybe<Scalars['String']>;
    transaction_not?: Maybe<Scalars['String']>;
    transaction_gt?: Maybe<Scalars['String']>;
    transaction_lt?: Maybe<Scalars['String']>;
    transaction_gte?: Maybe<Scalars['String']>;
    transaction_lte?: Maybe<Scalars['String']>;
    transaction_in?: Maybe<Array<Scalars['String']>>;
    transaction_not_in?: Maybe<Array<Scalars['String']>>;
    transaction_contains?: Maybe<Scalars['String']>;
    transaction_not_contains?: Maybe<Scalars['String']>;
    transaction_starts_with?: Maybe<Scalars['String']>;
    transaction_not_starts_with?: Maybe<Scalars['String']>;
    transaction_ends_with?: Maybe<Scalars['String']>;
    transaction_not_ends_with?: Maybe<Scalars['String']>;
    comptrollerProxy?: Maybe<Scalars['String']>;
    comptrollerProxy_not?: Maybe<Scalars['String']>;
    comptrollerProxy_gt?: Maybe<Scalars['String']>;
    comptrollerProxy_lt?: Maybe<Scalars['String']>;
    comptrollerProxy_gte?: Maybe<Scalars['String']>;
    comptrollerProxy_lte?: Maybe<Scalars['String']>;
    comptrollerProxy_in?: Maybe<Array<Scalars['String']>>;
    comptrollerProxy_not_in?: Maybe<Array<Scalars['String']>>;
    comptrollerProxy_contains?: Maybe<Scalars['String']>;
    comptrollerProxy_not_contains?: Maybe<Scalars['String']>;
    comptrollerProxy_starts_with?: Maybe<Scalars['String']>;
    comptrollerProxy_not_starts_with?: Maybe<Scalars['String']>;
    comptrollerProxy_ends_with?: Maybe<Scalars['String']>;
    comptrollerProxy_not_ends_with?: Maybe<Scalars['String']>;
    items?: Maybe<Array<Scalars['String']>>;
    items_not?: Maybe<Array<Scalars['String']>>;
    items_contains?: Maybe<Array<Scalars['String']>>;
    items_not_contains?: Maybe<Array<Scalars['String']>>;
};
export declare enum AdapterBlacklistAddressesRemovedEvent_OrderBy {
    Id = "id",
    Fund = "fund",
    Timestamp = "timestamp",
    Transaction = "transaction",
    ComptrollerProxy = "comptrollerProxy",
    Items = "items"
}
export declare type AdapterBlacklistSetting = PolicySettingInterface & {
    __typename?: 'AdapterBlacklistSetting';
    id: Scalars['ID'];
    policy: Policy;
    comptroller: ComptrollerProxy;
    listed: Array<Scalars['String']>;
    adapters: Array<Maybe<IntegrationAdapter>>;
    timestamp: Scalars['BigInt'];
    enabled: Scalars['Boolean'];
    events: Array<FundEventInterface>;
};
export declare type AdapterBlacklistSettingAdaptersArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<IntegrationAdapter_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<IntegrationAdapter_Filter>;
};
export declare type AdapterBlacklistSettingEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<FundEventInterface_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<FundEventInterface_Filter>;
};
export declare type AdapterBlacklistSetting_Filter = {
    id?: Maybe<Scalars['ID']>;
    id_not?: Maybe<Scalars['ID']>;
    id_gt?: Maybe<Scalars['ID']>;
    id_lt?: Maybe<Scalars['ID']>;
    id_gte?: Maybe<Scalars['ID']>;
    id_lte?: Maybe<Scalars['ID']>;
    id_in?: Maybe<Array<Scalars['ID']>>;
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    policy?: Maybe<Scalars['String']>;
    policy_not?: Maybe<Scalars['String']>;
    policy_gt?: Maybe<Scalars['String']>;
    policy_lt?: Maybe<Scalars['String']>;
    policy_gte?: Maybe<Scalars['String']>;
    policy_lte?: Maybe<Scalars['String']>;
    policy_in?: Maybe<Array<Scalars['String']>>;
    policy_not_in?: Maybe<Array<Scalars['String']>>;
    policy_contains?: Maybe<Scalars['String']>;
    policy_not_contains?: Maybe<Scalars['String']>;
    policy_starts_with?: Maybe<Scalars['String']>;
    policy_not_starts_with?: Maybe<Scalars['String']>;
    policy_ends_with?: Maybe<Scalars['String']>;
    policy_not_ends_with?: Maybe<Scalars['String']>;
    comptroller?: Maybe<Scalars['String']>;
    comptroller_not?: Maybe<Scalars['String']>;
    comptroller_gt?: Maybe<Scalars['String']>;
    comptroller_lt?: Maybe<Scalars['String']>;
    comptroller_gte?: Maybe<Scalars['String']>;
    comptroller_lte?: Maybe<Scalars['String']>;
    comptroller_in?: Maybe<Array<Scalars['String']>>;
    comptroller_not_in?: Maybe<Array<Scalars['String']>>;
    comptroller_contains?: Maybe<Scalars['String']>;
    comptroller_not_contains?: Maybe<Scalars['String']>;
    comptroller_starts_with?: Maybe<Scalars['String']>;
    comptroller_not_starts_with?: Maybe<Scalars['String']>;
    comptroller_ends_with?: Maybe<Scalars['String']>;
    comptroller_not_ends_with?: Maybe<Scalars['String']>;
    listed?: Maybe<Array<Scalars['String']>>;
    listed_not?: Maybe<Array<Scalars['String']>>;
    listed_contains?: Maybe<Array<Scalars['String']>>;
    listed_not_contains?: Maybe<Array<Scalars['String']>>;
    adapters?: Maybe<Array<Scalars['String']>>;
    adapters_not?: Maybe<Array<Scalars['String']>>;
    adapters_contains?: Maybe<Array<Scalars['String']>>;
    adapters_not_contains?: Maybe<Array<Scalars['String']>>;
    timestamp?: Maybe<Scalars['BigInt']>;
    timestamp_not?: Maybe<Scalars['BigInt']>;
    timestamp_gt?: Maybe<Scalars['BigInt']>;
    timestamp_lt?: Maybe<Scalars['BigInt']>;
    timestamp_gte?: Maybe<Scalars['BigInt']>;
    timestamp_lte?: Maybe<Scalars['BigInt']>;
    timestamp_in?: Maybe<Array<Scalars['BigInt']>>;
    timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;
    enabled?: Maybe<Scalars['Boolean']>;
    enabled_not?: Maybe<Scalars['Boolean']>;
    enabled_in?: Maybe<Array<Scalars['Boolean']>>;
    enabled_not_in?: Maybe<Array<Scalars['Boolean']>>;
    events?: Maybe<Array<Scalars['String']>>;
    events_not?: Maybe<Array<Scalars['String']>>;
    events_contains?: Maybe<Array<Scalars['String']>>;
    events_not_contains?: Maybe<Array<Scalars['String']>>;
};
export declare enum AdapterBlacklistSetting_OrderBy {
    Id = "id",
    Policy = "policy",
    Comptroller = "comptroller",
    Listed = "listed",
    Adapters = "adapters",
    Timestamp = "timestamp",
    Enabled = "enabled",
    Events = "events"
}
export declare type AdapterDeregisteredEvent = EventInterface & NetworkEventInterface & {
    __typename?: 'AdapterDeregisteredEvent';
    id: Scalars['ID'];
    identifier: Scalars['String'];
    timestamp: Scalars['BigInt'];
    transaction: Transaction;
    integrationAdapter: IntegrationAdapter;
};
export declare type AdapterDeregisteredEvent_Filter = {
    id?: Maybe<Scalars['ID']>;
    id_not?: Maybe<Scalars['ID']>;
    id_gt?: Maybe<Scalars['ID']>;
    id_lt?: Maybe<Scalars['ID']>;
    id_gte?: Maybe<Scalars['ID']>;
    id_lte?: Maybe<Scalars['ID']>;
    id_in?: Maybe<Array<Scalars['ID']>>;
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    identifier?: Maybe<Scalars['String']>;
    identifier_not?: Maybe<Scalars['String']>;
    identifier_gt?: Maybe<Scalars['String']>;
    identifier_lt?: Maybe<Scalars['String']>;
    identifier_gte?: Maybe<Scalars['String']>;
    identifier_lte?: Maybe<Scalars['String']>;
    identifier_in?: Maybe<Array<Scalars['String']>>;
    identifier_not_in?: Maybe<Array<Scalars['String']>>;
    identifier_contains?: Maybe<Scalars['String']>;
    identifier_not_contains?: Maybe<Scalars['String']>;
    identifier_starts_with?: Maybe<Scalars['String']>;
    identifier_not_starts_with?: Maybe<Scalars['String']>;
    identifier_ends_with?: Maybe<Scalars['String']>;
    identifier_not_ends_with?: Maybe<Scalars['String']>;
    timestamp?: Maybe<Scalars['BigInt']>;
    timestamp_not?: Maybe<Scalars['BigInt']>;
    timestamp_gt?: Maybe<Scalars['BigInt']>;
    timestamp_lt?: Maybe<Scalars['BigInt']>;
    timestamp_gte?: Maybe<Scalars['BigInt']>;
    timestamp_lte?: Maybe<Scalars['BigInt']>;
    timestamp_in?: Maybe<Array<Scalars['BigInt']>>;
    timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;
    transaction?: Maybe<Scalars['String']>;
    transaction_not?: Maybe<Scalars['String']>;
    transaction_gt?: Maybe<Scalars['String']>;
    transaction_lt?: Maybe<Scalars['String']>;
    transaction_gte?: Maybe<Scalars['String']>;
    transaction_lte?: Maybe<Scalars['String']>;
    transaction_in?: Maybe<Array<Scalars['String']>>;
    transaction_not_in?: Maybe<Array<Scalars['String']>>;
    transaction_contains?: Maybe<Scalars['String']>;
    transaction_not_contains?: Maybe<Scalars['String']>;
    transaction_starts_with?: Maybe<Scalars['String']>;
    transaction_not_starts_with?: Maybe<Scalars['String']>;
    transaction_ends_with?: Maybe<Scalars['String']>;
    transaction_not_ends_with?: Maybe<Scalars['String']>;
    integrationAdapter?: Maybe<Scalars['String']>;
    integrationAdapter_not?: Maybe<Scalars['String']>;
    integrationAdapter_gt?: Maybe<Scalars['String']>;
    integrationAdapter_lt?: Maybe<Scalars['String']>;
    integrationAdapter_gte?: Maybe<Scalars['String']>;
    integrationAdapter_lte?: Maybe<Scalars['String']>;
    integrationAdapter_in?: Maybe<Array<Scalars['String']>>;
    integrationAdapter_not_in?: Maybe<Array<Scalars['String']>>;
    integrationAdapter_contains?: Maybe<Scalars['String']>;
    integrationAdapter_not_contains?: Maybe<Scalars['String']>;
    integrationAdapter_starts_with?: Maybe<Scalars['String']>;
    integrationAdapter_not_starts_with?: Maybe<Scalars['String']>;
    integrationAdapter_ends_with?: Maybe<Scalars['String']>;
    integrationAdapter_not_ends_with?: Maybe<Scalars['String']>;
};
export declare enum AdapterDeregisteredEvent_OrderBy {
    Id = "id",
    Identifier = "identifier",
    Timestamp = "timestamp",
    Transaction = "transaction",
    IntegrationAdapter = "integrationAdapter"
}
export declare type AdapterRegisteredEvent = EventInterface & NetworkEventInterface & {
    __typename?: 'AdapterRegisteredEvent';
    id: Scalars['ID'];
    identifier: Scalars['String'];
    timestamp: Scalars['BigInt'];
    transaction: Transaction;
    integrationAdapter: IntegrationAdapter;
};
export declare type AdapterRegisteredEvent_Filter = {
    id?: Maybe<Scalars['ID']>;
    id_not?: Maybe<Scalars['ID']>;
    id_gt?: Maybe<Scalars['ID']>;
    id_lt?: Maybe<Scalars['ID']>;
    id_gte?: Maybe<Scalars['ID']>;
    id_lte?: Maybe<Scalars['ID']>;
    id_in?: Maybe<Array<Scalars['ID']>>;
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    identifier?: Maybe<Scalars['String']>;
    identifier_not?: Maybe<Scalars['String']>;
    identifier_gt?: Maybe<Scalars['String']>;
    identifier_lt?: Maybe<Scalars['String']>;
    identifier_gte?: Maybe<Scalars['String']>;
    identifier_lte?: Maybe<Scalars['String']>;
    identifier_in?: Maybe<Array<Scalars['String']>>;
    identifier_not_in?: Maybe<Array<Scalars['String']>>;
    identifier_contains?: Maybe<Scalars['String']>;
    identifier_not_contains?: Maybe<Scalars['String']>;
    identifier_starts_with?: Maybe<Scalars['String']>;
    identifier_not_starts_with?: Maybe<Scalars['String']>;
    identifier_ends_with?: Maybe<Scalars['String']>;
    identifier_not_ends_with?: Maybe<Scalars['String']>;
    timestamp?: Maybe<Scalars['BigInt']>;
    timestamp_not?: Maybe<Scalars['BigInt']>;
    timestamp_gt?: Maybe<Scalars['BigInt']>;
    timestamp_lt?: Maybe<Scalars['BigInt']>;
    timestamp_gte?: Maybe<Scalars['BigInt']>;
    timestamp_lte?: Maybe<Scalars['BigInt']>;
    timestamp_in?: Maybe<Array<Scalars['BigInt']>>;
    timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;
    transaction?: Maybe<Scalars['String']>;
    transaction_not?: Maybe<Scalars['String']>;
    transaction_gt?: Maybe<Scalars['String']>;
    transaction_lt?: Maybe<Scalars['String']>;
    transaction_gte?: Maybe<Scalars['String']>;
    transaction_lte?: Maybe<Scalars['String']>;
    transaction_in?: Maybe<Array<Scalars['String']>>;
    transaction_not_in?: Maybe<Array<Scalars['String']>>;
    transaction_contains?: Maybe<Scalars['String']>;
    transaction_not_contains?: Maybe<Scalars['String']>;
    transaction_starts_with?: Maybe<Scalars['String']>;
    transaction_not_starts_with?: Maybe<Scalars['String']>;
    transaction_ends_with?: Maybe<Scalars['String']>;
    transaction_not_ends_with?: Maybe<Scalars['String']>;
    integrationAdapter?: Maybe<Scalars['String']>;
    integrationAdapter_not?: Maybe<Scalars['String']>;
    integrationAdapter_gt?: Maybe<Scalars['String']>;
    integrationAdapter_lt?: Maybe<Scalars['String']>;
    integrationAdapter_gte?: Maybe<Scalars['String']>;
    integrationAdapter_lte?: Maybe<Scalars['String']>;
    integrationAdapter_in?: Maybe<Array<Scalars['String']>>;
    integrationAdapter_not_in?: Maybe<Array<Scalars['String']>>;
    integrationAdapter_contains?: Maybe<Scalars['String']>;
    integrationAdapter_not_contains?: Maybe<Scalars['String']>;
    integrationAdapter_starts_with?: Maybe<Scalars['String']>;
    integrationAdapter_not_starts_with?: Maybe<Scalars['String']>;
    integrationAdapter_ends_with?: Maybe<Scalars['String']>;
    integrationAdapter_not_ends_with?: Maybe<Scalars['String']>;
};
export declare enum AdapterRegisteredEvent_OrderBy {
    Id = "id",
    Identifier = "identifier",
    Timestamp = "timestamp",
    Transaction = "transaction",
    IntegrationAdapter = "integrationAdapter"
}
export declare type AdapterWhitelistAddressesAddedEvent = EventInterface & FundEventInterface & {
    __typename?: 'AdapterWhitelistAddressesAddedEvent';
    id: Scalars['ID'];
    fund: Fund;
    timestamp: Scalars['BigInt'];
    transaction: Transaction;
    comptrollerProxy: Scalars['String'];
    items: Array<IntegrationAdapter>;
};
export declare type AdapterWhitelistAddressesAddedEventItemsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<IntegrationAdapter_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<IntegrationAdapter_Filter>;
};
export declare type AdapterWhitelistAddressesAddedEvent_Filter = {
    id?: Maybe<Scalars['ID']>;
    id_not?: Maybe<Scalars['ID']>;
    id_gt?: Maybe<Scalars['ID']>;
    id_lt?: Maybe<Scalars['ID']>;
    id_gte?: Maybe<Scalars['ID']>;
    id_lte?: Maybe<Scalars['ID']>;
    id_in?: Maybe<Array<Scalars['ID']>>;
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    fund?: Maybe<Scalars['String']>;
    fund_not?: Maybe<Scalars['String']>;
    fund_gt?: Maybe<Scalars['String']>;
    fund_lt?: Maybe<Scalars['String']>;
    fund_gte?: Maybe<Scalars['String']>;
    fund_lte?: Maybe<Scalars['String']>;
    fund_in?: Maybe<Array<Scalars['String']>>;
    fund_not_in?: Maybe<Array<Scalars['String']>>;
    fund_contains?: Maybe<Scalars['String']>;
    fund_not_contains?: Maybe<Scalars['String']>;
    fund_starts_with?: Maybe<Scalars['String']>;
    fund_not_starts_with?: Maybe<Scalars['String']>;
    fund_ends_with?: Maybe<Scalars['String']>;
    fund_not_ends_with?: Maybe<Scalars['String']>;
    timestamp?: Maybe<Scalars['BigInt']>;
    timestamp_not?: Maybe<Scalars['BigInt']>;
    timestamp_gt?: Maybe<Scalars['BigInt']>;
    timestamp_lt?: Maybe<Scalars['BigInt']>;
    timestamp_gte?: Maybe<Scalars['BigInt']>;
    timestamp_lte?: Maybe<Scalars['BigInt']>;
    timestamp_in?: Maybe<Array<Scalars['BigInt']>>;
    timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;
    transaction?: Maybe<Scalars['String']>;
    transaction_not?: Maybe<Scalars['String']>;
    transaction_gt?: Maybe<Scalars['String']>;
    transaction_lt?: Maybe<Scalars['String']>;
    transaction_gte?: Maybe<Scalars['String']>;
    transaction_lte?: Maybe<Scalars['String']>;
    transaction_in?: Maybe<Array<Scalars['String']>>;
    transaction_not_in?: Maybe<Array<Scalars['String']>>;
    transaction_contains?: Maybe<Scalars['String']>;
    transaction_not_contains?: Maybe<Scalars['String']>;
    transaction_starts_with?: Maybe<Scalars['String']>;
    transaction_not_starts_with?: Maybe<Scalars['String']>;
    transaction_ends_with?: Maybe<Scalars['String']>;
    transaction_not_ends_with?: Maybe<Scalars['String']>;
    comptrollerProxy?: Maybe<Scalars['String']>;
    comptrollerProxy_not?: Maybe<Scalars['String']>;
    comptrollerProxy_gt?: Maybe<Scalars['String']>;
    comptrollerProxy_lt?: Maybe<Scalars['String']>;
    comptrollerProxy_gte?: Maybe<Scalars['String']>;
    comptrollerProxy_lte?: Maybe<Scalars['String']>;
    comptrollerProxy_in?: Maybe<Array<Scalars['String']>>;
    comptrollerProxy_not_in?: Maybe<Array<Scalars['String']>>;
    comptrollerProxy_contains?: Maybe<Scalars['String']>;
    comptrollerProxy_not_contains?: Maybe<Scalars['String']>;
    comptrollerProxy_starts_with?: Maybe<Scalars['String']>;
    comptrollerProxy_not_starts_with?: Maybe<Scalars['String']>;
    comptrollerProxy_ends_with?: Maybe<Scalars['String']>;
    comptrollerProxy_not_ends_with?: Maybe<Scalars['String']>;
    items?: Maybe<Array<Scalars['String']>>;
    items_not?: Maybe<Array<Scalars['String']>>;
    items_contains?: Maybe<Array<Scalars['String']>>;
    items_not_contains?: Maybe<Array<Scalars['String']>>;
};
export declare enum AdapterWhitelistAddressesAddedEvent_OrderBy {
    Id = "id",
    Fund = "fund",
    Timestamp = "timestamp",
    Transaction = "transaction",
    ComptrollerProxy = "comptrollerProxy",
    Items = "items"
}
export declare type AdapterWhitelistAddressesRemovedEvent = EventInterface & FundEventInterface & {
    __typename?: 'AdapterWhitelistAddressesRemovedEvent';
    id: Scalars['ID'];
    fund: Fund;
    timestamp: Scalars['BigInt'];
    transaction: Transaction;
    comptrollerProxy: Scalars['String'];
    items: Array<IntegrationAdapter>;
};
export declare type AdapterWhitelistAddressesRemovedEventItemsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<IntegrationAdapter_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<IntegrationAdapter_Filter>;
};
export declare type AdapterWhitelistAddressesRemovedEvent_Filter = {
    id?: Maybe<Scalars['ID']>;
    id_not?: Maybe<Scalars['ID']>;
    id_gt?: Maybe<Scalars['ID']>;
    id_lt?: Maybe<Scalars['ID']>;
    id_gte?: Maybe<Scalars['ID']>;
    id_lte?: Maybe<Scalars['ID']>;
    id_in?: Maybe<Array<Scalars['ID']>>;
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    fund?: Maybe<Scalars['String']>;
    fund_not?: Maybe<Scalars['String']>;
    fund_gt?: Maybe<Scalars['String']>;
    fund_lt?: Maybe<Scalars['String']>;
    fund_gte?: Maybe<Scalars['String']>;
    fund_lte?: Maybe<Scalars['String']>;
    fund_in?: Maybe<Array<Scalars['String']>>;
    fund_not_in?: Maybe<Array<Scalars['String']>>;
    fund_contains?: Maybe<Scalars['String']>;
    fund_not_contains?: Maybe<Scalars['String']>;
    fund_starts_with?: Maybe<Scalars['String']>;
    fund_not_starts_with?: Maybe<Scalars['String']>;
    fund_ends_with?: Maybe<Scalars['String']>;
    fund_not_ends_with?: Maybe<Scalars['String']>;
    timestamp?: Maybe<Scalars['BigInt']>;
    timestamp_not?: Maybe<Scalars['BigInt']>;
    timestamp_gt?: Maybe<Scalars['BigInt']>;
    timestamp_lt?: Maybe<Scalars['BigInt']>;
    timestamp_gte?: Maybe<Scalars['BigInt']>;
    timestamp_lte?: Maybe<Scalars['BigInt']>;
    timestamp_in?: Maybe<Array<Scalars['BigInt']>>;
    timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;
    transaction?: Maybe<Scalars['String']>;
    transaction_not?: Maybe<Scalars['String']>;
    transaction_gt?: Maybe<Scalars['String']>;
    transaction_lt?: Maybe<Scalars['String']>;
    transaction_gte?: Maybe<Scalars['String']>;
    transaction_lte?: Maybe<Scalars['String']>;
    transaction_in?: Maybe<Array<Scalars['String']>>;
    transaction_not_in?: Maybe<Array<Scalars['String']>>;
    transaction_contains?: Maybe<Scalars['String']>;
    transaction_not_contains?: Maybe<Scalars['String']>;
    transaction_starts_with?: Maybe<Scalars['String']>;
    transaction_not_starts_with?: Maybe<Scalars['String']>;
    transaction_ends_with?: Maybe<Scalars['String']>;
    transaction_not_ends_with?: Maybe<Scalars['String']>;
    comptrollerProxy?: Maybe<Scalars['String']>;
    comptrollerProxy_not?: Maybe<Scalars['String']>;
    comptrollerProxy_gt?: Maybe<Scalars['String']>;
    comptrollerProxy_lt?: Maybe<Scalars['String']>;
    comptrollerProxy_gte?: Maybe<Scalars['String']>;
    comptrollerProxy_lte?: Maybe<Scalars['String']>;
    comptrollerProxy_in?: Maybe<Array<Scalars['String']>>;
    comptrollerProxy_not_in?: Maybe<Array<Scalars['String']>>;
    comptrollerProxy_contains?: Maybe<Scalars['String']>;
    comptrollerProxy_not_contains?: Maybe<Scalars['String']>;
    comptrollerProxy_starts_with?: Maybe<Scalars['String']>;
    comptrollerProxy_not_starts_with?: Maybe<Scalars['String']>;
    comptrollerProxy_ends_with?: Maybe<Scalars['String']>;
    comptrollerProxy_not_ends_with?: Maybe<Scalars['String']>;
    items?: Maybe<Array<Scalars['String']>>;
    items_not?: Maybe<Array<Scalars['String']>>;
    items_contains?: Maybe<Array<Scalars['String']>>;
    items_not_contains?: Maybe<Array<Scalars['String']>>;
};
export declare enum AdapterWhitelistAddressesRemovedEvent_OrderBy {
    Id = "id",
    Fund = "fund",
    Timestamp = "timestamp",
    Transaction = "transaction",
    ComptrollerProxy = "comptrollerProxy",
    Items = "items"
}
export declare type AdapterWhitelistSetting = PolicySettingInterface & {
    __typename?: 'AdapterWhitelistSetting';
    id: Scalars['ID'];
    policy: Policy;
    comptroller: ComptrollerProxy;
    listed: Array<Scalars['String']>;
    adapters: Array<Maybe<IntegrationAdapter>>;
    timestamp: Scalars['BigInt'];
    enabled: Scalars['Boolean'];
    events: Array<FundEventInterface>;
};
export declare type AdapterWhitelistSettingAdaptersArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<IntegrationAdapter_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<IntegrationAdapter_Filter>;
};
export declare type AdapterWhitelistSettingEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<FundEventInterface_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<FundEventInterface_Filter>;
};
export declare type AdapterWhitelistSetting_Filter = {
    id?: Maybe<Scalars['ID']>;
    id_not?: Maybe<Scalars['ID']>;
    id_gt?: Maybe<Scalars['ID']>;
    id_lt?: Maybe<Scalars['ID']>;
    id_gte?: Maybe<Scalars['ID']>;
    id_lte?: Maybe<Scalars['ID']>;
    id_in?: Maybe<Array<Scalars['ID']>>;
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    policy?: Maybe<Scalars['String']>;
    policy_not?: Maybe<Scalars['String']>;
    policy_gt?: Maybe<Scalars['String']>;
    policy_lt?: Maybe<Scalars['String']>;
    policy_gte?: Maybe<Scalars['String']>;
    policy_lte?: Maybe<Scalars['String']>;
    policy_in?: Maybe<Array<Scalars['String']>>;
    policy_not_in?: Maybe<Array<Scalars['String']>>;
    policy_contains?: Maybe<Scalars['String']>;
    policy_not_contains?: Maybe<Scalars['String']>;
    policy_starts_with?: Maybe<Scalars['String']>;
    policy_not_starts_with?: Maybe<Scalars['String']>;
    policy_ends_with?: Maybe<Scalars['String']>;
    policy_not_ends_with?: Maybe<Scalars['String']>;
    comptroller?: Maybe<Scalars['String']>;
    comptroller_not?: Maybe<Scalars['String']>;
    comptroller_gt?: Maybe<Scalars['String']>;
    comptroller_lt?: Maybe<Scalars['String']>;
    comptroller_gte?: Maybe<Scalars['String']>;
    comptroller_lte?: Maybe<Scalars['String']>;
    comptroller_in?: Maybe<Array<Scalars['String']>>;
    comptroller_not_in?: Maybe<Array<Scalars['String']>>;
    comptroller_contains?: Maybe<Scalars['String']>;
    comptroller_not_contains?: Maybe<Scalars['String']>;
    comptroller_starts_with?: Maybe<Scalars['String']>;
    comptroller_not_starts_with?: Maybe<Scalars['String']>;
    comptroller_ends_with?: Maybe<Scalars['String']>;
    comptroller_not_ends_with?: Maybe<Scalars['String']>;
    listed?: Maybe<Array<Scalars['String']>>;
    listed_not?: Maybe<Array<Scalars['String']>>;
    listed_contains?: Maybe<Array<Scalars['String']>>;
    listed_not_contains?: Maybe<Array<Scalars['String']>>;
    adapters?: Maybe<Array<Scalars['String']>>;
    adapters_not?: Maybe<Array<Scalars['String']>>;
    adapters_contains?: Maybe<Array<Scalars['String']>>;
    adapters_not_contains?: Maybe<Array<Scalars['String']>>;
    timestamp?: Maybe<Scalars['BigInt']>;
    timestamp_not?: Maybe<Scalars['BigInt']>;
    timestamp_gt?: Maybe<Scalars['BigInt']>;
    timestamp_lt?: Maybe<Scalars['BigInt']>;
    timestamp_gte?: Maybe<Scalars['BigInt']>;
    timestamp_lte?: Maybe<Scalars['BigInt']>;
    timestamp_in?: Maybe<Array<Scalars['BigInt']>>;
    timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;
    enabled?: Maybe<Scalars['Boolean']>;
    enabled_not?: Maybe<Scalars['Boolean']>;
    enabled_in?: Maybe<Array<Scalars['Boolean']>>;
    enabled_not_in?: Maybe<Array<Scalars['Boolean']>>;
    events?: Maybe<Array<Scalars['String']>>;
    events_not?: Maybe<Array<Scalars['String']>>;
    events_contains?: Maybe<Array<Scalars['String']>>;
    events_not_contains?: Maybe<Array<Scalars['String']>>;
};
export declare enum AdapterWhitelistSetting_OrderBy {
    Id = "id",
    Policy = "policy",
    Comptroller = "comptroller",
    Listed = "listed",
    Adapters = "adapters",
    Timestamp = "timestamp",
    Enabled = "enabled",
    Events = "events"
}
export declare type AddTrackedAssetsTrade = Trade & {
    __typename?: 'AddTrackedAssetsTrade';
    id: Scalars['ID'];
    fund: Fund;
    adapter: IntegrationAdapter;
    method: IntegrationMethod;
    incomingAssetAmounts: Array<AssetAmount>;
    timestamp: Scalars['BigInt'];
    fundState: FundState;
};
export declare type AddTrackedAssetsTradeIncomingAssetAmountsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<AssetAmount_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<AssetAmount_Filter>;
};
export declare type AddTrackedAssetsTrade_Filter = {
    id?: Maybe<Scalars['ID']>;
    id_not?: Maybe<Scalars['ID']>;
    id_gt?: Maybe<Scalars['ID']>;
    id_lt?: Maybe<Scalars['ID']>;
    id_gte?: Maybe<Scalars['ID']>;
    id_lte?: Maybe<Scalars['ID']>;
    id_in?: Maybe<Array<Scalars['ID']>>;
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    fund?: Maybe<Scalars['String']>;
    fund_not?: Maybe<Scalars['String']>;
    fund_gt?: Maybe<Scalars['String']>;
    fund_lt?: Maybe<Scalars['String']>;
    fund_gte?: Maybe<Scalars['String']>;
    fund_lte?: Maybe<Scalars['String']>;
    fund_in?: Maybe<Array<Scalars['String']>>;
    fund_not_in?: Maybe<Array<Scalars['String']>>;
    fund_contains?: Maybe<Scalars['String']>;
    fund_not_contains?: Maybe<Scalars['String']>;
    fund_starts_with?: Maybe<Scalars['String']>;
    fund_not_starts_with?: Maybe<Scalars['String']>;
    fund_ends_with?: Maybe<Scalars['String']>;
    fund_not_ends_with?: Maybe<Scalars['String']>;
    adapter?: Maybe<Scalars['String']>;
    adapter_not?: Maybe<Scalars['String']>;
    adapter_gt?: Maybe<Scalars['String']>;
    adapter_lt?: Maybe<Scalars['String']>;
    adapter_gte?: Maybe<Scalars['String']>;
    adapter_lte?: Maybe<Scalars['String']>;
    adapter_in?: Maybe<Array<Scalars['String']>>;
    adapter_not_in?: Maybe<Array<Scalars['String']>>;
    adapter_contains?: Maybe<Scalars['String']>;
    adapter_not_contains?: Maybe<Scalars['String']>;
    adapter_starts_with?: Maybe<Scalars['String']>;
    adapter_not_starts_with?: Maybe<Scalars['String']>;
    adapter_ends_with?: Maybe<Scalars['String']>;
    adapter_not_ends_with?: Maybe<Scalars['String']>;
    method?: Maybe<IntegrationMethod>;
    method_not?: Maybe<IntegrationMethod>;
    incomingAssetAmounts?: Maybe<Array<Scalars['String']>>;
    incomingAssetAmounts_not?: Maybe<Array<Scalars['String']>>;
    incomingAssetAmounts_contains?: Maybe<Array<Scalars['String']>>;
    incomingAssetAmounts_not_contains?: Maybe<Array<Scalars['String']>>;
    timestamp?: Maybe<Scalars['BigInt']>;
    timestamp_not?: Maybe<Scalars['BigInt']>;
    timestamp_gt?: Maybe<Scalars['BigInt']>;
    timestamp_lt?: Maybe<Scalars['BigInt']>;
    timestamp_gte?: Maybe<Scalars['BigInt']>;
    timestamp_lte?: Maybe<Scalars['BigInt']>;
    timestamp_in?: Maybe<Array<Scalars['BigInt']>>;
    timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;
    fundState?: Maybe<Scalars['String']>;
    fundState_not?: Maybe<Scalars['String']>;
    fundState_gt?: Maybe<Scalars['String']>;
    fundState_lt?: Maybe<Scalars['String']>;
    fundState_gte?: Maybe<Scalars['String']>;
    fundState_lte?: Maybe<Scalars['String']>;
    fundState_in?: Maybe<Array<Scalars['String']>>;
    fundState_not_in?: Maybe<Array<Scalars['String']>>;
    fundState_contains?: Maybe<Scalars['String']>;
    fundState_not_contains?: Maybe<Scalars['String']>;
    fundState_starts_with?: Maybe<Scalars['String']>;
    fundState_not_starts_with?: Maybe<Scalars['String']>;
    fundState_ends_with?: Maybe<Scalars['String']>;
    fundState_not_ends_with?: Maybe<Scalars['String']>;
};
export declare enum AddTrackedAssetsTrade_OrderBy {
    Id = "id",
    Fund = "fund",
    Adapter = "adapter",
    Method = "method",
    IncomingAssetAmounts = "incomingAssetAmounts",
    Timestamp = "timestamp",
    FundState = "fundState"
}
export declare type AggregatorUpdatedEvent = EventInterface & NetworkEventInterface & {
    __typename?: 'AggregatorUpdatedEvent';
    id: Scalars['ID'];
    timestamp: Scalars['BigInt'];
    transaction: Transaction;
    primitive: Asset;
    prevAggregator: Scalars['String'];
    nextAggregator: Scalars['String'];
};
export declare type AggregatorUpdatedEvent_Filter = {
    id?: Maybe<Scalars['ID']>;
    id_not?: Maybe<Scalars['ID']>;
    id_gt?: Maybe<Scalars['ID']>;
    id_lt?: Maybe<Scalars['ID']>;
    id_gte?: Maybe<Scalars['ID']>;
    id_lte?: Maybe<Scalars['ID']>;
    id_in?: Maybe<Array<Scalars['ID']>>;
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    timestamp?: Maybe<Scalars['BigInt']>;
    timestamp_not?: Maybe<Scalars['BigInt']>;
    timestamp_gt?: Maybe<Scalars['BigInt']>;
    timestamp_lt?: Maybe<Scalars['BigInt']>;
    timestamp_gte?: Maybe<Scalars['BigInt']>;
    timestamp_lte?: Maybe<Scalars['BigInt']>;
    timestamp_in?: Maybe<Array<Scalars['BigInt']>>;
    timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;
    transaction?: Maybe<Scalars['String']>;
    transaction_not?: Maybe<Scalars['String']>;
    transaction_gt?: Maybe<Scalars['String']>;
    transaction_lt?: Maybe<Scalars['String']>;
    transaction_gte?: Maybe<Scalars['String']>;
    transaction_lte?: Maybe<Scalars['String']>;
    transaction_in?: Maybe<Array<Scalars['String']>>;
    transaction_not_in?: Maybe<Array<Scalars['String']>>;
    transaction_contains?: Maybe<Scalars['String']>;
    transaction_not_contains?: Maybe<Scalars['String']>;
    transaction_starts_with?: Maybe<Scalars['String']>;
    transaction_not_starts_with?: Maybe<Scalars['String']>;
    transaction_ends_with?: Maybe<Scalars['String']>;
    transaction_not_ends_with?: Maybe<Scalars['String']>;
    primitive?: Maybe<Scalars['String']>;
    primitive_not?: Maybe<Scalars['String']>;
    primitive_gt?: Maybe<Scalars['String']>;
    primitive_lt?: Maybe<Scalars['String']>;
    primitive_gte?: Maybe<Scalars['String']>;
    primitive_lte?: Maybe<Scalars['String']>;
    primitive_in?: Maybe<Array<Scalars['String']>>;
    primitive_not_in?: Maybe<Array<Scalars['String']>>;
    primitive_contains?: Maybe<Scalars['String']>;
    primitive_not_contains?: Maybe<Scalars['String']>;
    primitive_starts_with?: Maybe<Scalars['String']>;
    primitive_not_starts_with?: Maybe<Scalars['String']>;
    primitive_ends_with?: Maybe<Scalars['String']>;
    primitive_not_ends_with?: Maybe<Scalars['String']>;
    prevAggregator?: Maybe<Scalars['String']>;
    prevAggregator_not?: Maybe<Scalars['String']>;
    prevAggregator_gt?: Maybe<Scalars['String']>;
    prevAggregator_lt?: Maybe<Scalars['String']>;
    prevAggregator_gte?: Maybe<Scalars['String']>;
    prevAggregator_lte?: Maybe<Scalars['String']>;
    prevAggregator_in?: Maybe<Array<Scalars['String']>>;
    prevAggregator_not_in?: Maybe<Array<Scalars['String']>>;
    prevAggregator_contains?: Maybe<Scalars['String']>;
    prevAggregator_not_contains?: Maybe<Scalars['String']>;
    prevAggregator_starts_with?: Maybe<Scalars['String']>;
    prevAggregator_not_starts_with?: Maybe<Scalars['String']>;
    prevAggregator_ends_with?: Maybe<Scalars['String']>;
    prevAggregator_not_ends_with?: Maybe<Scalars['String']>;
    nextAggregator?: Maybe<Scalars['String']>;
    nextAggregator_not?: Maybe<Scalars['String']>;
    nextAggregator_gt?: Maybe<Scalars['String']>;
    nextAggregator_lt?: Maybe<Scalars['String']>;
    nextAggregator_gte?: Maybe<Scalars['String']>;
    nextAggregator_lte?: Maybe<Scalars['String']>;
    nextAggregator_in?: Maybe<Array<Scalars['String']>>;
    nextAggregator_not_in?: Maybe<Array<Scalars['String']>>;
    nextAggregator_contains?: Maybe<Scalars['String']>;
    nextAggregator_not_contains?: Maybe<Scalars['String']>;
    nextAggregator_starts_with?: Maybe<Scalars['String']>;
    nextAggregator_not_starts_with?: Maybe<Scalars['String']>;
    nextAggregator_ends_with?: Maybe<Scalars['String']>;
    nextAggregator_not_ends_with?: Maybe<Scalars['String']>;
};
export declare enum AggregatorUpdatedEvent_OrderBy {
    Id = "id",
    Timestamp = "timestamp",
    Transaction = "transaction",
    Primitive = "primitive",
    PrevAggregator = "prevAggregator",
    NextAggregator = "nextAggregator"
}
export declare type AllSharesOutstandingForcePaidForFundEvent = EventInterface & FundEventInterface & SharesChangeInterface & FeeSharesChangeInterface & {
    __typename?: 'AllSharesOutstandingForcePaidForFundEvent';
    id: Scalars['ID'];
    fund: Fund;
    type: ShareChangeType;
    investor: Account;
    timestamp: Scalars['BigInt'];
    transaction: Transaction;
    investmentState: InvestmentState;
    shares: Scalars['BigDecimal'];
    comptrollerProxy: ComptrollerProxy;
    payee: Scalars['String'];
    sharesDue: Scalars['BigDecimal'];
    fundState: FundState;
};
export declare type AllSharesOutstandingForcePaidForFundEvent_Filter = {
    id?: Maybe<Scalars['ID']>;
    id_not?: Maybe<Scalars['ID']>;
    id_gt?: Maybe<Scalars['ID']>;
    id_lt?: Maybe<Scalars['ID']>;
    id_gte?: Maybe<Scalars['ID']>;
    id_lte?: Maybe<Scalars['ID']>;
    id_in?: Maybe<Array<Scalars['ID']>>;
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    fund?: Maybe<Scalars['String']>;
    fund_not?: Maybe<Scalars['String']>;
    fund_gt?: Maybe<Scalars['String']>;
    fund_lt?: Maybe<Scalars['String']>;
    fund_gte?: Maybe<Scalars['String']>;
    fund_lte?: Maybe<Scalars['String']>;
    fund_in?: Maybe<Array<Scalars['String']>>;
    fund_not_in?: Maybe<Array<Scalars['String']>>;
    fund_contains?: Maybe<Scalars['String']>;
    fund_not_contains?: Maybe<Scalars['String']>;
    fund_starts_with?: Maybe<Scalars['String']>;
    fund_not_starts_with?: Maybe<Scalars['String']>;
    fund_ends_with?: Maybe<Scalars['String']>;
    fund_not_ends_with?: Maybe<Scalars['String']>;
    type?: Maybe<ShareChangeType>;
    type_not?: Maybe<ShareChangeType>;
    investor?: Maybe<Scalars['String']>;
    investor_not?: Maybe<Scalars['String']>;
    investor_gt?: Maybe<Scalars['String']>;
    investor_lt?: Maybe<Scalars['String']>;
    investor_gte?: Maybe<Scalars['String']>;
    investor_lte?: Maybe<Scalars['String']>;
    investor_in?: Maybe<Array<Scalars['String']>>;
    investor_not_in?: Maybe<Array<Scalars['String']>>;
    investor_contains?: Maybe<Scalars['String']>;
    investor_not_contains?: Maybe<Scalars['String']>;
    investor_starts_with?: Maybe<Scalars['String']>;
    investor_not_starts_with?: Maybe<Scalars['String']>;
    investor_ends_with?: Maybe<Scalars['String']>;
    investor_not_ends_with?: Maybe<Scalars['String']>;
    timestamp?: Maybe<Scalars['BigInt']>;
    timestamp_not?: Maybe<Scalars['BigInt']>;
    timestamp_gt?: Maybe<Scalars['BigInt']>;
    timestamp_lt?: Maybe<Scalars['BigInt']>;
    timestamp_gte?: Maybe<Scalars['BigInt']>;
    timestamp_lte?: Maybe<Scalars['BigInt']>;
    timestamp_in?: Maybe<Array<Scalars['BigInt']>>;
    timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;
    transaction?: Maybe<Scalars['String']>;
    transaction_not?: Maybe<Scalars['String']>;
    transaction_gt?: Maybe<Scalars['String']>;
    transaction_lt?: Maybe<Scalars['String']>;
    transaction_gte?: Maybe<Scalars['String']>;
    transaction_lte?: Maybe<Scalars['String']>;
    transaction_in?: Maybe<Array<Scalars['String']>>;
    transaction_not_in?: Maybe<Array<Scalars['String']>>;
    transaction_contains?: Maybe<Scalars['String']>;
    transaction_not_contains?: Maybe<Scalars['String']>;
    transaction_starts_with?: Maybe<Scalars['String']>;
    transaction_not_starts_with?: Maybe<Scalars['String']>;
    transaction_ends_with?: Maybe<Scalars['String']>;
    transaction_not_ends_with?: Maybe<Scalars['String']>;
    investmentState?: Maybe<Scalars['String']>;
    investmentState_not?: Maybe<Scalars['String']>;
    investmentState_gt?: Maybe<Scalars['String']>;
    investmentState_lt?: Maybe<Scalars['String']>;
    investmentState_gte?: Maybe<Scalars['String']>;
    investmentState_lte?: Maybe<Scalars['String']>;
    investmentState_in?: Maybe<Array<Scalars['String']>>;
    investmentState_not_in?: Maybe<Array<Scalars['String']>>;
    investmentState_contains?: Maybe<Scalars['String']>;
    investmentState_not_contains?: Maybe<Scalars['String']>;
    investmentState_starts_with?: Maybe<Scalars['String']>;
    investmentState_not_starts_with?: Maybe<Scalars['String']>;
    investmentState_ends_with?: Maybe<Scalars['String']>;
    investmentState_not_ends_with?: Maybe<Scalars['String']>;
    shares?: Maybe<Scalars['BigDecimal']>;
    shares_not?: Maybe<Scalars['BigDecimal']>;
    shares_gt?: Maybe<Scalars['BigDecimal']>;
    shares_lt?: Maybe<Scalars['BigDecimal']>;
    shares_gte?: Maybe<Scalars['BigDecimal']>;
    shares_lte?: Maybe<Scalars['BigDecimal']>;
    shares_in?: Maybe<Array<Scalars['BigDecimal']>>;
    shares_not_in?: Maybe<Array<Scalars['BigDecimal']>>;
    comptrollerProxy?: Maybe<Scalars['String']>;
    comptrollerProxy_not?: Maybe<Scalars['String']>;
    comptrollerProxy_gt?: Maybe<Scalars['String']>;
    comptrollerProxy_lt?: Maybe<Scalars['String']>;
    comptrollerProxy_gte?: Maybe<Scalars['String']>;
    comptrollerProxy_lte?: Maybe<Scalars['String']>;
    comptrollerProxy_in?: Maybe<Array<Scalars['String']>>;
    comptrollerProxy_not_in?: Maybe<Array<Scalars['String']>>;
    comptrollerProxy_contains?: Maybe<Scalars['String']>;
    comptrollerProxy_not_contains?: Maybe<Scalars['String']>;
    comptrollerProxy_starts_with?: Maybe<Scalars['String']>;
    comptrollerProxy_not_starts_with?: Maybe<Scalars['String']>;
    comptrollerProxy_ends_with?: Maybe<Scalars['String']>;
    comptrollerProxy_not_ends_with?: Maybe<Scalars['String']>;
    payee?: Maybe<Scalars['String']>;
    payee_not?: Maybe<Scalars['String']>;
    payee_gt?: Maybe<Scalars['String']>;
    payee_lt?: Maybe<Scalars['String']>;
    payee_gte?: Maybe<Scalars['String']>;
    payee_lte?: Maybe<Scalars['String']>;
    payee_in?: Maybe<Array<Scalars['String']>>;
    payee_not_in?: Maybe<Array<Scalars['String']>>;
    payee_contains?: Maybe<Scalars['String']>;
    payee_not_contains?: Maybe<Scalars['String']>;
    payee_starts_with?: Maybe<Scalars['String']>;
    payee_not_starts_with?: Maybe<Scalars['String']>;
    payee_ends_with?: Maybe<Scalars['String']>;
    payee_not_ends_with?: Maybe<Scalars['String']>;
    sharesDue?: Maybe<Scalars['BigDecimal']>;
    sharesDue_not?: Maybe<Scalars['BigDecimal']>;
    sharesDue_gt?: Maybe<Scalars['BigDecimal']>;
    sharesDue_lt?: Maybe<Scalars['BigDecimal']>;
    sharesDue_gte?: Maybe<Scalars['BigDecimal']>;
    sharesDue_lte?: Maybe<Scalars['BigDecimal']>;
    sharesDue_in?: Maybe<Array<Scalars['BigDecimal']>>;
    sharesDue_not_in?: Maybe<Array<Scalars['BigDecimal']>>;
    fundState?: Maybe<Scalars['String']>;
    fundState_not?: Maybe<Scalars['String']>;
    fundState_gt?: Maybe<Scalars['String']>;
    fundState_lt?: Maybe<Scalars['String']>;
    fundState_gte?: Maybe<Scalars['String']>;
    fundState_lte?: Maybe<Scalars['String']>;
    fundState_in?: Maybe<Array<Scalars['String']>>;
    fundState_not_in?: Maybe<Array<Scalars['String']>>;
    fundState_contains?: Maybe<Scalars['String']>;
    fundState_not_contains?: Maybe<Scalars['String']>;
    fundState_starts_with?: Maybe<Scalars['String']>;
    fundState_not_starts_with?: Maybe<Scalars['String']>;
    fundState_ends_with?: Maybe<Scalars['String']>;
    fundState_not_ends_with?: Maybe<Scalars['String']>;
};
export declare enum AllSharesOutstandingForcePaidForFundEvent_OrderBy {
    Id = "id",
    Fund = "fund",
    Type = "type",
    Investor = "investor",
    Timestamp = "timestamp",
    Transaction = "transaction",
    InvestmentState = "investmentState",
    Shares = "shares",
    ComptrollerProxy = "comptrollerProxy",
    Payee = "payee",
    SharesDue = "sharesDue",
    FundState = "fundState"
}
export declare type ApprovalEvent = EventInterface & FundEventInterface & {
    __typename?: 'ApprovalEvent';
    id: Scalars['ID'];
    fund: Fund;
    timestamp: Scalars['BigInt'];
    transaction: Transaction;
    owner: Scalars['String'];
    spender: Scalars['String'];
    value: Scalars['BigDecimal'];
};
export declare type ApprovalEvent_Filter = {
    id?: Maybe<Scalars['ID']>;
    id_not?: Maybe<Scalars['ID']>;
    id_gt?: Maybe<Scalars['ID']>;
    id_lt?: Maybe<Scalars['ID']>;
    id_gte?: Maybe<Scalars['ID']>;
    id_lte?: Maybe<Scalars['ID']>;
    id_in?: Maybe<Array<Scalars['ID']>>;
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    fund?: Maybe<Scalars['String']>;
    fund_not?: Maybe<Scalars['String']>;
    fund_gt?: Maybe<Scalars['String']>;
    fund_lt?: Maybe<Scalars['String']>;
    fund_gte?: Maybe<Scalars['String']>;
    fund_lte?: Maybe<Scalars['String']>;
    fund_in?: Maybe<Array<Scalars['String']>>;
    fund_not_in?: Maybe<Array<Scalars['String']>>;
    fund_contains?: Maybe<Scalars['String']>;
    fund_not_contains?: Maybe<Scalars['String']>;
    fund_starts_with?: Maybe<Scalars['String']>;
    fund_not_starts_with?: Maybe<Scalars['String']>;
    fund_ends_with?: Maybe<Scalars['String']>;
    fund_not_ends_with?: Maybe<Scalars['String']>;
    timestamp?: Maybe<Scalars['BigInt']>;
    timestamp_not?: Maybe<Scalars['BigInt']>;
    timestamp_gt?: Maybe<Scalars['BigInt']>;
    timestamp_lt?: Maybe<Scalars['BigInt']>;
    timestamp_gte?: Maybe<Scalars['BigInt']>;
    timestamp_lte?: Maybe<Scalars['BigInt']>;
    timestamp_in?: Maybe<Array<Scalars['BigInt']>>;
    timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;
    transaction?: Maybe<Scalars['String']>;
    transaction_not?: Maybe<Scalars['String']>;
    transaction_gt?: Maybe<Scalars['String']>;
    transaction_lt?: Maybe<Scalars['String']>;
    transaction_gte?: Maybe<Scalars['String']>;
    transaction_lte?: Maybe<Scalars['String']>;
    transaction_in?: Maybe<Array<Scalars['String']>>;
    transaction_not_in?: Maybe<Array<Scalars['String']>>;
    transaction_contains?: Maybe<Scalars['String']>;
    transaction_not_contains?: Maybe<Scalars['String']>;
    transaction_starts_with?: Maybe<Scalars['String']>;
    transaction_not_starts_with?: Maybe<Scalars['String']>;
    transaction_ends_with?: Maybe<Scalars['String']>;
    transaction_not_ends_with?: Maybe<Scalars['String']>;
    owner?: Maybe<Scalars['String']>;
    owner_not?: Maybe<Scalars['String']>;
    owner_gt?: Maybe<Scalars['String']>;
    owner_lt?: Maybe<Scalars['String']>;
    owner_gte?: Maybe<Scalars['String']>;
    owner_lte?: Maybe<Scalars['String']>;
    owner_in?: Maybe<Array<Scalars['String']>>;
    owner_not_in?: Maybe<Array<Scalars['String']>>;
    owner_contains?: Maybe<Scalars['String']>;
    owner_not_contains?: Maybe<Scalars['String']>;
    owner_starts_with?: Maybe<Scalars['String']>;
    owner_not_starts_with?: Maybe<Scalars['String']>;
    owner_ends_with?: Maybe<Scalars['String']>;
    owner_not_ends_with?: Maybe<Scalars['String']>;
    spender?: Maybe<Scalars['String']>;
    spender_not?: Maybe<Scalars['String']>;
    spender_gt?: Maybe<Scalars['String']>;
    spender_lt?: Maybe<Scalars['String']>;
    spender_gte?: Maybe<Scalars['String']>;
    spender_lte?: Maybe<Scalars['String']>;
    spender_in?: Maybe<Array<Scalars['String']>>;
    spender_not_in?: Maybe<Array<Scalars['String']>>;
    spender_contains?: Maybe<Scalars['String']>;
    spender_not_contains?: Maybe<Scalars['String']>;
    spender_starts_with?: Maybe<Scalars['String']>;
    spender_not_starts_with?: Maybe<Scalars['String']>;
    spender_ends_with?: Maybe<Scalars['String']>;
    spender_not_ends_with?: Maybe<Scalars['String']>;
    value?: Maybe<Scalars['BigDecimal']>;
    value_not?: Maybe<Scalars['BigDecimal']>;
    value_gt?: Maybe<Scalars['BigDecimal']>;
    value_lt?: Maybe<Scalars['BigDecimal']>;
    value_gte?: Maybe<Scalars['BigDecimal']>;
    value_lte?: Maybe<Scalars['BigDecimal']>;
    value_in?: Maybe<Array<Scalars['BigDecimal']>>;
    value_not_in?: Maybe<Array<Scalars['BigDecimal']>>;
};
export declare enum ApprovalEvent_OrderBy {
    Id = "id",
    Fund = "fund",
    Timestamp = "timestamp",
    Transaction = "transaction",
    Owner = "owner",
    Spender = "spender",
    Value = "value"
}
export declare type ApproveAssetsTrade = Trade & {
    __typename?: 'ApproveAssetsTrade';
    id: Scalars['ID'];
    fund: Fund;
    adapter: IntegrationAdapter;
    method: IntegrationMethod;
    incomingAssets: Array<Asset>;
    timestamp: Scalars['BigInt'];
    fundState: FundState;
};
export declare type ApproveAssetsTradeIncomingAssetsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<Asset_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<Asset_Filter>;
};
export declare type ApproveAssetsTrade_Filter = {
    id?: Maybe<Scalars['ID']>;
    id_not?: Maybe<Scalars['ID']>;
    id_gt?: Maybe<Scalars['ID']>;
    id_lt?: Maybe<Scalars['ID']>;
    id_gte?: Maybe<Scalars['ID']>;
    id_lte?: Maybe<Scalars['ID']>;
    id_in?: Maybe<Array<Scalars['ID']>>;
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    fund?: Maybe<Scalars['String']>;
    fund_not?: Maybe<Scalars['String']>;
    fund_gt?: Maybe<Scalars['String']>;
    fund_lt?: Maybe<Scalars['String']>;
    fund_gte?: Maybe<Scalars['String']>;
    fund_lte?: Maybe<Scalars['String']>;
    fund_in?: Maybe<Array<Scalars['String']>>;
    fund_not_in?: Maybe<Array<Scalars['String']>>;
    fund_contains?: Maybe<Scalars['String']>;
    fund_not_contains?: Maybe<Scalars['String']>;
    fund_starts_with?: Maybe<Scalars['String']>;
    fund_not_starts_with?: Maybe<Scalars['String']>;
    fund_ends_with?: Maybe<Scalars['String']>;
    fund_not_ends_with?: Maybe<Scalars['String']>;
    adapter?: Maybe<Scalars['String']>;
    adapter_not?: Maybe<Scalars['String']>;
    adapter_gt?: Maybe<Scalars['String']>;
    adapter_lt?: Maybe<Scalars['String']>;
    adapter_gte?: Maybe<Scalars['String']>;
    adapter_lte?: Maybe<Scalars['String']>;
    adapter_in?: Maybe<Array<Scalars['String']>>;
    adapter_not_in?: Maybe<Array<Scalars['String']>>;
    adapter_contains?: Maybe<Scalars['String']>;
    adapter_not_contains?: Maybe<Scalars['String']>;
    adapter_starts_with?: Maybe<Scalars['String']>;
    adapter_not_starts_with?: Maybe<Scalars['String']>;
    adapter_ends_with?: Maybe<Scalars['String']>;
    adapter_not_ends_with?: Maybe<Scalars['String']>;
    method?: Maybe<IntegrationMethod>;
    method_not?: Maybe<IntegrationMethod>;
    incomingAssets?: Maybe<Array<Scalars['String']>>;
    incomingAssets_not?: Maybe<Array<Scalars['String']>>;
    incomingAssets_contains?: Maybe<Array<Scalars['String']>>;
    incomingAssets_not_contains?: Maybe<Array<Scalars['String']>>;
    timestamp?: Maybe<Scalars['BigInt']>;
    timestamp_not?: Maybe<Scalars['BigInt']>;
    timestamp_gt?: Maybe<Scalars['BigInt']>;
    timestamp_lt?: Maybe<Scalars['BigInt']>;
    timestamp_gte?: Maybe<Scalars['BigInt']>;
    timestamp_lte?: Maybe<Scalars['BigInt']>;
    timestamp_in?: Maybe<Array<Scalars['BigInt']>>;
    timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;
    fundState?: Maybe<Scalars['String']>;
    fundState_not?: Maybe<Scalars['String']>;
    fundState_gt?: Maybe<Scalars['String']>;
    fundState_lt?: Maybe<Scalars['String']>;
    fundState_gte?: Maybe<Scalars['String']>;
    fundState_lte?: Maybe<Scalars['String']>;
    fundState_in?: Maybe<Array<Scalars['String']>>;
    fundState_not_in?: Maybe<Array<Scalars['String']>>;
    fundState_contains?: Maybe<Scalars['String']>;
    fundState_not_contains?: Maybe<Scalars['String']>;
    fundState_starts_with?: Maybe<Scalars['String']>;
    fundState_not_starts_with?: Maybe<Scalars['String']>;
    fundState_ends_with?: Maybe<Scalars['String']>;
    fundState_not_ends_with?: Maybe<Scalars['String']>;
};
export declare enum ApproveAssetsTrade_OrderBy {
    Id = "id",
    Fund = "fund",
    Adapter = "adapter",
    Method = "method",
    IncomingAssets = "incomingAssets",
    Timestamp = "timestamp",
    FundState = "fundState"
}
export declare type Asset = {
    __typename?: 'Asset';
    id: Scalars['ID'];
    name: Scalars['String'];
    symbol: Scalars['String'];
    decimals: Scalars['Int'];
    type: AssetType;
    releases: Array<Release>;
    derivativeType?: Maybe<DerivativeType>;
    underlyingAsset?: Maybe<Asset>;
    curvePoolAssetDetails?: Maybe<CurvePoolAssetDetail>;
    uniswapV2PoolAssetDetails?: Maybe<UniswapV2PoolAssetDetail>;
    price?: Maybe<AssetPrice>;
    hourly?: Maybe<HourlyAssetPriceCandle>;
    daily?: Maybe<DailyAssetPriceCandle>;
    monthly?: Maybe<MonthlyAssetPriceCandle>;
    priceHistory: Array<AssetPrice>;
    hourlyHistory: Array<HourlyAssetPriceCandle>;
    dailyHistory: Array<DailyAssetPriceCandle>;
    monthlyHistory: Array<MonthlyAssetPriceCandle>;
    trackingFunds: Array<Fund>;
    blacklisted: Array<AssetBlacklistSetting>;
    whitelisted: Array<AssetWhitelistSetting>;
    networkAssetHolding?: Maybe<NetworkAssetHolding>;
    networkAssetHoldingHistory: Array<NetworkAssetHolding>;
};
export declare type AssetReleasesArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<Release_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<Release_Filter>;
};
export declare type AssetPriceHistoryArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<AssetPrice_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<AssetPrice_Filter>;
};
export declare type AssetHourlyHistoryArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<HourlyAssetPriceCandle_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<HourlyAssetPriceCandle_Filter>;
};
export declare type AssetDailyHistoryArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<DailyAssetPriceCandle_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<DailyAssetPriceCandle_Filter>;
};
export declare type AssetMonthlyHistoryArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<MonthlyAssetPriceCandle_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<MonthlyAssetPriceCandle_Filter>;
};
export declare type AssetTrackingFundsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<Fund_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<Fund_Filter>;
};
export declare type AssetBlacklistedArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<AssetBlacklistSetting_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<AssetBlacklistSetting_Filter>;
};
export declare type AssetWhitelistedArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<AssetWhitelistSetting_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<AssetWhitelistSetting_Filter>;
};
export declare type AssetNetworkAssetHoldingHistoryArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<NetworkAssetHolding_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<NetworkAssetHolding_Filter>;
};
export declare type AssetAmount = {
    __typename?: 'AssetAmount';
    id: Scalars['ID'];
    asset: Asset;
    amount: Scalars['BigDecimal'];
    price?: Maybe<AssetPrice>;
};
export declare type AssetAmount_Filter = {
    id?: Maybe<Scalars['ID']>;
    id_not?: Maybe<Scalars['ID']>;
    id_gt?: Maybe<Scalars['ID']>;
    id_lt?: Maybe<Scalars['ID']>;
    id_gte?: Maybe<Scalars['ID']>;
    id_lte?: Maybe<Scalars['ID']>;
    id_in?: Maybe<Array<Scalars['ID']>>;
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    asset?: Maybe<Scalars['String']>;
    asset_not?: Maybe<Scalars['String']>;
    asset_gt?: Maybe<Scalars['String']>;
    asset_lt?: Maybe<Scalars['String']>;
    asset_gte?: Maybe<Scalars['String']>;
    asset_lte?: Maybe<Scalars['String']>;
    asset_in?: Maybe<Array<Scalars['String']>>;
    asset_not_in?: Maybe<Array<Scalars['String']>>;
    asset_contains?: Maybe<Scalars['String']>;
    asset_not_contains?: Maybe<Scalars['String']>;
    asset_starts_with?: Maybe<Scalars['String']>;
    asset_not_starts_with?: Maybe<Scalars['String']>;
    asset_ends_with?: Maybe<Scalars['String']>;
    asset_not_ends_with?: Maybe<Scalars['String']>;
    amount?: Maybe<Scalars['BigDecimal']>;
    amount_not?: Maybe<Scalars['BigDecimal']>;
    amount_gt?: Maybe<Scalars['BigDecimal']>;
    amount_lt?: Maybe<Scalars['BigDecimal']>;
    amount_gte?: Maybe<Scalars['BigDecimal']>;
    amount_lte?: Maybe<Scalars['BigDecimal']>;
    amount_in?: Maybe<Array<Scalars['BigDecimal']>>;
    amount_not_in?: Maybe<Array<Scalars['BigDecimal']>>;
    price?: Maybe<Scalars['String']>;
    price_not?: Maybe<Scalars['String']>;
    price_gt?: Maybe<Scalars['String']>;
    price_lt?: Maybe<Scalars['String']>;
    price_gte?: Maybe<Scalars['String']>;
    price_lte?: Maybe<Scalars['String']>;
    price_in?: Maybe<Array<Scalars['String']>>;
    price_not_in?: Maybe<Array<Scalars['String']>>;
    price_contains?: Maybe<Scalars['String']>;
    price_not_contains?: Maybe<Scalars['String']>;
    price_starts_with?: Maybe<Scalars['String']>;
    price_not_starts_with?: Maybe<Scalars['String']>;
    price_ends_with?: Maybe<Scalars['String']>;
    price_not_ends_with?: Maybe<Scalars['String']>;
};
export declare enum AssetAmount_OrderBy {
    Id = "id",
    Asset = "asset",
    Amount = "amount",
    Price = "price"
}
export declare type AssetBlacklistAddressesAddedEvent = EventInterface & FundEventInterface & {
    __typename?: 'AssetBlacklistAddressesAddedEvent';
    id: Scalars['ID'];
    fund: Fund;
    timestamp: Scalars['BigInt'];
    transaction: Transaction;
    comptrollerProxy: Scalars['String'];
    items: Array<Asset>;
};
export declare type AssetBlacklistAddressesAddedEventItemsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<Asset_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<Asset_Filter>;
};
export declare type AssetBlacklistAddressesAddedEvent_Filter = {
    id?: Maybe<Scalars['ID']>;
    id_not?: Maybe<Scalars['ID']>;
    id_gt?: Maybe<Scalars['ID']>;
    id_lt?: Maybe<Scalars['ID']>;
    id_gte?: Maybe<Scalars['ID']>;
    id_lte?: Maybe<Scalars['ID']>;
    id_in?: Maybe<Array<Scalars['ID']>>;
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    fund?: Maybe<Scalars['String']>;
    fund_not?: Maybe<Scalars['String']>;
    fund_gt?: Maybe<Scalars['String']>;
    fund_lt?: Maybe<Scalars['String']>;
    fund_gte?: Maybe<Scalars['String']>;
    fund_lte?: Maybe<Scalars['String']>;
    fund_in?: Maybe<Array<Scalars['String']>>;
    fund_not_in?: Maybe<Array<Scalars['String']>>;
    fund_contains?: Maybe<Scalars['String']>;
    fund_not_contains?: Maybe<Scalars['String']>;
    fund_starts_with?: Maybe<Scalars['String']>;
    fund_not_starts_with?: Maybe<Scalars['String']>;
    fund_ends_with?: Maybe<Scalars['String']>;
    fund_not_ends_with?: Maybe<Scalars['String']>;
    timestamp?: Maybe<Scalars['BigInt']>;
    timestamp_not?: Maybe<Scalars['BigInt']>;
    timestamp_gt?: Maybe<Scalars['BigInt']>;
    timestamp_lt?: Maybe<Scalars['BigInt']>;
    timestamp_gte?: Maybe<Scalars['BigInt']>;
    timestamp_lte?: Maybe<Scalars['BigInt']>;
    timestamp_in?: Maybe<Array<Scalars['BigInt']>>;
    timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;
    transaction?: Maybe<Scalars['String']>;
    transaction_not?: Maybe<Scalars['String']>;
    transaction_gt?: Maybe<Scalars['String']>;
    transaction_lt?: Maybe<Scalars['String']>;
    transaction_gte?: Maybe<Scalars['String']>;
    transaction_lte?: Maybe<Scalars['String']>;
    transaction_in?: Maybe<Array<Scalars['String']>>;
    transaction_not_in?: Maybe<Array<Scalars['String']>>;
    transaction_contains?: Maybe<Scalars['String']>;
    transaction_not_contains?: Maybe<Scalars['String']>;
    transaction_starts_with?: Maybe<Scalars['String']>;
    transaction_not_starts_with?: Maybe<Scalars['String']>;
    transaction_ends_with?: Maybe<Scalars['String']>;
    transaction_not_ends_with?: Maybe<Scalars['String']>;
    comptrollerProxy?: Maybe<Scalars['String']>;
    comptrollerProxy_not?: Maybe<Scalars['String']>;
    comptrollerProxy_gt?: Maybe<Scalars['String']>;
    comptrollerProxy_lt?: Maybe<Scalars['String']>;
    comptrollerProxy_gte?: Maybe<Scalars['String']>;
    comptrollerProxy_lte?: Maybe<Scalars['String']>;
    comptrollerProxy_in?: Maybe<Array<Scalars['String']>>;
    comptrollerProxy_not_in?: Maybe<Array<Scalars['String']>>;
    comptrollerProxy_contains?: Maybe<Scalars['String']>;
    comptrollerProxy_not_contains?: Maybe<Scalars['String']>;
    comptrollerProxy_starts_with?: Maybe<Scalars['String']>;
    comptrollerProxy_not_starts_with?: Maybe<Scalars['String']>;
    comptrollerProxy_ends_with?: Maybe<Scalars['String']>;
    comptrollerProxy_not_ends_with?: Maybe<Scalars['String']>;
    items?: Maybe<Array<Scalars['String']>>;
    items_not?: Maybe<Array<Scalars['String']>>;
    items_contains?: Maybe<Array<Scalars['String']>>;
    items_not_contains?: Maybe<Array<Scalars['String']>>;
};
export declare enum AssetBlacklistAddressesAddedEvent_OrderBy {
    Id = "id",
    Fund = "fund",
    Timestamp = "timestamp",
    Transaction = "transaction",
    ComptrollerProxy = "comptrollerProxy",
    Items = "items"
}
export declare type AssetBlacklistAddressesRemovedEvent = EventInterface & FundEventInterface & {
    __typename?: 'AssetBlacklistAddressesRemovedEvent';
    id: Scalars['ID'];
    fund: Fund;
    timestamp: Scalars['BigInt'];
    transaction: Transaction;
    comptrollerProxy: Scalars['String'];
    items: Array<Asset>;
};
export declare type AssetBlacklistAddressesRemovedEventItemsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<Asset_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<Asset_Filter>;
};
export declare type AssetBlacklistAddressesRemovedEvent_Filter = {
    id?: Maybe<Scalars['ID']>;
    id_not?: Maybe<Scalars['ID']>;
    id_gt?: Maybe<Scalars['ID']>;
    id_lt?: Maybe<Scalars['ID']>;
    id_gte?: Maybe<Scalars['ID']>;
    id_lte?: Maybe<Scalars['ID']>;
    id_in?: Maybe<Array<Scalars['ID']>>;
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    fund?: Maybe<Scalars['String']>;
    fund_not?: Maybe<Scalars['String']>;
    fund_gt?: Maybe<Scalars['String']>;
    fund_lt?: Maybe<Scalars['String']>;
    fund_gte?: Maybe<Scalars['String']>;
    fund_lte?: Maybe<Scalars['String']>;
    fund_in?: Maybe<Array<Scalars['String']>>;
    fund_not_in?: Maybe<Array<Scalars['String']>>;
    fund_contains?: Maybe<Scalars['String']>;
    fund_not_contains?: Maybe<Scalars['String']>;
    fund_starts_with?: Maybe<Scalars['String']>;
    fund_not_starts_with?: Maybe<Scalars['String']>;
    fund_ends_with?: Maybe<Scalars['String']>;
    fund_not_ends_with?: Maybe<Scalars['String']>;
    timestamp?: Maybe<Scalars['BigInt']>;
    timestamp_not?: Maybe<Scalars['BigInt']>;
    timestamp_gt?: Maybe<Scalars['BigInt']>;
    timestamp_lt?: Maybe<Scalars['BigInt']>;
    timestamp_gte?: Maybe<Scalars['BigInt']>;
    timestamp_lte?: Maybe<Scalars['BigInt']>;
    timestamp_in?: Maybe<Array<Scalars['BigInt']>>;
    timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;
    transaction?: Maybe<Scalars['String']>;
    transaction_not?: Maybe<Scalars['String']>;
    transaction_gt?: Maybe<Scalars['String']>;
    transaction_lt?: Maybe<Scalars['String']>;
    transaction_gte?: Maybe<Scalars['String']>;
    transaction_lte?: Maybe<Scalars['String']>;
    transaction_in?: Maybe<Array<Scalars['String']>>;
    transaction_not_in?: Maybe<Array<Scalars['String']>>;
    transaction_contains?: Maybe<Scalars['String']>;
    transaction_not_contains?: Maybe<Scalars['String']>;
    transaction_starts_with?: Maybe<Scalars['String']>;
    transaction_not_starts_with?: Maybe<Scalars['String']>;
    transaction_ends_with?: Maybe<Scalars['String']>;
    transaction_not_ends_with?: Maybe<Scalars['String']>;
    comptrollerProxy?: Maybe<Scalars['String']>;
    comptrollerProxy_not?: Maybe<Scalars['String']>;
    comptrollerProxy_gt?: Maybe<Scalars['String']>;
    comptrollerProxy_lt?: Maybe<Scalars['String']>;
    comptrollerProxy_gte?: Maybe<Scalars['String']>;
    comptrollerProxy_lte?: Maybe<Scalars['String']>;
    comptrollerProxy_in?: Maybe<Array<Scalars['String']>>;
    comptrollerProxy_not_in?: Maybe<Array<Scalars['String']>>;
    comptrollerProxy_contains?: Maybe<Scalars['String']>;
    comptrollerProxy_not_contains?: Maybe<Scalars['String']>;
    comptrollerProxy_starts_with?: Maybe<Scalars['String']>;
    comptrollerProxy_not_starts_with?: Maybe<Scalars['String']>;
    comptrollerProxy_ends_with?: Maybe<Scalars['String']>;
    comptrollerProxy_not_ends_with?: Maybe<Scalars['String']>;
    items?: Maybe<Array<Scalars['String']>>;
    items_not?: Maybe<Array<Scalars['String']>>;
    items_contains?: Maybe<Array<Scalars['String']>>;
    items_not_contains?: Maybe<Array<Scalars['String']>>;
};
export declare enum AssetBlacklistAddressesRemovedEvent_OrderBy {
    Id = "id",
    Fund = "fund",
    Timestamp = "timestamp",
    Transaction = "transaction",
    ComptrollerProxy = "comptrollerProxy",
    Items = "items"
}
export declare type AssetBlacklistSetting = PolicySettingInterface & {
    __typename?: 'AssetBlacklistSetting';
    id: Scalars['ID'];
    policy: Policy;
    comptroller: ComptrollerProxy;
    listed: Array<Scalars['String']>;
    assets: Array<Maybe<Asset>>;
    timestamp: Scalars['BigInt'];
    enabled: Scalars['Boolean'];
    events: Array<FundEventInterface>;
};
export declare type AssetBlacklistSettingAssetsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<Asset_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<Asset_Filter>;
};
export declare type AssetBlacklistSettingEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<FundEventInterface_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<FundEventInterface_Filter>;
};
export declare type AssetBlacklistSetting_Filter = {
    id?: Maybe<Scalars['ID']>;
    id_not?: Maybe<Scalars['ID']>;
    id_gt?: Maybe<Scalars['ID']>;
    id_lt?: Maybe<Scalars['ID']>;
    id_gte?: Maybe<Scalars['ID']>;
    id_lte?: Maybe<Scalars['ID']>;
    id_in?: Maybe<Array<Scalars['ID']>>;
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    policy?: Maybe<Scalars['String']>;
    policy_not?: Maybe<Scalars['String']>;
    policy_gt?: Maybe<Scalars['String']>;
    policy_lt?: Maybe<Scalars['String']>;
    policy_gte?: Maybe<Scalars['String']>;
    policy_lte?: Maybe<Scalars['String']>;
    policy_in?: Maybe<Array<Scalars['String']>>;
    policy_not_in?: Maybe<Array<Scalars['String']>>;
    policy_contains?: Maybe<Scalars['String']>;
    policy_not_contains?: Maybe<Scalars['String']>;
    policy_starts_with?: Maybe<Scalars['String']>;
    policy_not_starts_with?: Maybe<Scalars['String']>;
    policy_ends_with?: Maybe<Scalars['String']>;
    policy_not_ends_with?: Maybe<Scalars['String']>;
    comptroller?: Maybe<Scalars['String']>;
    comptroller_not?: Maybe<Scalars['String']>;
    comptroller_gt?: Maybe<Scalars['String']>;
    comptroller_lt?: Maybe<Scalars['String']>;
    comptroller_gte?: Maybe<Scalars['String']>;
    comptroller_lte?: Maybe<Scalars['String']>;
    comptroller_in?: Maybe<Array<Scalars['String']>>;
    comptroller_not_in?: Maybe<Array<Scalars['String']>>;
    comptroller_contains?: Maybe<Scalars['String']>;
    comptroller_not_contains?: Maybe<Scalars['String']>;
    comptroller_starts_with?: Maybe<Scalars['String']>;
    comptroller_not_starts_with?: Maybe<Scalars['String']>;
    comptroller_ends_with?: Maybe<Scalars['String']>;
    comptroller_not_ends_with?: Maybe<Scalars['String']>;
    listed?: Maybe<Array<Scalars['String']>>;
    listed_not?: Maybe<Array<Scalars['String']>>;
    listed_contains?: Maybe<Array<Scalars['String']>>;
    listed_not_contains?: Maybe<Array<Scalars['String']>>;
    assets?: Maybe<Array<Scalars['String']>>;
    assets_not?: Maybe<Array<Scalars['String']>>;
    assets_contains?: Maybe<Array<Scalars['String']>>;
    assets_not_contains?: Maybe<Array<Scalars['String']>>;
    timestamp?: Maybe<Scalars['BigInt']>;
    timestamp_not?: Maybe<Scalars['BigInt']>;
    timestamp_gt?: Maybe<Scalars['BigInt']>;
    timestamp_lt?: Maybe<Scalars['BigInt']>;
    timestamp_gte?: Maybe<Scalars['BigInt']>;
    timestamp_lte?: Maybe<Scalars['BigInt']>;
    timestamp_in?: Maybe<Array<Scalars['BigInt']>>;
    timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;
    enabled?: Maybe<Scalars['Boolean']>;
    enabled_not?: Maybe<Scalars['Boolean']>;
    enabled_in?: Maybe<Array<Scalars['Boolean']>>;
    enabled_not_in?: Maybe<Array<Scalars['Boolean']>>;
    events?: Maybe<Array<Scalars['String']>>;
    events_not?: Maybe<Array<Scalars['String']>>;
    events_contains?: Maybe<Array<Scalars['String']>>;
    events_not_contains?: Maybe<Array<Scalars['String']>>;
};
export declare enum AssetBlacklistSetting_OrderBy {
    Id = "id",
    Policy = "policy",
    Comptroller = "comptroller",
    Listed = "listed",
    Assets = "assets",
    Timestamp = "timestamp",
    Enabled = "enabled",
    Events = "events"
}
export declare type AssetPrice = {
    __typename?: 'AssetPrice';
    id: Scalars['ID'];
    asset: Asset;
    price: Scalars['BigDecimal'];
    timestamp: Scalars['BigInt'];
};
export declare type AssetPrice_Filter = {
    id?: Maybe<Scalars['ID']>;
    id_not?: Maybe<Scalars['ID']>;
    id_gt?: Maybe<Scalars['ID']>;
    id_lt?: Maybe<Scalars['ID']>;
    id_gte?: Maybe<Scalars['ID']>;
    id_lte?: Maybe<Scalars['ID']>;
    id_in?: Maybe<Array<Scalars['ID']>>;
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    asset?: Maybe<Scalars['String']>;
    asset_not?: Maybe<Scalars['String']>;
    asset_gt?: Maybe<Scalars['String']>;
    asset_lt?: Maybe<Scalars['String']>;
    asset_gte?: Maybe<Scalars['String']>;
    asset_lte?: Maybe<Scalars['String']>;
    asset_in?: Maybe<Array<Scalars['String']>>;
    asset_not_in?: Maybe<Array<Scalars['String']>>;
    asset_contains?: Maybe<Scalars['String']>;
    asset_not_contains?: Maybe<Scalars['String']>;
    asset_starts_with?: Maybe<Scalars['String']>;
    asset_not_starts_with?: Maybe<Scalars['String']>;
    asset_ends_with?: Maybe<Scalars['String']>;
    asset_not_ends_with?: Maybe<Scalars['String']>;
    price?: Maybe<Scalars['BigDecimal']>;
    price_not?: Maybe<Scalars['BigDecimal']>;
    price_gt?: Maybe<Scalars['BigDecimal']>;
    price_lt?: Maybe<Scalars['BigDecimal']>;
    price_gte?: Maybe<Scalars['BigDecimal']>;
    price_lte?: Maybe<Scalars['BigDecimal']>;
    price_in?: Maybe<Array<Scalars['BigDecimal']>>;
    price_not_in?: Maybe<Array<Scalars['BigDecimal']>>;
    timestamp?: Maybe<Scalars['BigInt']>;
    timestamp_not?: Maybe<Scalars['BigInt']>;
    timestamp_gt?: Maybe<Scalars['BigInt']>;
    timestamp_lt?: Maybe<Scalars['BigInt']>;
    timestamp_gte?: Maybe<Scalars['BigInt']>;
    timestamp_lte?: Maybe<Scalars['BigInt']>;
    timestamp_in?: Maybe<Array<Scalars['BigInt']>>;
    timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;
};
export declare enum AssetPrice_OrderBy {
    Id = "id",
    Asset = "asset",
    Price = "price",
    Timestamp = "timestamp"
}
export declare enum AssetType {
    Unknown = "UNKNOWN",
    Derivative = "DERIVATIVE",
    Eth = "ETH",
    Usd = "USD"
}
export declare type AssetWhitelistAddressesAddedEvent = EventInterface & FundEventInterface & {
    __typename?: 'AssetWhitelistAddressesAddedEvent';
    id: Scalars['ID'];
    fund: Fund;
    timestamp: Scalars['BigInt'];
    transaction: Transaction;
    comptrollerProxy: Scalars['String'];
    items: Array<Asset>;
};
export declare type AssetWhitelistAddressesAddedEventItemsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<Asset_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<Asset_Filter>;
};
export declare type AssetWhitelistAddressesAddedEvent_Filter = {
    id?: Maybe<Scalars['ID']>;
    id_not?: Maybe<Scalars['ID']>;
    id_gt?: Maybe<Scalars['ID']>;
    id_lt?: Maybe<Scalars['ID']>;
    id_gte?: Maybe<Scalars['ID']>;
    id_lte?: Maybe<Scalars['ID']>;
    id_in?: Maybe<Array<Scalars['ID']>>;
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    fund?: Maybe<Scalars['String']>;
    fund_not?: Maybe<Scalars['String']>;
    fund_gt?: Maybe<Scalars['String']>;
    fund_lt?: Maybe<Scalars['String']>;
    fund_gte?: Maybe<Scalars['String']>;
    fund_lte?: Maybe<Scalars['String']>;
    fund_in?: Maybe<Array<Scalars['String']>>;
    fund_not_in?: Maybe<Array<Scalars['String']>>;
    fund_contains?: Maybe<Scalars['String']>;
    fund_not_contains?: Maybe<Scalars['String']>;
    fund_starts_with?: Maybe<Scalars['String']>;
    fund_not_starts_with?: Maybe<Scalars['String']>;
    fund_ends_with?: Maybe<Scalars['String']>;
    fund_not_ends_with?: Maybe<Scalars['String']>;
    timestamp?: Maybe<Scalars['BigInt']>;
    timestamp_not?: Maybe<Scalars['BigInt']>;
    timestamp_gt?: Maybe<Scalars['BigInt']>;
    timestamp_lt?: Maybe<Scalars['BigInt']>;
    timestamp_gte?: Maybe<Scalars['BigInt']>;
    timestamp_lte?: Maybe<Scalars['BigInt']>;
    timestamp_in?: Maybe<Array<Scalars['BigInt']>>;
    timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;
    transaction?: Maybe<Scalars['String']>;
    transaction_not?: Maybe<Scalars['String']>;
    transaction_gt?: Maybe<Scalars['String']>;
    transaction_lt?: Maybe<Scalars['String']>;
    transaction_gte?: Maybe<Scalars['String']>;
    transaction_lte?: Maybe<Scalars['String']>;
    transaction_in?: Maybe<Array<Scalars['String']>>;
    transaction_not_in?: Maybe<Array<Scalars['String']>>;
    transaction_contains?: Maybe<Scalars['String']>;
    transaction_not_contains?: Maybe<Scalars['String']>;
    transaction_starts_with?: Maybe<Scalars['String']>;
    transaction_not_starts_with?: Maybe<Scalars['String']>;
    transaction_ends_with?: Maybe<Scalars['String']>;
    transaction_not_ends_with?: Maybe<Scalars['String']>;
    comptrollerProxy?: Maybe<Scalars['String']>;
    comptrollerProxy_not?: Maybe<Scalars['String']>;
    comptrollerProxy_gt?: Maybe<Scalars['String']>;
    comptrollerProxy_lt?: Maybe<Scalars['String']>;
    comptrollerProxy_gte?: Maybe<Scalars['String']>;
    comptrollerProxy_lte?: Maybe<Scalars['String']>;
    comptrollerProxy_in?: Maybe<Array<Scalars['String']>>;
    comptrollerProxy_not_in?: Maybe<Array<Scalars['String']>>;
    comptrollerProxy_contains?: Maybe<Scalars['String']>;
    comptrollerProxy_not_contains?: Maybe<Scalars['String']>;
    comptrollerProxy_starts_with?: Maybe<Scalars['String']>;
    comptrollerProxy_not_starts_with?: Maybe<Scalars['String']>;
    comptrollerProxy_ends_with?: Maybe<Scalars['String']>;
    comptrollerProxy_not_ends_with?: Maybe<Scalars['String']>;
    items?: Maybe<Array<Scalars['String']>>;
    items_not?: Maybe<Array<Scalars['String']>>;
    items_contains?: Maybe<Array<Scalars['String']>>;
    items_not_contains?: Maybe<Array<Scalars['String']>>;
};
export declare enum AssetWhitelistAddressesAddedEvent_OrderBy {
    Id = "id",
    Fund = "fund",
    Timestamp = "timestamp",
    Transaction = "transaction",
    ComptrollerProxy = "comptrollerProxy",
    Items = "items"
}
export declare type AssetWhitelistAddressesRemovedEvent = EventInterface & FundEventInterface & {
    __typename?: 'AssetWhitelistAddressesRemovedEvent';
    id: Scalars['ID'];
    fund: Fund;
    timestamp: Scalars['BigInt'];
    transaction: Transaction;
    comptrollerProxy: Scalars['String'];
    items: Array<Asset>;
};
export declare type AssetWhitelistAddressesRemovedEventItemsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<Asset_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<Asset_Filter>;
};
export declare type AssetWhitelistAddressesRemovedEvent_Filter = {
    id?: Maybe<Scalars['ID']>;
    id_not?: Maybe<Scalars['ID']>;
    id_gt?: Maybe<Scalars['ID']>;
    id_lt?: Maybe<Scalars['ID']>;
    id_gte?: Maybe<Scalars['ID']>;
    id_lte?: Maybe<Scalars['ID']>;
    id_in?: Maybe<Array<Scalars['ID']>>;
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    fund?: Maybe<Scalars['String']>;
    fund_not?: Maybe<Scalars['String']>;
    fund_gt?: Maybe<Scalars['String']>;
    fund_lt?: Maybe<Scalars['String']>;
    fund_gte?: Maybe<Scalars['String']>;
    fund_lte?: Maybe<Scalars['String']>;
    fund_in?: Maybe<Array<Scalars['String']>>;
    fund_not_in?: Maybe<Array<Scalars['String']>>;
    fund_contains?: Maybe<Scalars['String']>;
    fund_not_contains?: Maybe<Scalars['String']>;
    fund_starts_with?: Maybe<Scalars['String']>;
    fund_not_starts_with?: Maybe<Scalars['String']>;
    fund_ends_with?: Maybe<Scalars['String']>;
    fund_not_ends_with?: Maybe<Scalars['String']>;
    timestamp?: Maybe<Scalars['BigInt']>;
    timestamp_not?: Maybe<Scalars['BigInt']>;
    timestamp_gt?: Maybe<Scalars['BigInt']>;
    timestamp_lt?: Maybe<Scalars['BigInt']>;
    timestamp_gte?: Maybe<Scalars['BigInt']>;
    timestamp_lte?: Maybe<Scalars['BigInt']>;
    timestamp_in?: Maybe<Array<Scalars['BigInt']>>;
    timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;
    transaction?: Maybe<Scalars['String']>;
    transaction_not?: Maybe<Scalars['String']>;
    transaction_gt?: Maybe<Scalars['String']>;
    transaction_lt?: Maybe<Scalars['String']>;
    transaction_gte?: Maybe<Scalars['String']>;
    transaction_lte?: Maybe<Scalars['String']>;
    transaction_in?: Maybe<Array<Scalars['String']>>;
    transaction_not_in?: Maybe<Array<Scalars['String']>>;
    transaction_contains?: Maybe<Scalars['String']>;
    transaction_not_contains?: Maybe<Scalars['String']>;
    transaction_starts_with?: Maybe<Scalars['String']>;
    transaction_not_starts_with?: Maybe<Scalars['String']>;
    transaction_ends_with?: Maybe<Scalars['String']>;
    transaction_not_ends_with?: Maybe<Scalars['String']>;
    comptrollerProxy?: Maybe<Scalars['String']>;
    comptrollerProxy_not?: Maybe<Scalars['String']>;
    comptrollerProxy_gt?: Maybe<Scalars['String']>;
    comptrollerProxy_lt?: Maybe<Scalars['String']>;
    comptrollerProxy_gte?: Maybe<Scalars['String']>;
    comptrollerProxy_lte?: Maybe<Scalars['String']>;
    comptrollerProxy_in?: Maybe<Array<Scalars['String']>>;
    comptrollerProxy_not_in?: Maybe<Array<Scalars['String']>>;
    comptrollerProxy_contains?: Maybe<Scalars['String']>;
    comptrollerProxy_not_contains?: Maybe<Scalars['String']>;
    comptrollerProxy_starts_with?: Maybe<Scalars['String']>;
    comptrollerProxy_not_starts_with?: Maybe<Scalars['String']>;
    comptrollerProxy_ends_with?: Maybe<Scalars['String']>;
    comptrollerProxy_not_ends_with?: Maybe<Scalars['String']>;
    items?: Maybe<Array<Scalars['String']>>;
    items_not?: Maybe<Array<Scalars['String']>>;
    items_contains?: Maybe<Array<Scalars['String']>>;
    items_not_contains?: Maybe<Array<Scalars['String']>>;
};
export declare enum AssetWhitelistAddressesRemovedEvent_OrderBy {
    Id = "id",
    Fund = "fund",
    Timestamp = "timestamp",
    Transaction = "transaction",
    ComptrollerProxy = "comptrollerProxy",
    Items = "items"
}
export declare type AssetWhitelistSetting = PolicySettingInterface & {
    __typename?: 'AssetWhitelistSetting';
    id: Scalars['ID'];
    policy: Policy;
    comptroller: ComptrollerProxy;
    listed: Array<Scalars['String']>;
    assets: Array<Maybe<Asset>>;
    timestamp: Scalars['BigInt'];
    enabled: Scalars['Boolean'];
    events: Array<FundEventInterface>;
};
export declare type AssetWhitelistSettingAssetsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<Asset_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<Asset_Filter>;
};
export declare type AssetWhitelistSettingEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<FundEventInterface_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<FundEventInterface_Filter>;
};
export declare type AssetWhitelistSetting_Filter = {
    id?: Maybe<Scalars['ID']>;
    id_not?: Maybe<Scalars['ID']>;
    id_gt?: Maybe<Scalars['ID']>;
    id_lt?: Maybe<Scalars['ID']>;
    id_gte?: Maybe<Scalars['ID']>;
    id_lte?: Maybe<Scalars['ID']>;
    id_in?: Maybe<Array<Scalars['ID']>>;
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    policy?: Maybe<Scalars['String']>;
    policy_not?: Maybe<Scalars['String']>;
    policy_gt?: Maybe<Scalars['String']>;
    policy_lt?: Maybe<Scalars['String']>;
    policy_gte?: Maybe<Scalars['String']>;
    policy_lte?: Maybe<Scalars['String']>;
    policy_in?: Maybe<Array<Scalars['String']>>;
    policy_not_in?: Maybe<Array<Scalars['String']>>;
    policy_contains?: Maybe<Scalars['String']>;
    policy_not_contains?: Maybe<Scalars['String']>;
    policy_starts_with?: Maybe<Scalars['String']>;
    policy_not_starts_with?: Maybe<Scalars['String']>;
    policy_ends_with?: Maybe<Scalars['String']>;
    policy_not_ends_with?: Maybe<Scalars['String']>;
    comptroller?: Maybe<Scalars['String']>;
    comptroller_not?: Maybe<Scalars['String']>;
    comptroller_gt?: Maybe<Scalars['String']>;
    comptroller_lt?: Maybe<Scalars['String']>;
    comptroller_gte?: Maybe<Scalars['String']>;
    comptroller_lte?: Maybe<Scalars['String']>;
    comptroller_in?: Maybe<Array<Scalars['String']>>;
    comptroller_not_in?: Maybe<Array<Scalars['String']>>;
    comptroller_contains?: Maybe<Scalars['String']>;
    comptroller_not_contains?: Maybe<Scalars['String']>;
    comptroller_starts_with?: Maybe<Scalars['String']>;
    comptroller_not_starts_with?: Maybe<Scalars['String']>;
    comptroller_ends_with?: Maybe<Scalars['String']>;
    comptroller_not_ends_with?: Maybe<Scalars['String']>;
    listed?: Maybe<Array<Scalars['String']>>;
    listed_not?: Maybe<Array<Scalars['String']>>;
    listed_contains?: Maybe<Array<Scalars['String']>>;
    listed_not_contains?: Maybe<Array<Scalars['String']>>;
    assets?: Maybe<Array<Scalars['String']>>;
    assets_not?: Maybe<Array<Scalars['String']>>;
    assets_contains?: Maybe<Array<Scalars['String']>>;
    assets_not_contains?: Maybe<Array<Scalars['String']>>;
    timestamp?: Maybe<Scalars['BigInt']>;
    timestamp_not?: Maybe<Scalars['BigInt']>;
    timestamp_gt?: Maybe<Scalars['BigInt']>;
    timestamp_lt?: Maybe<Scalars['BigInt']>;
    timestamp_gte?: Maybe<Scalars['BigInt']>;
    timestamp_lte?: Maybe<Scalars['BigInt']>;
    timestamp_in?: Maybe<Array<Scalars['BigInt']>>;
    timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;
    enabled?: Maybe<Scalars['Boolean']>;
    enabled_not?: Maybe<Scalars['Boolean']>;
    enabled_in?: Maybe<Array<Scalars['Boolean']>>;
    enabled_not_in?: Maybe<Array<Scalars['Boolean']>>;
    events?: Maybe<Array<Scalars['String']>>;
    events_not?: Maybe<Array<Scalars['String']>>;
    events_contains?: Maybe<Array<Scalars['String']>>;
    events_not_contains?: Maybe<Array<Scalars['String']>>;
};
export declare enum AssetWhitelistSetting_OrderBy {
    Id = "id",
    Policy = "policy",
    Comptroller = "comptroller",
    Listed = "listed",
    Assets = "assets",
    Timestamp = "timestamp",
    Enabled = "enabled",
    Events = "events"
}
export declare type AssetWithdrawnEvent = EventInterface & FundEventInterface & {
    __typename?: 'AssetWithdrawnEvent';
    id: Scalars['ID'];
    asset: Asset;
    fund: Fund;
    timestamp: Scalars['BigInt'];
    transaction: Transaction;
    target: Scalars['String'];
    amount: Scalars['BigDecimal'];
};
export declare type AssetWithdrawnEvent_Filter = {
    id?: Maybe<Scalars['ID']>;
    id_not?: Maybe<Scalars['ID']>;
    id_gt?: Maybe<Scalars['ID']>;
    id_lt?: Maybe<Scalars['ID']>;
    id_gte?: Maybe<Scalars['ID']>;
    id_lte?: Maybe<Scalars['ID']>;
    id_in?: Maybe<Array<Scalars['ID']>>;
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    asset?: Maybe<Scalars['String']>;
    asset_not?: Maybe<Scalars['String']>;
    asset_gt?: Maybe<Scalars['String']>;
    asset_lt?: Maybe<Scalars['String']>;
    asset_gte?: Maybe<Scalars['String']>;
    asset_lte?: Maybe<Scalars['String']>;
    asset_in?: Maybe<Array<Scalars['String']>>;
    asset_not_in?: Maybe<Array<Scalars['String']>>;
    asset_contains?: Maybe<Scalars['String']>;
    asset_not_contains?: Maybe<Scalars['String']>;
    asset_starts_with?: Maybe<Scalars['String']>;
    asset_not_starts_with?: Maybe<Scalars['String']>;
    asset_ends_with?: Maybe<Scalars['String']>;
    asset_not_ends_with?: Maybe<Scalars['String']>;
    fund?: Maybe<Scalars['String']>;
    fund_not?: Maybe<Scalars['String']>;
    fund_gt?: Maybe<Scalars['String']>;
    fund_lt?: Maybe<Scalars['String']>;
    fund_gte?: Maybe<Scalars['String']>;
    fund_lte?: Maybe<Scalars['String']>;
    fund_in?: Maybe<Array<Scalars['String']>>;
    fund_not_in?: Maybe<Array<Scalars['String']>>;
    fund_contains?: Maybe<Scalars['String']>;
    fund_not_contains?: Maybe<Scalars['String']>;
    fund_starts_with?: Maybe<Scalars['String']>;
    fund_not_starts_with?: Maybe<Scalars['String']>;
    fund_ends_with?: Maybe<Scalars['String']>;
    fund_not_ends_with?: Maybe<Scalars['String']>;
    timestamp?: Maybe<Scalars['BigInt']>;
    timestamp_not?: Maybe<Scalars['BigInt']>;
    timestamp_gt?: Maybe<Scalars['BigInt']>;
    timestamp_lt?: Maybe<Scalars['BigInt']>;
    timestamp_gte?: Maybe<Scalars['BigInt']>;
    timestamp_lte?: Maybe<Scalars['BigInt']>;
    timestamp_in?: Maybe<Array<Scalars['BigInt']>>;
    timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;
    transaction?: Maybe<Scalars['String']>;
    transaction_not?: Maybe<Scalars['String']>;
    transaction_gt?: Maybe<Scalars['String']>;
    transaction_lt?: Maybe<Scalars['String']>;
    transaction_gte?: Maybe<Scalars['String']>;
    transaction_lte?: Maybe<Scalars['String']>;
    transaction_in?: Maybe<Array<Scalars['String']>>;
    transaction_not_in?: Maybe<Array<Scalars['String']>>;
    transaction_contains?: Maybe<Scalars['String']>;
    transaction_not_contains?: Maybe<Scalars['String']>;
    transaction_starts_with?: Maybe<Scalars['String']>;
    transaction_not_starts_with?: Maybe<Scalars['String']>;
    transaction_ends_with?: Maybe<Scalars['String']>;
    transaction_not_ends_with?: Maybe<Scalars['String']>;
    target?: Maybe<Scalars['String']>;
    target_not?: Maybe<Scalars['String']>;
    target_gt?: Maybe<Scalars['String']>;
    target_lt?: Maybe<Scalars['String']>;
    target_gte?: Maybe<Scalars['String']>;
    target_lte?: Maybe<Scalars['String']>;
    target_in?: Maybe<Array<Scalars['String']>>;
    target_not_in?: Maybe<Array<Scalars['String']>>;
    target_contains?: Maybe<Scalars['String']>;
    target_not_contains?: Maybe<Scalars['String']>;
    target_starts_with?: Maybe<Scalars['String']>;
    target_not_starts_with?: Maybe<Scalars['String']>;
    target_ends_with?: Maybe<Scalars['String']>;
    target_not_ends_with?: Maybe<Scalars['String']>;
    amount?: Maybe<Scalars['BigDecimal']>;
    amount_not?: Maybe<Scalars['BigDecimal']>;
    amount_gt?: Maybe<Scalars['BigDecimal']>;
    amount_lt?: Maybe<Scalars['BigDecimal']>;
    amount_gte?: Maybe<Scalars['BigDecimal']>;
    amount_lte?: Maybe<Scalars['BigDecimal']>;
    amount_in?: Maybe<Array<Scalars['BigDecimal']>>;
    amount_not_in?: Maybe<Array<Scalars['BigDecimal']>>;
};
export declare enum AssetWithdrawnEvent_OrderBy {
    Id = "id",
    Asset = "asset",
    Fund = "fund",
    Timestamp = "timestamp",
    Transaction = "transaction",
    Target = "target",
    Amount = "amount"
}
export declare type Asset_Filter = {
    id?: Maybe<Scalars['ID']>;
    id_not?: Maybe<Scalars['ID']>;
    id_gt?: Maybe<Scalars['ID']>;
    id_lt?: Maybe<Scalars['ID']>;
    id_gte?: Maybe<Scalars['ID']>;
    id_lte?: Maybe<Scalars['ID']>;
    id_in?: Maybe<Array<Scalars['ID']>>;
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    name?: Maybe<Scalars['String']>;
    name_not?: Maybe<Scalars['String']>;
    name_gt?: Maybe<Scalars['String']>;
    name_lt?: Maybe<Scalars['String']>;
    name_gte?: Maybe<Scalars['String']>;
    name_lte?: Maybe<Scalars['String']>;
    name_in?: Maybe<Array<Scalars['String']>>;
    name_not_in?: Maybe<Array<Scalars['String']>>;
    name_contains?: Maybe<Scalars['String']>;
    name_not_contains?: Maybe<Scalars['String']>;
    name_starts_with?: Maybe<Scalars['String']>;
    name_not_starts_with?: Maybe<Scalars['String']>;
    name_ends_with?: Maybe<Scalars['String']>;
    name_not_ends_with?: Maybe<Scalars['String']>;
    symbol?: Maybe<Scalars['String']>;
    symbol_not?: Maybe<Scalars['String']>;
    symbol_gt?: Maybe<Scalars['String']>;
    symbol_lt?: Maybe<Scalars['String']>;
    symbol_gte?: Maybe<Scalars['String']>;
    symbol_lte?: Maybe<Scalars['String']>;
    symbol_in?: Maybe<Array<Scalars['String']>>;
    symbol_not_in?: Maybe<Array<Scalars['String']>>;
    symbol_contains?: Maybe<Scalars['String']>;
    symbol_not_contains?: Maybe<Scalars['String']>;
    symbol_starts_with?: Maybe<Scalars['String']>;
    symbol_not_starts_with?: Maybe<Scalars['String']>;
    symbol_ends_with?: Maybe<Scalars['String']>;
    symbol_not_ends_with?: Maybe<Scalars['String']>;
    decimals?: Maybe<Scalars['Int']>;
    decimals_not?: Maybe<Scalars['Int']>;
    decimals_gt?: Maybe<Scalars['Int']>;
    decimals_lt?: Maybe<Scalars['Int']>;
    decimals_gte?: Maybe<Scalars['Int']>;
    decimals_lte?: Maybe<Scalars['Int']>;
    decimals_in?: Maybe<Array<Scalars['Int']>>;
    decimals_not_in?: Maybe<Array<Scalars['Int']>>;
    type?: Maybe<AssetType>;
    type_not?: Maybe<AssetType>;
    releases?: Maybe<Array<Scalars['String']>>;
    releases_not?: Maybe<Array<Scalars['String']>>;
    releases_contains?: Maybe<Array<Scalars['String']>>;
    releases_not_contains?: Maybe<Array<Scalars['String']>>;
    derivativeType?: Maybe<DerivativeType>;
    derivativeType_not?: Maybe<DerivativeType>;
    underlyingAsset?: Maybe<Scalars['String']>;
    underlyingAsset_not?: Maybe<Scalars['String']>;
    underlyingAsset_gt?: Maybe<Scalars['String']>;
    underlyingAsset_lt?: Maybe<Scalars['String']>;
    underlyingAsset_gte?: Maybe<Scalars['String']>;
    underlyingAsset_lte?: Maybe<Scalars['String']>;
    underlyingAsset_in?: Maybe<Array<Scalars['String']>>;
    underlyingAsset_not_in?: Maybe<Array<Scalars['String']>>;
    underlyingAsset_contains?: Maybe<Scalars['String']>;
    underlyingAsset_not_contains?: Maybe<Scalars['String']>;
    underlyingAsset_starts_with?: Maybe<Scalars['String']>;
    underlyingAsset_not_starts_with?: Maybe<Scalars['String']>;
    underlyingAsset_ends_with?: Maybe<Scalars['String']>;
    underlyingAsset_not_ends_with?: Maybe<Scalars['String']>;
    curvePoolAssetDetails?: Maybe<Scalars['String']>;
    curvePoolAssetDetails_not?: Maybe<Scalars['String']>;
    curvePoolAssetDetails_gt?: Maybe<Scalars['String']>;
    curvePoolAssetDetails_lt?: Maybe<Scalars['String']>;
    curvePoolAssetDetails_gte?: Maybe<Scalars['String']>;
    curvePoolAssetDetails_lte?: Maybe<Scalars['String']>;
    curvePoolAssetDetails_in?: Maybe<Array<Scalars['String']>>;
    curvePoolAssetDetails_not_in?: Maybe<Array<Scalars['String']>>;
    curvePoolAssetDetails_contains?: Maybe<Scalars['String']>;
    curvePoolAssetDetails_not_contains?: Maybe<Scalars['String']>;
    curvePoolAssetDetails_starts_with?: Maybe<Scalars['String']>;
    curvePoolAssetDetails_not_starts_with?: Maybe<Scalars['String']>;
    curvePoolAssetDetails_ends_with?: Maybe<Scalars['String']>;
    curvePoolAssetDetails_not_ends_with?: Maybe<Scalars['String']>;
    uniswapV2PoolAssetDetails?: Maybe<Scalars['String']>;
    uniswapV2PoolAssetDetails_not?: Maybe<Scalars['String']>;
    uniswapV2PoolAssetDetails_gt?: Maybe<Scalars['String']>;
    uniswapV2PoolAssetDetails_lt?: Maybe<Scalars['String']>;
    uniswapV2PoolAssetDetails_gte?: Maybe<Scalars['String']>;
    uniswapV2PoolAssetDetails_lte?: Maybe<Scalars['String']>;
    uniswapV2PoolAssetDetails_in?: Maybe<Array<Scalars['String']>>;
    uniswapV2PoolAssetDetails_not_in?: Maybe<Array<Scalars['String']>>;
    uniswapV2PoolAssetDetails_contains?: Maybe<Scalars['String']>;
    uniswapV2PoolAssetDetails_not_contains?: Maybe<Scalars['String']>;
    uniswapV2PoolAssetDetails_starts_with?: Maybe<Scalars['String']>;
    uniswapV2PoolAssetDetails_not_starts_with?: Maybe<Scalars['String']>;
    uniswapV2PoolAssetDetails_ends_with?: Maybe<Scalars['String']>;
    uniswapV2PoolAssetDetails_not_ends_with?: Maybe<Scalars['String']>;
    price?: Maybe<Scalars['String']>;
    price_not?: Maybe<Scalars['String']>;
    price_gt?: Maybe<Scalars['String']>;
    price_lt?: Maybe<Scalars['String']>;
    price_gte?: Maybe<Scalars['String']>;
    price_lte?: Maybe<Scalars['String']>;
    price_in?: Maybe<Array<Scalars['String']>>;
    price_not_in?: Maybe<Array<Scalars['String']>>;
    price_contains?: Maybe<Scalars['String']>;
    price_not_contains?: Maybe<Scalars['String']>;
    price_starts_with?: Maybe<Scalars['String']>;
    price_not_starts_with?: Maybe<Scalars['String']>;
    price_ends_with?: Maybe<Scalars['String']>;
    price_not_ends_with?: Maybe<Scalars['String']>;
    hourly?: Maybe<Scalars['String']>;
    hourly_not?: Maybe<Scalars['String']>;
    hourly_gt?: Maybe<Scalars['String']>;
    hourly_lt?: Maybe<Scalars['String']>;
    hourly_gte?: Maybe<Scalars['String']>;
    hourly_lte?: Maybe<Scalars['String']>;
    hourly_in?: Maybe<Array<Scalars['String']>>;
    hourly_not_in?: Maybe<Array<Scalars['String']>>;
    hourly_contains?: Maybe<Scalars['String']>;
    hourly_not_contains?: Maybe<Scalars['String']>;
    hourly_starts_with?: Maybe<Scalars['String']>;
    hourly_not_starts_with?: Maybe<Scalars['String']>;
    hourly_ends_with?: Maybe<Scalars['String']>;
    hourly_not_ends_with?: Maybe<Scalars['String']>;
    daily?: Maybe<Scalars['String']>;
    daily_not?: Maybe<Scalars['String']>;
    daily_gt?: Maybe<Scalars['String']>;
    daily_lt?: Maybe<Scalars['String']>;
    daily_gte?: Maybe<Scalars['String']>;
    daily_lte?: Maybe<Scalars['String']>;
    daily_in?: Maybe<Array<Scalars['String']>>;
    daily_not_in?: Maybe<Array<Scalars['String']>>;
    daily_contains?: Maybe<Scalars['String']>;
    daily_not_contains?: Maybe<Scalars['String']>;
    daily_starts_with?: Maybe<Scalars['String']>;
    daily_not_starts_with?: Maybe<Scalars['String']>;
    daily_ends_with?: Maybe<Scalars['String']>;
    daily_not_ends_with?: Maybe<Scalars['String']>;
    monthly?: Maybe<Scalars['String']>;
    monthly_not?: Maybe<Scalars['String']>;
    monthly_gt?: Maybe<Scalars['String']>;
    monthly_lt?: Maybe<Scalars['String']>;
    monthly_gte?: Maybe<Scalars['String']>;
    monthly_lte?: Maybe<Scalars['String']>;
    monthly_in?: Maybe<Array<Scalars['String']>>;
    monthly_not_in?: Maybe<Array<Scalars['String']>>;
    monthly_contains?: Maybe<Scalars['String']>;
    monthly_not_contains?: Maybe<Scalars['String']>;
    monthly_starts_with?: Maybe<Scalars['String']>;
    monthly_not_starts_with?: Maybe<Scalars['String']>;
    monthly_ends_with?: Maybe<Scalars['String']>;
    monthly_not_ends_with?: Maybe<Scalars['String']>;
    networkAssetHolding?: Maybe<Scalars['String']>;
    networkAssetHolding_not?: Maybe<Scalars['String']>;
    networkAssetHolding_gt?: Maybe<Scalars['String']>;
    networkAssetHolding_lt?: Maybe<Scalars['String']>;
    networkAssetHolding_gte?: Maybe<Scalars['String']>;
    networkAssetHolding_lte?: Maybe<Scalars['String']>;
    networkAssetHolding_in?: Maybe<Array<Scalars['String']>>;
    networkAssetHolding_not_in?: Maybe<Array<Scalars['String']>>;
    networkAssetHolding_contains?: Maybe<Scalars['String']>;
    networkAssetHolding_not_contains?: Maybe<Scalars['String']>;
    networkAssetHolding_starts_with?: Maybe<Scalars['String']>;
    networkAssetHolding_not_starts_with?: Maybe<Scalars['String']>;
    networkAssetHolding_ends_with?: Maybe<Scalars['String']>;
    networkAssetHolding_not_ends_with?: Maybe<Scalars['String']>;
};
export declare enum Asset_OrderBy {
    Id = "id",
    Name = "name",
    Symbol = "symbol",
    Decimals = "decimals",
    Type = "type",
    Releases = "releases",
    DerivativeType = "derivativeType",
    UnderlyingAsset = "underlyingAsset",
    CurvePoolAssetDetails = "curvePoolAssetDetails",
    UniswapV2PoolAssetDetails = "uniswapV2PoolAssetDetails",
    Price = "price",
    Hourly = "hourly",
    Daily = "daily",
    Monthly = "monthly",
    PriceHistory = "priceHistory",
    HourlyHistory = "hourlyHistory",
    DailyHistory = "dailyHistory",
    MonthlyHistory = "monthlyHistory",
    TrackingFunds = "trackingFunds",
    Blacklisted = "blacklisted",
    Whitelisted = "whitelisted",
    NetworkAssetHolding = "networkAssetHolding",
    NetworkAssetHoldingHistory = "networkAssetHoldingHistory"
}
export declare type AuthUserAddedForFundEvent = EventInterface & FundEventInterface & {
    __typename?: 'AuthUserAddedForFundEvent';
    id: Scalars['ID'];
    fund: Fund;
    comptrollerProxy: ComptrollerProxy;
    user: Account;
    timestamp: Scalars['BigInt'];
    transaction: Transaction;
};
export declare type AuthUserAddedForFundEvent_Filter = {
    id?: Maybe<Scalars['ID']>;
    id_not?: Maybe<Scalars['ID']>;
    id_gt?: Maybe<Scalars['ID']>;
    id_lt?: Maybe<Scalars['ID']>;
    id_gte?: Maybe<Scalars['ID']>;
    id_lte?: Maybe<Scalars['ID']>;
    id_in?: Maybe<Array<Scalars['ID']>>;
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    fund?: Maybe<Scalars['String']>;
    fund_not?: Maybe<Scalars['String']>;
    fund_gt?: Maybe<Scalars['String']>;
    fund_lt?: Maybe<Scalars['String']>;
    fund_gte?: Maybe<Scalars['String']>;
    fund_lte?: Maybe<Scalars['String']>;
    fund_in?: Maybe<Array<Scalars['String']>>;
    fund_not_in?: Maybe<Array<Scalars['String']>>;
    fund_contains?: Maybe<Scalars['String']>;
    fund_not_contains?: Maybe<Scalars['String']>;
    fund_starts_with?: Maybe<Scalars['String']>;
    fund_not_starts_with?: Maybe<Scalars['String']>;
    fund_ends_with?: Maybe<Scalars['String']>;
    fund_not_ends_with?: Maybe<Scalars['String']>;
    comptrollerProxy?: Maybe<Scalars['String']>;
    comptrollerProxy_not?: Maybe<Scalars['String']>;
    comptrollerProxy_gt?: Maybe<Scalars['String']>;
    comptrollerProxy_lt?: Maybe<Scalars['String']>;
    comptrollerProxy_gte?: Maybe<Scalars['String']>;
    comptrollerProxy_lte?: Maybe<Scalars['String']>;
    comptrollerProxy_in?: Maybe<Array<Scalars['String']>>;
    comptrollerProxy_not_in?: Maybe<Array<Scalars['String']>>;
    comptrollerProxy_contains?: Maybe<Scalars['String']>;
    comptrollerProxy_not_contains?: Maybe<Scalars['String']>;
    comptrollerProxy_starts_with?: Maybe<Scalars['String']>;
    comptrollerProxy_not_starts_with?: Maybe<Scalars['String']>;
    comptrollerProxy_ends_with?: Maybe<Scalars['String']>;
    comptrollerProxy_not_ends_with?: Maybe<Scalars['String']>;
    user?: Maybe<Scalars['String']>;
    user_not?: Maybe<Scalars['String']>;
    user_gt?: Maybe<Scalars['String']>;
    user_lt?: Maybe<Scalars['String']>;
    user_gte?: Maybe<Scalars['String']>;
    user_lte?: Maybe<Scalars['String']>;
    user_in?: Maybe<Array<Scalars['String']>>;
    user_not_in?: Maybe<Array<Scalars['String']>>;
    user_contains?: Maybe<Scalars['String']>;
    user_not_contains?: Maybe<Scalars['String']>;
    user_starts_with?: Maybe<Scalars['String']>;
    user_not_starts_with?: Maybe<Scalars['String']>;
    user_ends_with?: Maybe<Scalars['String']>;
    user_not_ends_with?: Maybe<Scalars['String']>;
    timestamp?: Maybe<Scalars['BigInt']>;
    timestamp_not?: Maybe<Scalars['BigInt']>;
    timestamp_gt?: Maybe<Scalars['BigInt']>;
    timestamp_lt?: Maybe<Scalars['BigInt']>;
    timestamp_gte?: Maybe<Scalars['BigInt']>;
    timestamp_lte?: Maybe<Scalars['BigInt']>;
    timestamp_in?: Maybe<Array<Scalars['BigInt']>>;
    timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;
    transaction?: Maybe<Scalars['String']>;
    transaction_not?: Maybe<Scalars['String']>;
    transaction_gt?: Maybe<Scalars['String']>;
    transaction_lt?: Maybe<Scalars['String']>;
    transaction_gte?: Maybe<Scalars['String']>;
    transaction_lte?: Maybe<Scalars['String']>;
    transaction_in?: Maybe<Array<Scalars['String']>>;
    transaction_not_in?: Maybe<Array<Scalars['String']>>;
    transaction_contains?: Maybe<Scalars['String']>;
    transaction_not_contains?: Maybe<Scalars['String']>;
    transaction_starts_with?: Maybe<Scalars['String']>;
    transaction_not_starts_with?: Maybe<Scalars['String']>;
    transaction_ends_with?: Maybe<Scalars['String']>;
    transaction_not_ends_with?: Maybe<Scalars['String']>;
};
export declare enum AuthUserAddedForFundEvent_OrderBy {
    Id = "id",
    Fund = "fund",
    ComptrollerProxy = "comptrollerProxy",
    User = "user",
    Timestamp = "timestamp",
    Transaction = "transaction"
}
export declare type AuthUserRemovedForFundEvent = EventInterface & FundEventInterface & {
    __typename?: 'AuthUserRemovedForFundEvent';
    id: Scalars['ID'];
    fund: Fund;
    comptrollerProxy: ComptrollerProxy;
    user: Account;
    timestamp: Scalars['BigInt'];
    transaction: Transaction;
};
export declare type AuthUserRemovedForFundEvent_Filter = {
    id?: Maybe<Scalars['ID']>;
    id_not?: Maybe<Scalars['ID']>;
    id_gt?: Maybe<Scalars['ID']>;
    id_lt?: Maybe<Scalars['ID']>;
    id_gte?: Maybe<Scalars['ID']>;
    id_lte?: Maybe<Scalars['ID']>;
    id_in?: Maybe<Array<Scalars['ID']>>;
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    fund?: Maybe<Scalars['String']>;
    fund_not?: Maybe<Scalars['String']>;
    fund_gt?: Maybe<Scalars['String']>;
    fund_lt?: Maybe<Scalars['String']>;
    fund_gte?: Maybe<Scalars['String']>;
    fund_lte?: Maybe<Scalars['String']>;
    fund_in?: Maybe<Array<Scalars['String']>>;
    fund_not_in?: Maybe<Array<Scalars['String']>>;
    fund_contains?: Maybe<Scalars['String']>;
    fund_not_contains?: Maybe<Scalars['String']>;
    fund_starts_with?: Maybe<Scalars['String']>;
    fund_not_starts_with?: Maybe<Scalars['String']>;
    fund_ends_with?: Maybe<Scalars['String']>;
    fund_not_ends_with?: Maybe<Scalars['String']>;
    comptrollerProxy?: Maybe<Scalars['String']>;
    comptrollerProxy_not?: Maybe<Scalars['String']>;
    comptrollerProxy_gt?: Maybe<Scalars['String']>;
    comptrollerProxy_lt?: Maybe<Scalars['String']>;
    comptrollerProxy_gte?: Maybe<Scalars['String']>;
    comptrollerProxy_lte?: Maybe<Scalars['String']>;
    comptrollerProxy_in?: Maybe<Array<Scalars['String']>>;
    comptrollerProxy_not_in?: Maybe<Array<Scalars['String']>>;
    comptrollerProxy_contains?: Maybe<Scalars['String']>;
    comptrollerProxy_not_contains?: Maybe<Scalars['String']>;
    comptrollerProxy_starts_with?: Maybe<Scalars['String']>;
    comptrollerProxy_not_starts_with?: Maybe<Scalars['String']>;
    comptrollerProxy_ends_with?: Maybe<Scalars['String']>;
    comptrollerProxy_not_ends_with?: Maybe<Scalars['String']>;
    user?: Maybe<Scalars['String']>;
    user_not?: Maybe<Scalars['String']>;
    user_gt?: Maybe<Scalars['String']>;
    user_lt?: Maybe<Scalars['String']>;
    user_gte?: Maybe<Scalars['String']>;
    user_lte?: Maybe<Scalars['String']>;
    user_in?: Maybe<Array<Scalars['String']>>;
    user_not_in?: Maybe<Array<Scalars['String']>>;
    user_contains?: Maybe<Scalars['String']>;
    user_not_contains?: Maybe<Scalars['String']>;
    user_starts_with?: Maybe<Scalars['String']>;
    user_not_starts_with?: Maybe<Scalars['String']>;
    user_ends_with?: Maybe<Scalars['String']>;
    user_not_ends_with?: Maybe<Scalars['String']>;
    timestamp?: Maybe<Scalars['BigInt']>;
    timestamp_not?: Maybe<Scalars['BigInt']>;
    timestamp_gt?: Maybe<Scalars['BigInt']>;
    timestamp_lt?: Maybe<Scalars['BigInt']>;
    timestamp_gte?: Maybe<Scalars['BigInt']>;
    timestamp_lte?: Maybe<Scalars['BigInt']>;
    timestamp_in?: Maybe<Array<Scalars['BigInt']>>;
    timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;
    transaction?: Maybe<Scalars['String']>;
    transaction_not?: Maybe<Scalars['String']>;
    transaction_gt?: Maybe<Scalars['String']>;
    transaction_lt?: Maybe<Scalars['String']>;
    transaction_gte?: Maybe<Scalars['String']>;
    transaction_lte?: Maybe<Scalars['String']>;
    transaction_in?: Maybe<Array<Scalars['String']>>;
    transaction_not_in?: Maybe<Array<Scalars['String']>>;
    transaction_contains?: Maybe<Scalars['String']>;
    transaction_not_contains?: Maybe<Scalars['String']>;
    transaction_starts_with?: Maybe<Scalars['String']>;
    transaction_not_starts_with?: Maybe<Scalars['String']>;
    transaction_ends_with?: Maybe<Scalars['String']>;
    transaction_not_ends_with?: Maybe<Scalars['String']>;
};
export declare enum AuthUserRemovedForFundEvent_OrderBy {
    Id = "id",
    Fund = "fund",
    ComptrollerProxy = "comptrollerProxy",
    User = "user",
    Timestamp = "timestamp",
    Transaction = "transaction"
}
export declare type Block_Height = {
    hash?: Maybe<Scalars['Bytes']>;
    number?: Maybe<Scalars['Int']>;
};
export declare type BuySharesCallerWhitelistAddressesAddedEvent = EventInterface & FundEventInterface & {
    __typename?: 'BuySharesCallerWhitelistAddressesAddedEvent';
    id: Scalars['ID'];
    fund: Fund;
    timestamp: Scalars['BigInt'];
    transaction: Transaction;
    comptrollerProxy: Scalars['String'];
    items: Array<Scalars['String']>;
};
export declare type BuySharesCallerWhitelistAddressesAddedEvent_Filter = {
    id?: Maybe<Scalars['ID']>;
    id_not?: Maybe<Scalars['ID']>;
    id_gt?: Maybe<Scalars['ID']>;
    id_lt?: Maybe<Scalars['ID']>;
    id_gte?: Maybe<Scalars['ID']>;
    id_lte?: Maybe<Scalars['ID']>;
    id_in?: Maybe<Array<Scalars['ID']>>;
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    fund?: Maybe<Scalars['String']>;
    fund_not?: Maybe<Scalars['String']>;
    fund_gt?: Maybe<Scalars['String']>;
    fund_lt?: Maybe<Scalars['String']>;
    fund_gte?: Maybe<Scalars['String']>;
    fund_lte?: Maybe<Scalars['String']>;
    fund_in?: Maybe<Array<Scalars['String']>>;
    fund_not_in?: Maybe<Array<Scalars['String']>>;
    fund_contains?: Maybe<Scalars['String']>;
    fund_not_contains?: Maybe<Scalars['String']>;
    fund_starts_with?: Maybe<Scalars['String']>;
    fund_not_starts_with?: Maybe<Scalars['String']>;
    fund_ends_with?: Maybe<Scalars['String']>;
    fund_not_ends_with?: Maybe<Scalars['String']>;
    timestamp?: Maybe<Scalars['BigInt']>;
    timestamp_not?: Maybe<Scalars['BigInt']>;
    timestamp_gt?: Maybe<Scalars['BigInt']>;
    timestamp_lt?: Maybe<Scalars['BigInt']>;
    timestamp_gte?: Maybe<Scalars['BigInt']>;
    timestamp_lte?: Maybe<Scalars['BigInt']>;
    timestamp_in?: Maybe<Array<Scalars['BigInt']>>;
    timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;
    transaction?: Maybe<Scalars['String']>;
    transaction_not?: Maybe<Scalars['String']>;
    transaction_gt?: Maybe<Scalars['String']>;
    transaction_lt?: Maybe<Scalars['String']>;
    transaction_gte?: Maybe<Scalars['String']>;
    transaction_lte?: Maybe<Scalars['String']>;
    transaction_in?: Maybe<Array<Scalars['String']>>;
    transaction_not_in?: Maybe<Array<Scalars['String']>>;
    transaction_contains?: Maybe<Scalars['String']>;
    transaction_not_contains?: Maybe<Scalars['String']>;
    transaction_starts_with?: Maybe<Scalars['String']>;
    transaction_not_starts_with?: Maybe<Scalars['String']>;
    transaction_ends_with?: Maybe<Scalars['String']>;
    transaction_not_ends_with?: Maybe<Scalars['String']>;
    comptrollerProxy?: Maybe<Scalars['String']>;
    comptrollerProxy_not?: Maybe<Scalars['String']>;
    comptrollerProxy_gt?: Maybe<Scalars['String']>;
    comptrollerProxy_lt?: Maybe<Scalars['String']>;
    comptrollerProxy_gte?: Maybe<Scalars['String']>;
    comptrollerProxy_lte?: Maybe<Scalars['String']>;
    comptrollerProxy_in?: Maybe<Array<Scalars['String']>>;
    comptrollerProxy_not_in?: Maybe<Array<Scalars['String']>>;
    comptrollerProxy_contains?: Maybe<Scalars['String']>;
    comptrollerProxy_not_contains?: Maybe<Scalars['String']>;
    comptrollerProxy_starts_with?: Maybe<Scalars['String']>;
    comptrollerProxy_not_starts_with?: Maybe<Scalars['String']>;
    comptrollerProxy_ends_with?: Maybe<Scalars['String']>;
    comptrollerProxy_not_ends_with?: Maybe<Scalars['String']>;
    items?: Maybe<Array<Scalars['String']>>;
    items_not?: Maybe<Array<Scalars['String']>>;
    items_contains?: Maybe<Array<Scalars['String']>>;
    items_not_contains?: Maybe<Array<Scalars['String']>>;
};
export declare enum BuySharesCallerWhitelistAddressesAddedEvent_OrderBy {
    Id = "id",
    Fund = "fund",
    Timestamp = "timestamp",
    Transaction = "transaction",
    ComptrollerProxy = "comptrollerProxy",
    Items = "items"
}
export declare type BuySharesCallerWhitelistAddressesRemovedEvent = EventInterface & FundEventInterface & {
    __typename?: 'BuySharesCallerWhitelistAddressesRemovedEvent';
    id: Scalars['ID'];
    fund: Fund;
    timestamp: Scalars['BigInt'];
    transaction: Transaction;
    comptrollerProxy: Scalars['String'];
    items: Array<Scalars['String']>;
};
export declare type BuySharesCallerWhitelistAddressesRemovedEvent_Filter = {
    id?: Maybe<Scalars['ID']>;
    id_not?: Maybe<Scalars['ID']>;
    id_gt?: Maybe<Scalars['ID']>;
    id_lt?: Maybe<Scalars['ID']>;
    id_gte?: Maybe<Scalars['ID']>;
    id_lte?: Maybe<Scalars['ID']>;
    id_in?: Maybe<Array<Scalars['ID']>>;
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    fund?: Maybe<Scalars['String']>;
    fund_not?: Maybe<Scalars['String']>;
    fund_gt?: Maybe<Scalars['String']>;
    fund_lt?: Maybe<Scalars['String']>;
    fund_gte?: Maybe<Scalars['String']>;
    fund_lte?: Maybe<Scalars['String']>;
    fund_in?: Maybe<Array<Scalars['String']>>;
    fund_not_in?: Maybe<Array<Scalars['String']>>;
    fund_contains?: Maybe<Scalars['String']>;
    fund_not_contains?: Maybe<Scalars['String']>;
    fund_starts_with?: Maybe<Scalars['String']>;
    fund_not_starts_with?: Maybe<Scalars['String']>;
    fund_ends_with?: Maybe<Scalars['String']>;
    fund_not_ends_with?: Maybe<Scalars['String']>;
    timestamp?: Maybe<Scalars['BigInt']>;
    timestamp_not?: Maybe<Scalars['BigInt']>;
    timestamp_gt?: Maybe<Scalars['BigInt']>;
    timestamp_lt?: Maybe<Scalars['BigInt']>;
    timestamp_gte?: Maybe<Scalars['BigInt']>;
    timestamp_lte?: Maybe<Scalars['BigInt']>;
    timestamp_in?: Maybe<Array<Scalars['BigInt']>>;
    timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;
    transaction?: Maybe<Scalars['String']>;
    transaction_not?: Maybe<Scalars['String']>;
    transaction_gt?: Maybe<Scalars['String']>;
    transaction_lt?: Maybe<Scalars['String']>;
    transaction_gte?: Maybe<Scalars['String']>;
    transaction_lte?: Maybe<Scalars['String']>;
    transaction_in?: Maybe<Array<Scalars['String']>>;
    transaction_not_in?: Maybe<Array<Scalars['String']>>;
    transaction_contains?: Maybe<Scalars['String']>;
    transaction_not_contains?: Maybe<Scalars['String']>;
    transaction_starts_with?: Maybe<Scalars['String']>;
    transaction_not_starts_with?: Maybe<Scalars['String']>;
    transaction_ends_with?: Maybe<Scalars['String']>;
    transaction_not_ends_with?: Maybe<Scalars['String']>;
    comptrollerProxy?: Maybe<Scalars['String']>;
    comptrollerProxy_not?: Maybe<Scalars['String']>;
    comptrollerProxy_gt?: Maybe<Scalars['String']>;
    comptrollerProxy_lt?: Maybe<Scalars['String']>;
    comptrollerProxy_gte?: Maybe<Scalars['String']>;
    comptrollerProxy_lte?: Maybe<Scalars['String']>;
    comptrollerProxy_in?: Maybe<Array<Scalars['String']>>;
    comptrollerProxy_not_in?: Maybe<Array<Scalars['String']>>;
    comptrollerProxy_contains?: Maybe<Scalars['String']>;
    comptrollerProxy_not_contains?: Maybe<Scalars['String']>;
    comptrollerProxy_starts_with?: Maybe<Scalars['String']>;
    comptrollerProxy_not_starts_with?: Maybe<Scalars['String']>;
    comptrollerProxy_ends_with?: Maybe<Scalars['String']>;
    comptrollerProxy_not_ends_with?: Maybe<Scalars['String']>;
    items?: Maybe<Array<Scalars['String']>>;
    items_not?: Maybe<Array<Scalars['String']>>;
    items_contains?: Maybe<Array<Scalars['String']>>;
    items_not_contains?: Maybe<Array<Scalars['String']>>;
};
export declare enum BuySharesCallerWhitelistAddressesRemovedEvent_OrderBy {
    Id = "id",
    Fund = "fund",
    Timestamp = "timestamp",
    Transaction = "transaction",
    ComptrollerProxy = "comptrollerProxy",
    Items = "items"
}
export declare type BuySharesCallerWhitelistSetting = PolicySettingInterface & {
    __typename?: 'BuySharesCallerWhitelistSetting';
    id: Scalars['ID'];
    policy: Policy;
    comptroller: ComptrollerProxy;
    listed: Array<Scalars['String']>;
    timestamp: Scalars['BigInt'];
    enabled: Scalars['Boolean'];
    events: Array<FundEventInterface>;
};
export declare type BuySharesCallerWhitelistSettingEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<FundEventInterface_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<FundEventInterface_Filter>;
};
export declare type BuySharesCallerWhitelistSetting_Filter = {
    id?: Maybe<Scalars['ID']>;
    id_not?: Maybe<Scalars['ID']>;
    id_gt?: Maybe<Scalars['ID']>;
    id_lt?: Maybe<Scalars['ID']>;
    id_gte?: Maybe<Scalars['ID']>;
    id_lte?: Maybe<Scalars['ID']>;
    id_in?: Maybe<Array<Scalars['ID']>>;
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    policy?: Maybe<Scalars['String']>;
    policy_not?: Maybe<Scalars['String']>;
    policy_gt?: Maybe<Scalars['String']>;
    policy_lt?: Maybe<Scalars['String']>;
    policy_gte?: Maybe<Scalars['String']>;
    policy_lte?: Maybe<Scalars['String']>;
    policy_in?: Maybe<Array<Scalars['String']>>;
    policy_not_in?: Maybe<Array<Scalars['String']>>;
    policy_contains?: Maybe<Scalars['String']>;
    policy_not_contains?: Maybe<Scalars['String']>;
    policy_starts_with?: Maybe<Scalars['String']>;
    policy_not_starts_with?: Maybe<Scalars['String']>;
    policy_ends_with?: Maybe<Scalars['String']>;
    policy_not_ends_with?: Maybe<Scalars['String']>;
    comptroller?: Maybe<Scalars['String']>;
    comptroller_not?: Maybe<Scalars['String']>;
    comptroller_gt?: Maybe<Scalars['String']>;
    comptroller_lt?: Maybe<Scalars['String']>;
    comptroller_gte?: Maybe<Scalars['String']>;
    comptroller_lte?: Maybe<Scalars['String']>;
    comptroller_in?: Maybe<Array<Scalars['String']>>;
    comptroller_not_in?: Maybe<Array<Scalars['String']>>;
    comptroller_contains?: Maybe<Scalars['String']>;
    comptroller_not_contains?: Maybe<Scalars['String']>;
    comptroller_starts_with?: Maybe<Scalars['String']>;
    comptroller_not_starts_with?: Maybe<Scalars['String']>;
    comptroller_ends_with?: Maybe<Scalars['String']>;
    comptroller_not_ends_with?: Maybe<Scalars['String']>;
    listed?: Maybe<Array<Scalars['String']>>;
    listed_not?: Maybe<Array<Scalars['String']>>;
    listed_contains?: Maybe<Array<Scalars['String']>>;
    listed_not_contains?: Maybe<Array<Scalars['String']>>;
    timestamp?: Maybe<Scalars['BigInt']>;
    timestamp_not?: Maybe<Scalars['BigInt']>;
    timestamp_gt?: Maybe<Scalars['BigInt']>;
    timestamp_lt?: Maybe<Scalars['BigInt']>;
    timestamp_gte?: Maybe<Scalars['BigInt']>;
    timestamp_lte?: Maybe<Scalars['BigInt']>;
    timestamp_in?: Maybe<Array<Scalars['BigInt']>>;
    timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;
    enabled?: Maybe<Scalars['Boolean']>;
    enabled_not?: Maybe<Scalars['Boolean']>;
    enabled_in?: Maybe<Array<Scalars['Boolean']>>;
    enabled_not_in?: Maybe<Array<Scalars['Boolean']>>;
    events?: Maybe<Array<Scalars['String']>>;
    events_not?: Maybe<Array<Scalars['String']>>;
    events_contains?: Maybe<Array<Scalars['String']>>;
    events_not_contains?: Maybe<Array<Scalars['String']>>;
};
export declare enum BuySharesCallerWhitelistSetting_OrderBy {
    Id = "id",
    Policy = "policy",
    Comptroller = "comptroller",
    Listed = "listed",
    Timestamp = "timestamp",
    Enabled = "enabled",
    Events = "events"
}
export declare type CallOnIntegrationExecutedForFundEvent = EventInterface & FundEventInterface & {
    __typename?: 'CallOnIntegrationExecutedForFundEvent';
    id: Scalars['ID'];
    fund: Fund;
    adapter: IntegrationAdapter;
    selector: Scalars['String'];
    integrationData: Scalars['String'];
    incomingAssets: Array<Asset>;
    outgoingAssets: Array<Asset>;
    incomingAssetAmounts: Array<AssetAmount>;
    outgoingAssetAmounts: Array<AssetAmount>;
    timestamp: Scalars['BigInt'];
    transaction: Transaction;
};
export declare type CallOnIntegrationExecutedForFundEventIncomingAssetsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<Asset_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<Asset_Filter>;
};
export declare type CallOnIntegrationExecutedForFundEventOutgoingAssetsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<Asset_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<Asset_Filter>;
};
export declare type CallOnIntegrationExecutedForFundEventIncomingAssetAmountsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<AssetAmount_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<AssetAmount_Filter>;
};
export declare type CallOnIntegrationExecutedForFundEventOutgoingAssetAmountsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<AssetAmount_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<AssetAmount_Filter>;
};
export declare type CallOnIntegrationExecutedForFundEvent_Filter = {
    id?: Maybe<Scalars['ID']>;
    id_not?: Maybe<Scalars['ID']>;
    id_gt?: Maybe<Scalars['ID']>;
    id_lt?: Maybe<Scalars['ID']>;
    id_gte?: Maybe<Scalars['ID']>;
    id_lte?: Maybe<Scalars['ID']>;
    id_in?: Maybe<Array<Scalars['ID']>>;
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    fund?: Maybe<Scalars['String']>;
    fund_not?: Maybe<Scalars['String']>;
    fund_gt?: Maybe<Scalars['String']>;
    fund_lt?: Maybe<Scalars['String']>;
    fund_gte?: Maybe<Scalars['String']>;
    fund_lte?: Maybe<Scalars['String']>;
    fund_in?: Maybe<Array<Scalars['String']>>;
    fund_not_in?: Maybe<Array<Scalars['String']>>;
    fund_contains?: Maybe<Scalars['String']>;
    fund_not_contains?: Maybe<Scalars['String']>;
    fund_starts_with?: Maybe<Scalars['String']>;
    fund_not_starts_with?: Maybe<Scalars['String']>;
    fund_ends_with?: Maybe<Scalars['String']>;
    fund_not_ends_with?: Maybe<Scalars['String']>;
    adapter?: Maybe<Scalars['String']>;
    adapter_not?: Maybe<Scalars['String']>;
    adapter_gt?: Maybe<Scalars['String']>;
    adapter_lt?: Maybe<Scalars['String']>;
    adapter_gte?: Maybe<Scalars['String']>;
    adapter_lte?: Maybe<Scalars['String']>;
    adapter_in?: Maybe<Array<Scalars['String']>>;
    adapter_not_in?: Maybe<Array<Scalars['String']>>;
    adapter_contains?: Maybe<Scalars['String']>;
    adapter_not_contains?: Maybe<Scalars['String']>;
    adapter_starts_with?: Maybe<Scalars['String']>;
    adapter_not_starts_with?: Maybe<Scalars['String']>;
    adapter_ends_with?: Maybe<Scalars['String']>;
    adapter_not_ends_with?: Maybe<Scalars['String']>;
    selector?: Maybe<Scalars['String']>;
    selector_not?: Maybe<Scalars['String']>;
    selector_gt?: Maybe<Scalars['String']>;
    selector_lt?: Maybe<Scalars['String']>;
    selector_gte?: Maybe<Scalars['String']>;
    selector_lte?: Maybe<Scalars['String']>;
    selector_in?: Maybe<Array<Scalars['String']>>;
    selector_not_in?: Maybe<Array<Scalars['String']>>;
    selector_contains?: Maybe<Scalars['String']>;
    selector_not_contains?: Maybe<Scalars['String']>;
    selector_starts_with?: Maybe<Scalars['String']>;
    selector_not_starts_with?: Maybe<Scalars['String']>;
    selector_ends_with?: Maybe<Scalars['String']>;
    selector_not_ends_with?: Maybe<Scalars['String']>;
    integrationData?: Maybe<Scalars['String']>;
    integrationData_not?: Maybe<Scalars['String']>;
    integrationData_gt?: Maybe<Scalars['String']>;
    integrationData_lt?: Maybe<Scalars['String']>;
    integrationData_gte?: Maybe<Scalars['String']>;
    integrationData_lte?: Maybe<Scalars['String']>;
    integrationData_in?: Maybe<Array<Scalars['String']>>;
    integrationData_not_in?: Maybe<Array<Scalars['String']>>;
    integrationData_contains?: Maybe<Scalars['String']>;
    integrationData_not_contains?: Maybe<Scalars['String']>;
    integrationData_starts_with?: Maybe<Scalars['String']>;
    integrationData_not_starts_with?: Maybe<Scalars['String']>;
    integrationData_ends_with?: Maybe<Scalars['String']>;
    integrationData_not_ends_with?: Maybe<Scalars['String']>;
    incomingAssets?: Maybe<Array<Scalars['String']>>;
    incomingAssets_not?: Maybe<Array<Scalars['String']>>;
    incomingAssets_contains?: Maybe<Array<Scalars['String']>>;
    incomingAssets_not_contains?: Maybe<Array<Scalars['String']>>;
    outgoingAssets?: Maybe<Array<Scalars['String']>>;
    outgoingAssets_not?: Maybe<Array<Scalars['String']>>;
    outgoingAssets_contains?: Maybe<Array<Scalars['String']>>;
    outgoingAssets_not_contains?: Maybe<Array<Scalars['String']>>;
    incomingAssetAmounts?: Maybe<Array<Scalars['String']>>;
    incomingAssetAmounts_not?: Maybe<Array<Scalars['String']>>;
    incomingAssetAmounts_contains?: Maybe<Array<Scalars['String']>>;
    incomingAssetAmounts_not_contains?: Maybe<Array<Scalars['String']>>;
    outgoingAssetAmounts?: Maybe<Array<Scalars['String']>>;
    outgoingAssetAmounts_not?: Maybe<Array<Scalars['String']>>;
    outgoingAssetAmounts_contains?: Maybe<Array<Scalars['String']>>;
    outgoingAssetAmounts_not_contains?: Maybe<Array<Scalars['String']>>;
    timestamp?: Maybe<Scalars['BigInt']>;
    timestamp_not?: Maybe<Scalars['BigInt']>;
    timestamp_gt?: Maybe<Scalars['BigInt']>;
    timestamp_lt?: Maybe<Scalars['BigInt']>;
    timestamp_gte?: Maybe<Scalars['BigInt']>;
    timestamp_lte?: Maybe<Scalars['BigInt']>;
    timestamp_in?: Maybe<Array<Scalars['BigInt']>>;
    timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;
    transaction?: Maybe<Scalars['String']>;
    transaction_not?: Maybe<Scalars['String']>;
    transaction_gt?: Maybe<Scalars['String']>;
    transaction_lt?: Maybe<Scalars['String']>;
    transaction_gte?: Maybe<Scalars['String']>;
    transaction_lte?: Maybe<Scalars['String']>;
    transaction_in?: Maybe<Array<Scalars['String']>>;
    transaction_not_in?: Maybe<Array<Scalars['String']>>;
    transaction_contains?: Maybe<Scalars['String']>;
    transaction_not_contains?: Maybe<Scalars['String']>;
    transaction_starts_with?: Maybe<Scalars['String']>;
    transaction_not_starts_with?: Maybe<Scalars['String']>;
    transaction_ends_with?: Maybe<Scalars['String']>;
    transaction_not_ends_with?: Maybe<Scalars['String']>;
};
export declare enum CallOnIntegrationExecutedForFundEvent_OrderBy {
    Id = "id",
    Fund = "fund",
    Adapter = "adapter",
    Selector = "selector",
    IntegrationData = "integrationData",
    IncomingAssets = "incomingAssets",
    OutgoingAssets = "outgoingAssets",
    IncomingAssetAmounts = "incomingAssetAmounts",
    OutgoingAssetAmounts = "outgoingAssetAmounts",
    Timestamp = "timestamp",
    Transaction = "transaction"
}
export declare type ChainlinkAggregatorProxy = {
    __typename?: 'ChainlinkAggregatorProxy';
    id: Scalars['ID'];
    aggregator: Scalars['String'];
    type: ChainlinkAggregatorProxyType;
    decimals: Scalars['Int'];
    asset?: Maybe<Asset>;
    currency?: Maybe<Currency>;
};
export declare enum ChainlinkAggregatorProxyType {
    Asset = "ASSET",
    Ethusd = "ETHUSD",
    Currency = "CURRENCY"
}
export declare type ChainlinkAggregatorProxy_Filter = {
    id?: Maybe<Scalars['ID']>;
    id_not?: Maybe<Scalars['ID']>;
    id_gt?: Maybe<Scalars['ID']>;
    id_lt?: Maybe<Scalars['ID']>;
    id_gte?: Maybe<Scalars['ID']>;
    id_lte?: Maybe<Scalars['ID']>;
    id_in?: Maybe<Array<Scalars['ID']>>;
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    aggregator?: Maybe<Scalars['String']>;
    aggregator_not?: Maybe<Scalars['String']>;
    aggregator_gt?: Maybe<Scalars['String']>;
    aggregator_lt?: Maybe<Scalars['String']>;
    aggregator_gte?: Maybe<Scalars['String']>;
    aggregator_lte?: Maybe<Scalars['String']>;
    aggregator_in?: Maybe<Array<Scalars['String']>>;
    aggregator_not_in?: Maybe<Array<Scalars['String']>>;
    aggregator_contains?: Maybe<Scalars['String']>;
    aggregator_not_contains?: Maybe<Scalars['String']>;
    aggregator_starts_with?: Maybe<Scalars['String']>;
    aggregator_not_starts_with?: Maybe<Scalars['String']>;
    aggregator_ends_with?: Maybe<Scalars['String']>;
    aggregator_not_ends_with?: Maybe<Scalars['String']>;
    type?: Maybe<ChainlinkAggregatorProxyType>;
    type_not?: Maybe<ChainlinkAggregatorProxyType>;
    decimals?: Maybe<Scalars['Int']>;
    decimals_not?: Maybe<Scalars['Int']>;
    decimals_gt?: Maybe<Scalars['Int']>;
    decimals_lt?: Maybe<Scalars['Int']>;
    decimals_gte?: Maybe<Scalars['Int']>;
    decimals_lte?: Maybe<Scalars['Int']>;
    decimals_in?: Maybe<Array<Scalars['Int']>>;
    decimals_not_in?: Maybe<Array<Scalars['Int']>>;
    asset?: Maybe<Scalars['String']>;
    asset_not?: Maybe<Scalars['String']>;
    asset_gt?: Maybe<Scalars['String']>;
    asset_lt?: Maybe<Scalars['String']>;
    asset_gte?: Maybe<Scalars['String']>;
    asset_lte?: Maybe<Scalars['String']>;
    asset_in?: Maybe<Array<Scalars['String']>>;
    asset_not_in?: Maybe<Array<Scalars['String']>>;
    asset_contains?: Maybe<Scalars['String']>;
    asset_not_contains?: Maybe<Scalars['String']>;
    asset_starts_with?: Maybe<Scalars['String']>;
    asset_not_starts_with?: Maybe<Scalars['String']>;
    asset_ends_with?: Maybe<Scalars['String']>;
    asset_not_ends_with?: Maybe<Scalars['String']>;
    currency?: Maybe<Scalars['String']>;
    currency_not?: Maybe<Scalars['String']>;
    currency_gt?: Maybe<Scalars['String']>;
    currency_lt?: Maybe<Scalars['String']>;
    currency_gte?: Maybe<Scalars['String']>;
    currency_lte?: Maybe<Scalars['String']>;
    currency_in?: Maybe<Array<Scalars['String']>>;
    currency_not_in?: Maybe<Array<Scalars['String']>>;
    currency_contains?: Maybe<Scalars['String']>;
    currency_not_contains?: Maybe<Scalars['String']>;
    currency_starts_with?: Maybe<Scalars['String']>;
    currency_not_starts_with?: Maybe<Scalars['String']>;
    currency_ends_with?: Maybe<Scalars['String']>;
    currency_not_ends_with?: Maybe<Scalars['String']>;
};
export declare enum ChainlinkAggregatorProxy_OrderBy {
    Id = "id",
    Aggregator = "aggregator",
    Type = "type",
    Decimals = "decimals",
    Asset = "asset",
    Currency = "currency"
}
export declare type ClaimRewardsAndReinvestTrade = Trade & {
    __typename?: 'ClaimRewardsAndReinvestTrade';
    id: Scalars['ID'];
    fund: Fund;
    adapter: IntegrationAdapter;
    method: IntegrationMethod;
    incomingAssetAmount: AssetAmount;
    timestamp: Scalars['BigInt'];
    fundState: FundState;
};
export declare type ClaimRewardsAndReinvestTrade_Filter = {
    id?: Maybe<Scalars['ID']>;
    id_not?: Maybe<Scalars['ID']>;
    id_gt?: Maybe<Scalars['ID']>;
    id_lt?: Maybe<Scalars['ID']>;
    id_gte?: Maybe<Scalars['ID']>;
    id_lte?: Maybe<Scalars['ID']>;
    id_in?: Maybe<Array<Scalars['ID']>>;
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    fund?: Maybe<Scalars['String']>;
    fund_not?: Maybe<Scalars['String']>;
    fund_gt?: Maybe<Scalars['String']>;
    fund_lt?: Maybe<Scalars['String']>;
    fund_gte?: Maybe<Scalars['String']>;
    fund_lte?: Maybe<Scalars['String']>;
    fund_in?: Maybe<Array<Scalars['String']>>;
    fund_not_in?: Maybe<Array<Scalars['String']>>;
    fund_contains?: Maybe<Scalars['String']>;
    fund_not_contains?: Maybe<Scalars['String']>;
    fund_starts_with?: Maybe<Scalars['String']>;
    fund_not_starts_with?: Maybe<Scalars['String']>;
    fund_ends_with?: Maybe<Scalars['String']>;
    fund_not_ends_with?: Maybe<Scalars['String']>;
    adapter?: Maybe<Scalars['String']>;
    adapter_not?: Maybe<Scalars['String']>;
    adapter_gt?: Maybe<Scalars['String']>;
    adapter_lt?: Maybe<Scalars['String']>;
    adapter_gte?: Maybe<Scalars['String']>;
    adapter_lte?: Maybe<Scalars['String']>;
    adapter_in?: Maybe<Array<Scalars['String']>>;
    adapter_not_in?: Maybe<Array<Scalars['String']>>;
    adapter_contains?: Maybe<Scalars['String']>;
    adapter_not_contains?: Maybe<Scalars['String']>;
    adapter_starts_with?: Maybe<Scalars['String']>;
    adapter_not_starts_with?: Maybe<Scalars['String']>;
    adapter_ends_with?: Maybe<Scalars['String']>;
    adapter_not_ends_with?: Maybe<Scalars['String']>;
    method?: Maybe<IntegrationMethod>;
    method_not?: Maybe<IntegrationMethod>;
    incomingAssetAmount?: Maybe<Scalars['String']>;
    incomingAssetAmount_not?: Maybe<Scalars['String']>;
    incomingAssetAmount_gt?: Maybe<Scalars['String']>;
    incomingAssetAmount_lt?: Maybe<Scalars['String']>;
    incomingAssetAmount_gte?: Maybe<Scalars['String']>;
    incomingAssetAmount_lte?: Maybe<Scalars['String']>;
    incomingAssetAmount_in?: Maybe<Array<Scalars['String']>>;
    incomingAssetAmount_not_in?: Maybe<Array<Scalars['String']>>;
    incomingAssetAmount_contains?: Maybe<Scalars['String']>;
    incomingAssetAmount_not_contains?: Maybe<Scalars['String']>;
    incomingAssetAmount_starts_with?: Maybe<Scalars['String']>;
    incomingAssetAmount_not_starts_with?: Maybe<Scalars['String']>;
    incomingAssetAmount_ends_with?: Maybe<Scalars['String']>;
    incomingAssetAmount_not_ends_with?: Maybe<Scalars['String']>;
    timestamp?: Maybe<Scalars['BigInt']>;
    timestamp_not?: Maybe<Scalars['BigInt']>;
    timestamp_gt?: Maybe<Scalars['BigInt']>;
    timestamp_lt?: Maybe<Scalars['BigInt']>;
    timestamp_gte?: Maybe<Scalars['BigInt']>;
    timestamp_lte?: Maybe<Scalars['BigInt']>;
    timestamp_in?: Maybe<Array<Scalars['BigInt']>>;
    timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;
    fundState?: Maybe<Scalars['String']>;
    fundState_not?: Maybe<Scalars['String']>;
    fundState_gt?: Maybe<Scalars['String']>;
    fundState_lt?: Maybe<Scalars['String']>;
    fundState_gte?: Maybe<Scalars['String']>;
    fundState_lte?: Maybe<Scalars['String']>;
    fundState_in?: Maybe<Array<Scalars['String']>>;
    fundState_not_in?: Maybe<Array<Scalars['String']>>;
    fundState_contains?: Maybe<Scalars['String']>;
    fundState_not_contains?: Maybe<Scalars['String']>;
    fundState_starts_with?: Maybe<Scalars['String']>;
    fundState_not_starts_with?: Maybe<Scalars['String']>;
    fundState_ends_with?: Maybe<Scalars['String']>;
    fundState_not_ends_with?: Maybe<Scalars['String']>;
};
export declare enum ClaimRewardsAndReinvestTrade_OrderBy {
    Id = "id",
    Fund = "fund",
    Adapter = "adapter",
    Method = "method",
    IncomingAssetAmount = "incomingAssetAmount",
    Timestamp = "timestamp",
    FundState = "fundState"
}
export declare type ClaimRewardsAndSwapTrade = Trade & {
    __typename?: 'ClaimRewardsAndSwapTrade';
    id: Scalars['ID'];
    fund: Fund;
    adapter: IntegrationAdapter;
    method: IntegrationMethod;
    incomingAssetAmount: AssetAmount;
    timestamp: Scalars['BigInt'];
    fundState: FundState;
};
export declare type ClaimRewardsAndSwapTrade_Filter = {
    id?: Maybe<Scalars['ID']>;
    id_not?: Maybe<Scalars['ID']>;
    id_gt?: Maybe<Scalars['ID']>;
    id_lt?: Maybe<Scalars['ID']>;
    id_gte?: Maybe<Scalars['ID']>;
    id_lte?: Maybe<Scalars['ID']>;
    id_in?: Maybe<Array<Scalars['ID']>>;
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    fund?: Maybe<Scalars['String']>;
    fund_not?: Maybe<Scalars['String']>;
    fund_gt?: Maybe<Scalars['String']>;
    fund_lt?: Maybe<Scalars['String']>;
    fund_gte?: Maybe<Scalars['String']>;
    fund_lte?: Maybe<Scalars['String']>;
    fund_in?: Maybe<Array<Scalars['String']>>;
    fund_not_in?: Maybe<Array<Scalars['String']>>;
    fund_contains?: Maybe<Scalars['String']>;
    fund_not_contains?: Maybe<Scalars['String']>;
    fund_starts_with?: Maybe<Scalars['String']>;
    fund_not_starts_with?: Maybe<Scalars['String']>;
    fund_ends_with?: Maybe<Scalars['String']>;
    fund_not_ends_with?: Maybe<Scalars['String']>;
    adapter?: Maybe<Scalars['String']>;
    adapter_not?: Maybe<Scalars['String']>;
    adapter_gt?: Maybe<Scalars['String']>;
    adapter_lt?: Maybe<Scalars['String']>;
    adapter_gte?: Maybe<Scalars['String']>;
    adapter_lte?: Maybe<Scalars['String']>;
    adapter_in?: Maybe<Array<Scalars['String']>>;
    adapter_not_in?: Maybe<Array<Scalars['String']>>;
    adapter_contains?: Maybe<Scalars['String']>;
    adapter_not_contains?: Maybe<Scalars['String']>;
    adapter_starts_with?: Maybe<Scalars['String']>;
    adapter_not_starts_with?: Maybe<Scalars['String']>;
    adapter_ends_with?: Maybe<Scalars['String']>;
    adapter_not_ends_with?: Maybe<Scalars['String']>;
    method?: Maybe<IntegrationMethod>;
    method_not?: Maybe<IntegrationMethod>;
    incomingAssetAmount?: Maybe<Scalars['String']>;
    incomingAssetAmount_not?: Maybe<Scalars['String']>;
    incomingAssetAmount_gt?: Maybe<Scalars['String']>;
    incomingAssetAmount_lt?: Maybe<Scalars['String']>;
    incomingAssetAmount_gte?: Maybe<Scalars['String']>;
    incomingAssetAmount_lte?: Maybe<Scalars['String']>;
    incomingAssetAmount_in?: Maybe<Array<Scalars['String']>>;
    incomingAssetAmount_not_in?: Maybe<Array<Scalars['String']>>;
    incomingAssetAmount_contains?: Maybe<Scalars['String']>;
    incomingAssetAmount_not_contains?: Maybe<Scalars['String']>;
    incomingAssetAmount_starts_with?: Maybe<Scalars['String']>;
    incomingAssetAmount_not_starts_with?: Maybe<Scalars['String']>;
    incomingAssetAmount_ends_with?: Maybe<Scalars['String']>;
    incomingAssetAmount_not_ends_with?: Maybe<Scalars['String']>;
    timestamp?: Maybe<Scalars['BigInt']>;
    timestamp_not?: Maybe<Scalars['BigInt']>;
    timestamp_gt?: Maybe<Scalars['BigInt']>;
    timestamp_lt?: Maybe<Scalars['BigInt']>;
    timestamp_gte?: Maybe<Scalars['BigInt']>;
    timestamp_lte?: Maybe<Scalars['BigInt']>;
    timestamp_in?: Maybe<Array<Scalars['BigInt']>>;
    timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;
    fundState?: Maybe<Scalars['String']>;
    fundState_not?: Maybe<Scalars['String']>;
    fundState_gt?: Maybe<Scalars['String']>;
    fundState_lt?: Maybe<Scalars['String']>;
    fundState_gte?: Maybe<Scalars['String']>;
    fundState_lte?: Maybe<Scalars['String']>;
    fundState_in?: Maybe<Array<Scalars['String']>>;
    fundState_not_in?: Maybe<Array<Scalars['String']>>;
    fundState_contains?: Maybe<Scalars['String']>;
    fundState_not_contains?: Maybe<Scalars['String']>;
    fundState_starts_with?: Maybe<Scalars['String']>;
    fundState_not_starts_with?: Maybe<Scalars['String']>;
    fundState_ends_with?: Maybe<Scalars['String']>;
    fundState_not_ends_with?: Maybe<Scalars['String']>;
};
export declare enum ClaimRewardsAndSwapTrade_OrderBy {
    Id = "id",
    Fund = "fund",
    Adapter = "adapter",
    Method = "method",
    IncomingAssetAmount = "incomingAssetAmount",
    Timestamp = "timestamp",
    FundState = "fundState"
}
export declare type ClaimRewardsTrade = Trade & {
    __typename?: 'ClaimRewardsTrade';
    id: Scalars['ID'];
    fund: Fund;
    adapter: IntegrationAdapter;
    method: IntegrationMethod;
    incomingAssetAmounts: Array<AssetAmount>;
    timestamp: Scalars['BigInt'];
    fundState: FundState;
};
export declare type ClaimRewardsTradeIncomingAssetAmountsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<AssetAmount_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<AssetAmount_Filter>;
};
export declare type ClaimRewardsTrade_Filter = {
    id?: Maybe<Scalars['ID']>;
    id_not?: Maybe<Scalars['ID']>;
    id_gt?: Maybe<Scalars['ID']>;
    id_lt?: Maybe<Scalars['ID']>;
    id_gte?: Maybe<Scalars['ID']>;
    id_lte?: Maybe<Scalars['ID']>;
    id_in?: Maybe<Array<Scalars['ID']>>;
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    fund?: Maybe<Scalars['String']>;
    fund_not?: Maybe<Scalars['String']>;
    fund_gt?: Maybe<Scalars['String']>;
    fund_lt?: Maybe<Scalars['String']>;
    fund_gte?: Maybe<Scalars['String']>;
    fund_lte?: Maybe<Scalars['String']>;
    fund_in?: Maybe<Array<Scalars['String']>>;
    fund_not_in?: Maybe<Array<Scalars['String']>>;
    fund_contains?: Maybe<Scalars['String']>;
    fund_not_contains?: Maybe<Scalars['String']>;
    fund_starts_with?: Maybe<Scalars['String']>;
    fund_not_starts_with?: Maybe<Scalars['String']>;
    fund_ends_with?: Maybe<Scalars['String']>;
    fund_not_ends_with?: Maybe<Scalars['String']>;
    adapter?: Maybe<Scalars['String']>;
    adapter_not?: Maybe<Scalars['String']>;
    adapter_gt?: Maybe<Scalars['String']>;
    adapter_lt?: Maybe<Scalars['String']>;
    adapter_gte?: Maybe<Scalars['String']>;
    adapter_lte?: Maybe<Scalars['String']>;
    adapter_in?: Maybe<Array<Scalars['String']>>;
    adapter_not_in?: Maybe<Array<Scalars['String']>>;
    adapter_contains?: Maybe<Scalars['String']>;
    adapter_not_contains?: Maybe<Scalars['String']>;
    adapter_starts_with?: Maybe<Scalars['String']>;
    adapter_not_starts_with?: Maybe<Scalars['String']>;
    adapter_ends_with?: Maybe<Scalars['String']>;
    adapter_not_ends_with?: Maybe<Scalars['String']>;
    method?: Maybe<IntegrationMethod>;
    method_not?: Maybe<IntegrationMethod>;
    incomingAssetAmounts?: Maybe<Array<Scalars['String']>>;
    incomingAssetAmounts_not?: Maybe<Array<Scalars['String']>>;
    incomingAssetAmounts_contains?: Maybe<Array<Scalars['String']>>;
    incomingAssetAmounts_not_contains?: Maybe<Array<Scalars['String']>>;
    timestamp?: Maybe<Scalars['BigInt']>;
    timestamp_not?: Maybe<Scalars['BigInt']>;
    timestamp_gt?: Maybe<Scalars['BigInt']>;
    timestamp_lt?: Maybe<Scalars['BigInt']>;
    timestamp_gte?: Maybe<Scalars['BigInt']>;
    timestamp_lte?: Maybe<Scalars['BigInt']>;
    timestamp_in?: Maybe<Array<Scalars['BigInt']>>;
    timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;
    fundState?: Maybe<Scalars['String']>;
    fundState_not?: Maybe<Scalars['String']>;
    fundState_gt?: Maybe<Scalars['String']>;
    fundState_lt?: Maybe<Scalars['String']>;
    fundState_gte?: Maybe<Scalars['String']>;
    fundState_lte?: Maybe<Scalars['String']>;
    fundState_in?: Maybe<Array<Scalars['String']>>;
    fundState_not_in?: Maybe<Array<Scalars['String']>>;
    fundState_contains?: Maybe<Scalars['String']>;
    fundState_not_contains?: Maybe<Scalars['String']>;
    fundState_starts_with?: Maybe<Scalars['String']>;
    fundState_not_starts_with?: Maybe<Scalars['String']>;
    fundState_ends_with?: Maybe<Scalars['String']>;
    fundState_not_ends_with?: Maybe<Scalars['String']>;
};
export declare enum ClaimRewardsTrade_OrderBy {
    Id = "id",
    Fund = "fund",
    Adapter = "adapter",
    Method = "method",
    IncomingAssetAmounts = "incomingAssetAmounts",
    Timestamp = "timestamp",
    FundState = "fundState"
}
export declare type ComptrollerEventInterface = {
    id: Scalars['ID'];
    comptroller: ComptrollerProxy;
    timestamp: Scalars['BigInt'];
    transaction: Transaction;
};
export declare type ComptrollerEventInterface_Filter = {
    id?: Maybe<Scalars['ID']>;
    id_not?: Maybe<Scalars['ID']>;
    id_gt?: Maybe<Scalars['ID']>;
    id_lt?: Maybe<Scalars['ID']>;
    id_gte?: Maybe<Scalars['ID']>;
    id_lte?: Maybe<Scalars['ID']>;
    id_in?: Maybe<Array<Scalars['ID']>>;
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    comptroller?: Maybe<Scalars['String']>;
    comptroller_not?: Maybe<Scalars['String']>;
    comptroller_gt?: Maybe<Scalars['String']>;
    comptroller_lt?: Maybe<Scalars['String']>;
    comptroller_gte?: Maybe<Scalars['String']>;
    comptroller_lte?: Maybe<Scalars['String']>;
    comptroller_in?: Maybe<Array<Scalars['String']>>;
    comptroller_not_in?: Maybe<Array<Scalars['String']>>;
    comptroller_contains?: Maybe<Scalars['String']>;
    comptroller_not_contains?: Maybe<Scalars['String']>;
    comptroller_starts_with?: Maybe<Scalars['String']>;
    comptroller_not_starts_with?: Maybe<Scalars['String']>;
    comptroller_ends_with?: Maybe<Scalars['String']>;
    comptroller_not_ends_with?: Maybe<Scalars['String']>;
    timestamp?: Maybe<Scalars['BigInt']>;
    timestamp_not?: Maybe<Scalars['BigInt']>;
    timestamp_gt?: Maybe<Scalars['BigInt']>;
    timestamp_lt?: Maybe<Scalars['BigInt']>;
    timestamp_gte?: Maybe<Scalars['BigInt']>;
    timestamp_lte?: Maybe<Scalars['BigInt']>;
    timestamp_in?: Maybe<Array<Scalars['BigInt']>>;
    timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;
    transaction?: Maybe<Scalars['String']>;
    transaction_not?: Maybe<Scalars['String']>;
    transaction_gt?: Maybe<Scalars['String']>;
    transaction_lt?: Maybe<Scalars['String']>;
    transaction_gte?: Maybe<Scalars['String']>;
    transaction_lte?: Maybe<Scalars['String']>;
    transaction_in?: Maybe<Array<Scalars['String']>>;
    transaction_not_in?: Maybe<Array<Scalars['String']>>;
    transaction_contains?: Maybe<Scalars['String']>;
    transaction_not_contains?: Maybe<Scalars['String']>;
    transaction_starts_with?: Maybe<Scalars['String']>;
    transaction_not_starts_with?: Maybe<Scalars['String']>;
    transaction_ends_with?: Maybe<Scalars['String']>;
    transaction_not_ends_with?: Maybe<Scalars['String']>;
};
export declare enum ComptrollerEventInterface_OrderBy {
    Id = "id",
    Comptroller = "comptroller",
    Timestamp = "timestamp",
    Transaction = "transaction"
}
export declare type ComptrollerLibSetEvent = EventInterface & NetworkEventInterface & {
    __typename?: 'ComptrollerLibSetEvent';
    id: Scalars['ID'];
    timestamp: Scalars['BigInt'];
    transaction: Transaction;
    comptrollerLib: Scalars['String'];
};
export declare type ComptrollerLibSetEvent_Filter = {
    id?: Maybe<Scalars['ID']>;
    id_not?: Maybe<Scalars['ID']>;
    id_gt?: Maybe<Scalars['ID']>;
    id_lt?: Maybe<Scalars['ID']>;
    id_gte?: Maybe<Scalars['ID']>;
    id_lte?: Maybe<Scalars['ID']>;
    id_in?: Maybe<Array<Scalars['ID']>>;
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    timestamp?: Maybe<Scalars['BigInt']>;
    timestamp_not?: Maybe<Scalars['BigInt']>;
    timestamp_gt?: Maybe<Scalars['BigInt']>;
    timestamp_lt?: Maybe<Scalars['BigInt']>;
    timestamp_gte?: Maybe<Scalars['BigInt']>;
    timestamp_lte?: Maybe<Scalars['BigInt']>;
    timestamp_in?: Maybe<Array<Scalars['BigInt']>>;
    timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;
    transaction?: Maybe<Scalars['String']>;
    transaction_not?: Maybe<Scalars['String']>;
    transaction_gt?: Maybe<Scalars['String']>;
    transaction_lt?: Maybe<Scalars['String']>;
    transaction_gte?: Maybe<Scalars['String']>;
    transaction_lte?: Maybe<Scalars['String']>;
    transaction_in?: Maybe<Array<Scalars['String']>>;
    transaction_not_in?: Maybe<Array<Scalars['String']>>;
    transaction_contains?: Maybe<Scalars['String']>;
    transaction_not_contains?: Maybe<Scalars['String']>;
    transaction_starts_with?: Maybe<Scalars['String']>;
    transaction_not_starts_with?: Maybe<Scalars['String']>;
    transaction_ends_with?: Maybe<Scalars['String']>;
    transaction_not_ends_with?: Maybe<Scalars['String']>;
    comptrollerLib?: Maybe<Scalars['String']>;
    comptrollerLib_not?: Maybe<Scalars['String']>;
    comptrollerLib_gt?: Maybe<Scalars['String']>;
    comptrollerLib_lt?: Maybe<Scalars['String']>;
    comptrollerLib_gte?: Maybe<Scalars['String']>;
    comptrollerLib_lte?: Maybe<Scalars['String']>;
    comptrollerLib_in?: Maybe<Array<Scalars['String']>>;
    comptrollerLib_not_in?: Maybe<Array<Scalars['String']>>;
    comptrollerLib_contains?: Maybe<Scalars['String']>;
    comptrollerLib_not_contains?: Maybe<Scalars['String']>;
    comptrollerLib_starts_with?: Maybe<Scalars['String']>;
    comptrollerLib_not_starts_with?: Maybe<Scalars['String']>;
    comptrollerLib_ends_with?: Maybe<Scalars['String']>;
    comptrollerLib_not_ends_with?: Maybe<Scalars['String']>;
};
export declare enum ComptrollerLibSetEvent_OrderBy {
    Id = "id",
    Timestamp = "timestamp",
    Transaction = "transaction",
    ComptrollerLib = "comptrollerLib"
}
export declare type ComptrollerProxy = {
    __typename?: 'ComptrollerProxy';
    id: Scalars['ID'];
    fund?: Maybe<Fund>;
    creator: Account;
    timestamp: Scalars['BigInt'];
    activationTime: Scalars['BigInt'];
    destructionTime?: Maybe<Scalars['BigInt']>;
    denominationAsset: Asset;
    sharesActionTimelock: Scalars['BigInt'];
    feeManagerConfigData: Scalars['String'];
    policyManagerConfigData: Scalars['String'];
    release: Release;
    authUsers: Array<Account>;
    status: ComptrollerProxyStatus;
    feeSettings: Array<FeeSettingInterface>;
    policySettings: Array<PolicySettingInterface>;
};
export declare type ComptrollerProxyAuthUsersArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<Account_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<Account_Filter>;
};
export declare type ComptrollerProxyFeeSettingsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<FeeSettingInterface_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<FeeSettingInterface_Filter>;
};
export declare type ComptrollerProxyPolicySettingsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<PolicySettingInterface_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<PolicySettingInterface_Filter>;
};
export declare type ComptrollerProxyDeployedEvent = EventInterface & NetworkEventInterface & {
    __typename?: 'ComptrollerProxyDeployedEvent';
    id: Scalars['ID'];
    timestamp: Scalars['BigInt'];
    creator: Account;
    comptrollerProxy: Scalars['String'];
    transaction: Transaction;
    denominationAsset: Asset;
    sharesActionTimelock: Scalars['BigInt'];
    feeManagerConfigData: Scalars['String'];
    policyManagerConfigData: Scalars['String'];
    forMigration: Scalars['Boolean'];
};
export declare type ComptrollerProxyDeployedEvent_Filter = {
    id?: Maybe<Scalars['ID']>;
    id_not?: Maybe<Scalars['ID']>;
    id_gt?: Maybe<Scalars['ID']>;
    id_lt?: Maybe<Scalars['ID']>;
    id_gte?: Maybe<Scalars['ID']>;
    id_lte?: Maybe<Scalars['ID']>;
    id_in?: Maybe<Array<Scalars['ID']>>;
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    timestamp?: Maybe<Scalars['BigInt']>;
    timestamp_not?: Maybe<Scalars['BigInt']>;
    timestamp_gt?: Maybe<Scalars['BigInt']>;
    timestamp_lt?: Maybe<Scalars['BigInt']>;
    timestamp_gte?: Maybe<Scalars['BigInt']>;
    timestamp_lte?: Maybe<Scalars['BigInt']>;
    timestamp_in?: Maybe<Array<Scalars['BigInt']>>;
    timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;
    creator?: Maybe<Scalars['String']>;
    creator_not?: Maybe<Scalars['String']>;
    creator_gt?: Maybe<Scalars['String']>;
    creator_lt?: Maybe<Scalars['String']>;
    creator_gte?: Maybe<Scalars['String']>;
    creator_lte?: Maybe<Scalars['String']>;
    creator_in?: Maybe<Array<Scalars['String']>>;
    creator_not_in?: Maybe<Array<Scalars['String']>>;
    creator_contains?: Maybe<Scalars['String']>;
    creator_not_contains?: Maybe<Scalars['String']>;
    creator_starts_with?: Maybe<Scalars['String']>;
    creator_not_starts_with?: Maybe<Scalars['String']>;
    creator_ends_with?: Maybe<Scalars['String']>;
    creator_not_ends_with?: Maybe<Scalars['String']>;
    comptrollerProxy?: Maybe<Scalars['String']>;
    comptrollerProxy_not?: Maybe<Scalars['String']>;
    comptrollerProxy_gt?: Maybe<Scalars['String']>;
    comptrollerProxy_lt?: Maybe<Scalars['String']>;
    comptrollerProxy_gte?: Maybe<Scalars['String']>;
    comptrollerProxy_lte?: Maybe<Scalars['String']>;
    comptrollerProxy_in?: Maybe<Array<Scalars['String']>>;
    comptrollerProxy_not_in?: Maybe<Array<Scalars['String']>>;
    comptrollerProxy_contains?: Maybe<Scalars['String']>;
    comptrollerProxy_not_contains?: Maybe<Scalars['String']>;
    comptrollerProxy_starts_with?: Maybe<Scalars['String']>;
    comptrollerProxy_not_starts_with?: Maybe<Scalars['String']>;
    comptrollerProxy_ends_with?: Maybe<Scalars['String']>;
    comptrollerProxy_not_ends_with?: Maybe<Scalars['String']>;
    transaction?: Maybe<Scalars['String']>;
    transaction_not?: Maybe<Scalars['String']>;
    transaction_gt?: Maybe<Scalars['String']>;
    transaction_lt?: Maybe<Scalars['String']>;
    transaction_gte?: Maybe<Scalars['String']>;
    transaction_lte?: Maybe<Scalars['String']>;
    transaction_in?: Maybe<Array<Scalars['String']>>;
    transaction_not_in?: Maybe<Array<Scalars['String']>>;
    transaction_contains?: Maybe<Scalars['String']>;
    transaction_not_contains?: Maybe<Scalars['String']>;
    transaction_starts_with?: Maybe<Scalars['String']>;
    transaction_not_starts_with?: Maybe<Scalars['String']>;
    transaction_ends_with?: Maybe<Scalars['String']>;
    transaction_not_ends_with?: Maybe<Scalars['String']>;
    denominationAsset?: Maybe<Scalars['String']>;
    denominationAsset_not?: Maybe<Scalars['String']>;
    denominationAsset_gt?: Maybe<Scalars['String']>;
    denominationAsset_lt?: Maybe<Scalars['String']>;
    denominationAsset_gte?: Maybe<Scalars['String']>;
    denominationAsset_lte?: Maybe<Scalars['String']>;
    denominationAsset_in?: Maybe<Array<Scalars['String']>>;
    denominationAsset_not_in?: Maybe<Array<Scalars['String']>>;
    denominationAsset_contains?: Maybe<Scalars['String']>;
    denominationAsset_not_contains?: Maybe<Scalars['String']>;
    denominationAsset_starts_with?: Maybe<Scalars['String']>;
    denominationAsset_not_starts_with?: Maybe<Scalars['String']>;
    denominationAsset_ends_with?: Maybe<Scalars['String']>;
    denominationAsset_not_ends_with?: Maybe<Scalars['String']>;
    sharesActionTimelock?: Maybe<Scalars['BigInt']>;
    sharesActionTimelock_not?: Maybe<Scalars['BigInt']>;
    sharesActionTimelock_gt?: Maybe<Scalars['BigInt']>;
    sharesActionTimelock_lt?: Maybe<Scalars['BigInt']>;
    sharesActionTimelock_gte?: Maybe<Scalars['BigInt']>;
    sharesActionTimelock_lte?: Maybe<Scalars['BigInt']>;
    sharesActionTimelock_in?: Maybe<Array<Scalars['BigInt']>>;
    sharesActionTimelock_not_in?: Maybe<Array<Scalars['BigInt']>>;
    feeManagerConfigData?: Maybe<Scalars['String']>;
    feeManagerConfigData_not?: Maybe<Scalars['String']>;
    feeManagerConfigData_gt?: Maybe<Scalars['String']>;
    feeManagerConfigData_lt?: Maybe<Scalars['String']>;
    feeManagerConfigData_gte?: Maybe<Scalars['String']>;
    feeManagerConfigData_lte?: Maybe<Scalars['String']>;
    feeManagerConfigData_in?: Maybe<Array<Scalars['String']>>;
    feeManagerConfigData_not_in?: Maybe<Array<Scalars['String']>>;
    feeManagerConfigData_contains?: Maybe<Scalars['String']>;
    feeManagerConfigData_not_contains?: Maybe<Scalars['String']>;
    feeManagerConfigData_starts_with?: Maybe<Scalars['String']>;
    feeManagerConfigData_not_starts_with?: Maybe<Scalars['String']>;
    feeManagerConfigData_ends_with?: Maybe<Scalars['String']>;
    feeManagerConfigData_not_ends_with?: Maybe<Scalars['String']>;
    policyManagerConfigData?: Maybe<Scalars['String']>;
    policyManagerConfigData_not?: Maybe<Scalars['String']>;
    policyManagerConfigData_gt?: Maybe<Scalars['String']>;
    policyManagerConfigData_lt?: Maybe<Scalars['String']>;
    policyManagerConfigData_gte?: Maybe<Scalars['String']>;
    policyManagerConfigData_lte?: Maybe<Scalars['String']>;
    policyManagerConfigData_in?: Maybe<Array<Scalars['String']>>;
    policyManagerConfigData_not_in?: Maybe<Array<Scalars['String']>>;
    policyManagerConfigData_contains?: Maybe<Scalars['String']>;
    policyManagerConfigData_not_contains?: Maybe<Scalars['String']>;
    policyManagerConfigData_starts_with?: Maybe<Scalars['String']>;
    policyManagerConfigData_not_starts_with?: Maybe<Scalars['String']>;
    policyManagerConfigData_ends_with?: Maybe<Scalars['String']>;
    policyManagerConfigData_not_ends_with?: Maybe<Scalars['String']>;
    forMigration?: Maybe<Scalars['Boolean']>;
    forMigration_not?: Maybe<Scalars['Boolean']>;
    forMigration_in?: Maybe<Array<Scalars['Boolean']>>;
    forMigration_not_in?: Maybe<Array<Scalars['Boolean']>>;
};
export declare enum ComptrollerProxyDeployedEvent_OrderBy {
    Id = "id",
    Timestamp = "timestamp",
    Creator = "creator",
    ComptrollerProxy = "comptrollerProxy",
    Transaction = "transaction",
    DenominationAsset = "denominationAsset",
    SharesActionTimelock = "sharesActionTimelock",
    FeeManagerConfigData = "feeManagerConfigData",
    PolicyManagerConfigData = "policyManagerConfigData",
    ForMigration = "forMigration"
}
export declare enum ComptrollerProxyStatus {
    Free = "FREE",
    Signalled = "SIGNALLED",
    Committed = "COMMITTED",
    Destructed = "DESTRUCTED"
}
export declare type ComptrollerProxy_Filter = {
    id?: Maybe<Scalars['ID']>;
    id_not?: Maybe<Scalars['ID']>;
    id_gt?: Maybe<Scalars['ID']>;
    id_lt?: Maybe<Scalars['ID']>;
    id_gte?: Maybe<Scalars['ID']>;
    id_lte?: Maybe<Scalars['ID']>;
    id_in?: Maybe<Array<Scalars['ID']>>;
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    fund?: Maybe<Scalars['String']>;
    fund_not?: Maybe<Scalars['String']>;
    fund_gt?: Maybe<Scalars['String']>;
    fund_lt?: Maybe<Scalars['String']>;
    fund_gte?: Maybe<Scalars['String']>;
    fund_lte?: Maybe<Scalars['String']>;
    fund_in?: Maybe<Array<Scalars['String']>>;
    fund_not_in?: Maybe<Array<Scalars['String']>>;
    fund_contains?: Maybe<Scalars['String']>;
    fund_not_contains?: Maybe<Scalars['String']>;
    fund_starts_with?: Maybe<Scalars['String']>;
    fund_not_starts_with?: Maybe<Scalars['String']>;
    fund_ends_with?: Maybe<Scalars['String']>;
    fund_not_ends_with?: Maybe<Scalars['String']>;
    creator?: Maybe<Scalars['String']>;
    creator_not?: Maybe<Scalars['String']>;
    creator_gt?: Maybe<Scalars['String']>;
    creator_lt?: Maybe<Scalars['String']>;
    creator_gte?: Maybe<Scalars['String']>;
    creator_lte?: Maybe<Scalars['String']>;
    creator_in?: Maybe<Array<Scalars['String']>>;
    creator_not_in?: Maybe<Array<Scalars['String']>>;
    creator_contains?: Maybe<Scalars['String']>;
    creator_not_contains?: Maybe<Scalars['String']>;
    creator_starts_with?: Maybe<Scalars['String']>;
    creator_not_starts_with?: Maybe<Scalars['String']>;
    creator_ends_with?: Maybe<Scalars['String']>;
    creator_not_ends_with?: Maybe<Scalars['String']>;
    timestamp?: Maybe<Scalars['BigInt']>;
    timestamp_not?: Maybe<Scalars['BigInt']>;
    timestamp_gt?: Maybe<Scalars['BigInt']>;
    timestamp_lt?: Maybe<Scalars['BigInt']>;
    timestamp_gte?: Maybe<Scalars['BigInt']>;
    timestamp_lte?: Maybe<Scalars['BigInt']>;
    timestamp_in?: Maybe<Array<Scalars['BigInt']>>;
    timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;
    activationTime?: Maybe<Scalars['BigInt']>;
    activationTime_not?: Maybe<Scalars['BigInt']>;
    activationTime_gt?: Maybe<Scalars['BigInt']>;
    activationTime_lt?: Maybe<Scalars['BigInt']>;
    activationTime_gte?: Maybe<Scalars['BigInt']>;
    activationTime_lte?: Maybe<Scalars['BigInt']>;
    activationTime_in?: Maybe<Array<Scalars['BigInt']>>;
    activationTime_not_in?: Maybe<Array<Scalars['BigInt']>>;
    destructionTime?: Maybe<Scalars['BigInt']>;
    destructionTime_not?: Maybe<Scalars['BigInt']>;
    destructionTime_gt?: Maybe<Scalars['BigInt']>;
    destructionTime_lt?: Maybe<Scalars['BigInt']>;
    destructionTime_gte?: Maybe<Scalars['BigInt']>;
    destructionTime_lte?: Maybe<Scalars['BigInt']>;
    destructionTime_in?: Maybe<Array<Scalars['BigInt']>>;
    destructionTime_not_in?: Maybe<Array<Scalars['BigInt']>>;
    denominationAsset?: Maybe<Scalars['String']>;
    denominationAsset_not?: Maybe<Scalars['String']>;
    denominationAsset_gt?: Maybe<Scalars['String']>;
    denominationAsset_lt?: Maybe<Scalars['String']>;
    denominationAsset_gte?: Maybe<Scalars['String']>;
    denominationAsset_lte?: Maybe<Scalars['String']>;
    denominationAsset_in?: Maybe<Array<Scalars['String']>>;
    denominationAsset_not_in?: Maybe<Array<Scalars['String']>>;
    denominationAsset_contains?: Maybe<Scalars['String']>;
    denominationAsset_not_contains?: Maybe<Scalars['String']>;
    denominationAsset_starts_with?: Maybe<Scalars['String']>;
    denominationAsset_not_starts_with?: Maybe<Scalars['String']>;
    denominationAsset_ends_with?: Maybe<Scalars['String']>;
    denominationAsset_not_ends_with?: Maybe<Scalars['String']>;
    sharesActionTimelock?: Maybe<Scalars['BigInt']>;
    sharesActionTimelock_not?: Maybe<Scalars['BigInt']>;
    sharesActionTimelock_gt?: Maybe<Scalars['BigInt']>;
    sharesActionTimelock_lt?: Maybe<Scalars['BigInt']>;
    sharesActionTimelock_gte?: Maybe<Scalars['BigInt']>;
    sharesActionTimelock_lte?: Maybe<Scalars['BigInt']>;
    sharesActionTimelock_in?: Maybe<Array<Scalars['BigInt']>>;
    sharesActionTimelock_not_in?: Maybe<Array<Scalars['BigInt']>>;
    feeManagerConfigData?: Maybe<Scalars['String']>;
    feeManagerConfigData_not?: Maybe<Scalars['String']>;
    feeManagerConfigData_gt?: Maybe<Scalars['String']>;
    feeManagerConfigData_lt?: Maybe<Scalars['String']>;
    feeManagerConfigData_gte?: Maybe<Scalars['String']>;
    feeManagerConfigData_lte?: Maybe<Scalars['String']>;
    feeManagerConfigData_in?: Maybe<Array<Scalars['String']>>;
    feeManagerConfigData_not_in?: Maybe<Array<Scalars['String']>>;
    feeManagerConfigData_contains?: Maybe<Scalars['String']>;
    feeManagerConfigData_not_contains?: Maybe<Scalars['String']>;
    feeManagerConfigData_starts_with?: Maybe<Scalars['String']>;
    feeManagerConfigData_not_starts_with?: Maybe<Scalars['String']>;
    feeManagerConfigData_ends_with?: Maybe<Scalars['String']>;
    feeManagerConfigData_not_ends_with?: Maybe<Scalars['String']>;
    policyManagerConfigData?: Maybe<Scalars['String']>;
    policyManagerConfigData_not?: Maybe<Scalars['String']>;
    policyManagerConfigData_gt?: Maybe<Scalars['String']>;
    policyManagerConfigData_lt?: Maybe<Scalars['String']>;
    policyManagerConfigData_gte?: Maybe<Scalars['String']>;
    policyManagerConfigData_lte?: Maybe<Scalars['String']>;
    policyManagerConfigData_in?: Maybe<Array<Scalars['String']>>;
    policyManagerConfigData_not_in?: Maybe<Array<Scalars['String']>>;
    policyManagerConfigData_contains?: Maybe<Scalars['String']>;
    policyManagerConfigData_not_contains?: Maybe<Scalars['String']>;
    policyManagerConfigData_starts_with?: Maybe<Scalars['String']>;
    policyManagerConfigData_not_starts_with?: Maybe<Scalars['String']>;
    policyManagerConfigData_ends_with?: Maybe<Scalars['String']>;
    policyManagerConfigData_not_ends_with?: Maybe<Scalars['String']>;
    release?: Maybe<Scalars['String']>;
    release_not?: Maybe<Scalars['String']>;
    release_gt?: Maybe<Scalars['String']>;
    release_lt?: Maybe<Scalars['String']>;
    release_gte?: Maybe<Scalars['String']>;
    release_lte?: Maybe<Scalars['String']>;
    release_in?: Maybe<Array<Scalars['String']>>;
    release_not_in?: Maybe<Array<Scalars['String']>>;
    release_contains?: Maybe<Scalars['String']>;
    release_not_contains?: Maybe<Scalars['String']>;
    release_starts_with?: Maybe<Scalars['String']>;
    release_not_starts_with?: Maybe<Scalars['String']>;
    release_ends_with?: Maybe<Scalars['String']>;
    release_not_ends_with?: Maybe<Scalars['String']>;
    authUsers?: Maybe<Array<Scalars['String']>>;
    authUsers_not?: Maybe<Array<Scalars['String']>>;
    authUsers_contains?: Maybe<Array<Scalars['String']>>;
    authUsers_not_contains?: Maybe<Array<Scalars['String']>>;
    status?: Maybe<ComptrollerProxyStatus>;
    status_not?: Maybe<ComptrollerProxyStatus>;
};
export declare enum ComptrollerProxy_OrderBy {
    Id = "id",
    Fund = "fund",
    Creator = "creator",
    Timestamp = "timestamp",
    ActivationTime = "activationTime",
    DestructionTime = "destructionTime",
    DenominationAsset = "denominationAsset",
    SharesActionTimelock = "sharesActionTimelock",
    FeeManagerConfigData = "feeManagerConfigData",
    PolicyManagerConfigData = "policyManagerConfigData",
    Release = "release",
    AuthUsers = "authUsers",
    Status = "status",
    FeeSettings = "feeSettings",
    PolicySettings = "policySettings"
}
export declare type Cron = {
    __typename?: 'Cron';
    id: Scalars['ID'];
    cron: Scalars['BigInt'];
    primitives: Array<Asset>;
    usdQuotedPrimitives: Array<Asset>;
    derivatives: Array<Asset>;
    currencies: Array<Currency>;
    chainlinkAggregatorProxies: Array<ChainlinkAggregatorProxy>;
};
export declare type CronPrimitivesArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<Asset_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<Asset_Filter>;
};
export declare type CronUsdQuotedPrimitivesArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<Asset_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<Asset_Filter>;
};
export declare type CronDerivativesArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<Asset_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<Asset_Filter>;
};
export declare type CronCurrenciesArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<Currency_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<Currency_Filter>;
};
export declare type CronChainlinkAggregatorProxiesArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<ChainlinkAggregatorProxy_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<ChainlinkAggregatorProxy_Filter>;
};
export declare type Cron_Filter = {
    id?: Maybe<Scalars['ID']>;
    id_not?: Maybe<Scalars['ID']>;
    id_gt?: Maybe<Scalars['ID']>;
    id_lt?: Maybe<Scalars['ID']>;
    id_gte?: Maybe<Scalars['ID']>;
    id_lte?: Maybe<Scalars['ID']>;
    id_in?: Maybe<Array<Scalars['ID']>>;
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    cron?: Maybe<Scalars['BigInt']>;
    cron_not?: Maybe<Scalars['BigInt']>;
    cron_gt?: Maybe<Scalars['BigInt']>;
    cron_lt?: Maybe<Scalars['BigInt']>;
    cron_gte?: Maybe<Scalars['BigInt']>;
    cron_lte?: Maybe<Scalars['BigInt']>;
    cron_in?: Maybe<Array<Scalars['BigInt']>>;
    cron_not_in?: Maybe<Array<Scalars['BigInt']>>;
    primitives?: Maybe<Array<Scalars['String']>>;
    primitives_not?: Maybe<Array<Scalars['String']>>;
    primitives_contains?: Maybe<Array<Scalars['String']>>;
    primitives_not_contains?: Maybe<Array<Scalars['String']>>;
    usdQuotedPrimitives?: Maybe<Array<Scalars['String']>>;
    usdQuotedPrimitives_not?: Maybe<Array<Scalars['String']>>;
    usdQuotedPrimitives_contains?: Maybe<Array<Scalars['String']>>;
    usdQuotedPrimitives_not_contains?: Maybe<Array<Scalars['String']>>;
    derivatives?: Maybe<Array<Scalars['String']>>;
    derivatives_not?: Maybe<Array<Scalars['String']>>;
    derivatives_contains?: Maybe<Array<Scalars['String']>>;
    derivatives_not_contains?: Maybe<Array<Scalars['String']>>;
    currencies?: Maybe<Array<Scalars['String']>>;
    currencies_not?: Maybe<Array<Scalars['String']>>;
    currencies_contains?: Maybe<Array<Scalars['String']>>;
    currencies_not_contains?: Maybe<Array<Scalars['String']>>;
    chainlinkAggregatorProxies?: Maybe<Array<Scalars['String']>>;
    chainlinkAggregatorProxies_not?: Maybe<Array<Scalars['String']>>;
    chainlinkAggregatorProxies_contains?: Maybe<Array<Scalars['String']>>;
    chainlinkAggregatorProxies_not_contains?: Maybe<Array<Scalars['String']>>;
};
export declare enum Cron_OrderBy {
    Id = "id",
    Cron = "cron",
    Primitives = "primitives",
    UsdQuotedPrimitives = "usdQuotedPrimitives",
    Derivatives = "derivatives",
    Currencies = "currencies",
    ChainlinkAggregatorProxies = "chainlinkAggregatorProxies"
}
export declare type Currency = {
    __typename?: 'Currency';
    id: Scalars['ID'];
    price?: Maybe<CurrencyPrice>;
    hourly?: Maybe<HourlyCurrencyPriceCandle>;
    daily?: Maybe<DailyCurrencyPriceCandle>;
    monthly?: Maybe<MonthlyCurrencyPriceCandle>;
    priceHistory: Array<CurrencyPrice>;
    hourlyHistory: Array<HourlyCurrencyPriceCandle>;
    dailyHistory: Array<DailyCurrencyPriceCandle>;
    monthlyHistory: Array<MonthlyCurrencyPriceCandle>;
};
export declare type CurrencyPriceHistoryArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<CurrencyPrice_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<CurrencyPrice_Filter>;
};
export declare type CurrencyHourlyHistoryArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<HourlyCurrencyPriceCandle_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<HourlyCurrencyPriceCandle_Filter>;
};
export declare type CurrencyDailyHistoryArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<DailyCurrencyPriceCandle_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<DailyCurrencyPriceCandle_Filter>;
};
export declare type CurrencyMonthlyHistoryArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<MonthlyCurrencyPriceCandle_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<MonthlyCurrencyPriceCandle_Filter>;
};
export declare type CurrencyPrice = {
    __typename?: 'CurrencyPrice';
    id: Scalars['ID'];
    currency: Currency;
    price: Scalars['BigDecimal'];
    timestamp: Scalars['BigInt'];
};
export declare type CurrencyPrice_Filter = {
    id?: Maybe<Scalars['ID']>;
    id_not?: Maybe<Scalars['ID']>;
    id_gt?: Maybe<Scalars['ID']>;
    id_lt?: Maybe<Scalars['ID']>;
    id_gte?: Maybe<Scalars['ID']>;
    id_lte?: Maybe<Scalars['ID']>;
    id_in?: Maybe<Array<Scalars['ID']>>;
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    currency?: Maybe<Scalars['String']>;
    currency_not?: Maybe<Scalars['String']>;
    currency_gt?: Maybe<Scalars['String']>;
    currency_lt?: Maybe<Scalars['String']>;
    currency_gte?: Maybe<Scalars['String']>;
    currency_lte?: Maybe<Scalars['String']>;
    currency_in?: Maybe<Array<Scalars['String']>>;
    currency_not_in?: Maybe<Array<Scalars['String']>>;
    currency_contains?: Maybe<Scalars['String']>;
    currency_not_contains?: Maybe<Scalars['String']>;
    currency_starts_with?: Maybe<Scalars['String']>;
    currency_not_starts_with?: Maybe<Scalars['String']>;
    currency_ends_with?: Maybe<Scalars['String']>;
    currency_not_ends_with?: Maybe<Scalars['String']>;
    price?: Maybe<Scalars['BigDecimal']>;
    price_not?: Maybe<Scalars['BigDecimal']>;
    price_gt?: Maybe<Scalars['BigDecimal']>;
    price_lt?: Maybe<Scalars['BigDecimal']>;
    price_gte?: Maybe<Scalars['BigDecimal']>;
    price_lte?: Maybe<Scalars['BigDecimal']>;
    price_in?: Maybe<Array<Scalars['BigDecimal']>>;
    price_not_in?: Maybe<Array<Scalars['BigDecimal']>>;
    timestamp?: Maybe<Scalars['BigInt']>;
    timestamp_not?: Maybe<Scalars['BigInt']>;
    timestamp_gt?: Maybe<Scalars['BigInt']>;
    timestamp_lt?: Maybe<Scalars['BigInt']>;
    timestamp_gte?: Maybe<Scalars['BigInt']>;
    timestamp_lte?: Maybe<Scalars['BigInt']>;
    timestamp_in?: Maybe<Array<Scalars['BigInt']>>;
    timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;
};
export declare enum CurrencyPrice_OrderBy {
    Id = "id",
    Currency = "currency",
    Price = "price",
    Timestamp = "timestamp"
}
export declare type Currency_Filter = {
    id?: Maybe<Scalars['ID']>;
    id_not?: Maybe<Scalars['ID']>;
    id_gt?: Maybe<Scalars['ID']>;
    id_lt?: Maybe<Scalars['ID']>;
    id_gte?: Maybe<Scalars['ID']>;
    id_lte?: Maybe<Scalars['ID']>;
    id_in?: Maybe<Array<Scalars['ID']>>;
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    price?: Maybe<Scalars['String']>;
    price_not?: Maybe<Scalars['String']>;
    price_gt?: Maybe<Scalars['String']>;
    price_lt?: Maybe<Scalars['String']>;
    price_gte?: Maybe<Scalars['String']>;
    price_lte?: Maybe<Scalars['String']>;
    price_in?: Maybe<Array<Scalars['String']>>;
    price_not_in?: Maybe<Array<Scalars['String']>>;
    price_contains?: Maybe<Scalars['String']>;
    price_not_contains?: Maybe<Scalars['String']>;
    price_starts_with?: Maybe<Scalars['String']>;
    price_not_starts_with?: Maybe<Scalars['String']>;
    price_ends_with?: Maybe<Scalars['String']>;
    price_not_ends_with?: Maybe<Scalars['String']>;
    hourly?: Maybe<Scalars['String']>;
    hourly_not?: Maybe<Scalars['String']>;
    hourly_gt?: Maybe<Scalars['String']>;
    hourly_lt?: Maybe<Scalars['String']>;
    hourly_gte?: Maybe<Scalars['String']>;
    hourly_lte?: Maybe<Scalars['String']>;
    hourly_in?: Maybe<Array<Scalars['String']>>;
    hourly_not_in?: Maybe<Array<Scalars['String']>>;
    hourly_contains?: Maybe<Scalars['String']>;
    hourly_not_contains?: Maybe<Scalars['String']>;
    hourly_starts_with?: Maybe<Scalars['String']>;
    hourly_not_starts_with?: Maybe<Scalars['String']>;
    hourly_ends_with?: Maybe<Scalars['String']>;
    hourly_not_ends_with?: Maybe<Scalars['String']>;
    daily?: Maybe<Scalars['String']>;
    daily_not?: Maybe<Scalars['String']>;
    daily_gt?: Maybe<Scalars['String']>;
    daily_lt?: Maybe<Scalars['String']>;
    daily_gte?: Maybe<Scalars['String']>;
    daily_lte?: Maybe<Scalars['String']>;
    daily_in?: Maybe<Array<Scalars['String']>>;
    daily_not_in?: Maybe<Array<Scalars['String']>>;
    daily_contains?: Maybe<Scalars['String']>;
    daily_not_contains?: Maybe<Scalars['String']>;
    daily_starts_with?: Maybe<Scalars['String']>;
    daily_not_starts_with?: Maybe<Scalars['String']>;
    daily_ends_with?: Maybe<Scalars['String']>;
    daily_not_ends_with?: Maybe<Scalars['String']>;
    monthly?: Maybe<Scalars['String']>;
    monthly_not?: Maybe<Scalars['String']>;
    monthly_gt?: Maybe<Scalars['String']>;
    monthly_lt?: Maybe<Scalars['String']>;
    monthly_gte?: Maybe<Scalars['String']>;
    monthly_lte?: Maybe<Scalars['String']>;
    monthly_in?: Maybe<Array<Scalars['String']>>;
    monthly_not_in?: Maybe<Array<Scalars['String']>>;
    monthly_contains?: Maybe<Scalars['String']>;
    monthly_not_contains?: Maybe<Scalars['String']>;
    monthly_starts_with?: Maybe<Scalars['String']>;
    monthly_not_starts_with?: Maybe<Scalars['String']>;
    monthly_ends_with?: Maybe<Scalars['String']>;
    monthly_not_ends_with?: Maybe<Scalars['String']>;
};
export declare enum Currency_OrderBy {
    Id = "id",
    Price = "price",
    Hourly = "hourly",
    Daily = "daily",
    Monthly = "monthly",
    PriceHistory = "priceHistory",
    HourlyHistory = "hourlyHistory",
    DailyHistory = "dailyHistory",
    MonthlyHistory = "monthlyHistory"
}
export declare enum CurveAssetType {
    Gauge = "GAUGE",
    Pool = "POOL"
}
export declare type CurvePoolAssetDetail = {
    __typename?: 'CurvePoolAssetDetail';
    id: Scalars['ID'];
    pool: Scalars['String'];
    gauge: Scalars['String'];
    lpToken: Asset;
    gaugeToken: Asset;
    curveAssetType: CurveAssetType;
    invariantProxyAsset: Asset;
    numberOfTokens: Scalars['Int'];
    token0: Asset;
    token1: Asset;
    token2?: Maybe<Asset>;
};
export declare type CurvePoolAssetDetail_Filter = {
    id?: Maybe<Scalars['ID']>;
    id_not?: Maybe<Scalars['ID']>;
    id_gt?: Maybe<Scalars['ID']>;
    id_lt?: Maybe<Scalars['ID']>;
    id_gte?: Maybe<Scalars['ID']>;
    id_lte?: Maybe<Scalars['ID']>;
    id_in?: Maybe<Array<Scalars['ID']>>;
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    pool?: Maybe<Scalars['String']>;
    pool_not?: Maybe<Scalars['String']>;
    pool_gt?: Maybe<Scalars['String']>;
    pool_lt?: Maybe<Scalars['String']>;
    pool_gte?: Maybe<Scalars['String']>;
    pool_lte?: Maybe<Scalars['String']>;
    pool_in?: Maybe<Array<Scalars['String']>>;
    pool_not_in?: Maybe<Array<Scalars['String']>>;
    pool_contains?: Maybe<Scalars['String']>;
    pool_not_contains?: Maybe<Scalars['String']>;
    pool_starts_with?: Maybe<Scalars['String']>;
    pool_not_starts_with?: Maybe<Scalars['String']>;
    pool_ends_with?: Maybe<Scalars['String']>;
    pool_not_ends_with?: Maybe<Scalars['String']>;
    gauge?: Maybe<Scalars['String']>;
    gauge_not?: Maybe<Scalars['String']>;
    gauge_gt?: Maybe<Scalars['String']>;
    gauge_lt?: Maybe<Scalars['String']>;
    gauge_gte?: Maybe<Scalars['String']>;
    gauge_lte?: Maybe<Scalars['String']>;
    gauge_in?: Maybe<Array<Scalars['String']>>;
    gauge_not_in?: Maybe<Array<Scalars['String']>>;
    gauge_contains?: Maybe<Scalars['String']>;
    gauge_not_contains?: Maybe<Scalars['String']>;
    gauge_starts_with?: Maybe<Scalars['String']>;
    gauge_not_starts_with?: Maybe<Scalars['String']>;
    gauge_ends_with?: Maybe<Scalars['String']>;
    gauge_not_ends_with?: Maybe<Scalars['String']>;
    lpToken?: Maybe<Scalars['String']>;
    lpToken_not?: Maybe<Scalars['String']>;
    lpToken_gt?: Maybe<Scalars['String']>;
    lpToken_lt?: Maybe<Scalars['String']>;
    lpToken_gte?: Maybe<Scalars['String']>;
    lpToken_lte?: Maybe<Scalars['String']>;
    lpToken_in?: Maybe<Array<Scalars['String']>>;
    lpToken_not_in?: Maybe<Array<Scalars['String']>>;
    lpToken_contains?: Maybe<Scalars['String']>;
    lpToken_not_contains?: Maybe<Scalars['String']>;
    lpToken_starts_with?: Maybe<Scalars['String']>;
    lpToken_not_starts_with?: Maybe<Scalars['String']>;
    lpToken_ends_with?: Maybe<Scalars['String']>;
    lpToken_not_ends_with?: Maybe<Scalars['String']>;
    gaugeToken?: Maybe<Scalars['String']>;
    gaugeToken_not?: Maybe<Scalars['String']>;
    gaugeToken_gt?: Maybe<Scalars['String']>;
    gaugeToken_lt?: Maybe<Scalars['String']>;
    gaugeToken_gte?: Maybe<Scalars['String']>;
    gaugeToken_lte?: Maybe<Scalars['String']>;
    gaugeToken_in?: Maybe<Array<Scalars['String']>>;
    gaugeToken_not_in?: Maybe<Array<Scalars['String']>>;
    gaugeToken_contains?: Maybe<Scalars['String']>;
    gaugeToken_not_contains?: Maybe<Scalars['String']>;
    gaugeToken_starts_with?: Maybe<Scalars['String']>;
    gaugeToken_not_starts_with?: Maybe<Scalars['String']>;
    gaugeToken_ends_with?: Maybe<Scalars['String']>;
    gaugeToken_not_ends_with?: Maybe<Scalars['String']>;
    curveAssetType?: Maybe<CurveAssetType>;
    curveAssetType_not?: Maybe<CurveAssetType>;
    invariantProxyAsset?: Maybe<Scalars['String']>;
    invariantProxyAsset_not?: Maybe<Scalars['String']>;
    invariantProxyAsset_gt?: Maybe<Scalars['String']>;
    invariantProxyAsset_lt?: Maybe<Scalars['String']>;
    invariantProxyAsset_gte?: Maybe<Scalars['String']>;
    invariantProxyAsset_lte?: Maybe<Scalars['String']>;
    invariantProxyAsset_in?: Maybe<Array<Scalars['String']>>;
    invariantProxyAsset_not_in?: Maybe<Array<Scalars['String']>>;
    invariantProxyAsset_contains?: Maybe<Scalars['String']>;
    invariantProxyAsset_not_contains?: Maybe<Scalars['String']>;
    invariantProxyAsset_starts_with?: Maybe<Scalars['String']>;
    invariantProxyAsset_not_starts_with?: Maybe<Scalars['String']>;
    invariantProxyAsset_ends_with?: Maybe<Scalars['String']>;
    invariantProxyAsset_not_ends_with?: Maybe<Scalars['String']>;
    numberOfTokens?: Maybe<Scalars['Int']>;
    numberOfTokens_not?: Maybe<Scalars['Int']>;
    numberOfTokens_gt?: Maybe<Scalars['Int']>;
    numberOfTokens_lt?: Maybe<Scalars['Int']>;
    numberOfTokens_gte?: Maybe<Scalars['Int']>;
    numberOfTokens_lte?: Maybe<Scalars['Int']>;
    numberOfTokens_in?: Maybe<Array<Scalars['Int']>>;
    numberOfTokens_not_in?: Maybe<Array<Scalars['Int']>>;
    token0?: Maybe<Scalars['String']>;
    token0_not?: Maybe<Scalars['String']>;
    token0_gt?: Maybe<Scalars['String']>;
    token0_lt?: Maybe<Scalars['String']>;
    token0_gte?: Maybe<Scalars['String']>;
    token0_lte?: Maybe<Scalars['String']>;
    token0_in?: Maybe<Array<Scalars['String']>>;
    token0_not_in?: Maybe<Array<Scalars['String']>>;
    token0_contains?: Maybe<Scalars['String']>;
    token0_not_contains?: Maybe<Scalars['String']>;
    token0_starts_with?: Maybe<Scalars['String']>;
    token0_not_starts_with?: Maybe<Scalars['String']>;
    token0_ends_with?: Maybe<Scalars['String']>;
    token0_not_ends_with?: Maybe<Scalars['String']>;
    token1?: Maybe<Scalars['String']>;
    token1_not?: Maybe<Scalars['String']>;
    token1_gt?: Maybe<Scalars['String']>;
    token1_lt?: Maybe<Scalars['String']>;
    token1_gte?: Maybe<Scalars['String']>;
    token1_lte?: Maybe<Scalars['String']>;
    token1_in?: Maybe<Array<Scalars['String']>>;
    token1_not_in?: Maybe<Array<Scalars['String']>>;
    token1_contains?: Maybe<Scalars['String']>;
    token1_not_contains?: Maybe<Scalars['String']>;
    token1_starts_with?: Maybe<Scalars['String']>;
    token1_not_starts_with?: Maybe<Scalars['String']>;
    token1_ends_with?: Maybe<Scalars['String']>;
    token1_not_ends_with?: Maybe<Scalars['String']>;
    token2?: Maybe<Scalars['String']>;
    token2_not?: Maybe<Scalars['String']>;
    token2_gt?: Maybe<Scalars['String']>;
    token2_lt?: Maybe<Scalars['String']>;
    token2_gte?: Maybe<Scalars['String']>;
    token2_lte?: Maybe<Scalars['String']>;
    token2_in?: Maybe<Array<Scalars['String']>>;
    token2_not_in?: Maybe<Array<Scalars['String']>>;
    token2_contains?: Maybe<Scalars['String']>;
    token2_not_contains?: Maybe<Scalars['String']>;
    token2_starts_with?: Maybe<Scalars['String']>;
    token2_not_starts_with?: Maybe<Scalars['String']>;
    token2_ends_with?: Maybe<Scalars['String']>;
    token2_not_ends_with?: Maybe<Scalars['String']>;
};
export declare enum CurvePoolAssetDetail_OrderBy {
    Id = "id",
    Pool = "pool",
    Gauge = "gauge",
    LpToken = "lpToken",
    GaugeToken = "gaugeToken",
    CurveAssetType = "curveAssetType",
    InvariantProxyAsset = "invariantProxyAsset",
    NumberOfTokens = "numberOfTokens",
    Token0 = "token0",
    Token1 = "token1",
    Token2 = "token2"
}
export declare type DailyAssetPriceCandle = {
    __typename?: 'DailyAssetPriceCandle';
    id: Scalars['ID'];
    asset: Asset;
    group: DailyPriceCandleGroup;
    from: Scalars['BigInt'];
    to: Scalars['BigInt'];
    open: Scalars['BigDecimal'];
    openRef: AssetPrice;
    close: Scalars['BigDecimal'];
    closeRef: AssetPrice;
    low: Scalars['BigDecimal'];
    lowRef: AssetPrice;
    high: Scalars['BigDecimal'];
    highRef: AssetPrice;
};
export declare type DailyAssetPriceCandle_Filter = {
    id?: Maybe<Scalars['ID']>;
    id_not?: Maybe<Scalars['ID']>;
    id_gt?: Maybe<Scalars['ID']>;
    id_lt?: Maybe<Scalars['ID']>;
    id_gte?: Maybe<Scalars['ID']>;
    id_lte?: Maybe<Scalars['ID']>;
    id_in?: Maybe<Array<Scalars['ID']>>;
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    asset?: Maybe<Scalars['String']>;
    asset_not?: Maybe<Scalars['String']>;
    asset_gt?: Maybe<Scalars['String']>;
    asset_lt?: Maybe<Scalars['String']>;
    asset_gte?: Maybe<Scalars['String']>;
    asset_lte?: Maybe<Scalars['String']>;
    asset_in?: Maybe<Array<Scalars['String']>>;
    asset_not_in?: Maybe<Array<Scalars['String']>>;
    asset_contains?: Maybe<Scalars['String']>;
    asset_not_contains?: Maybe<Scalars['String']>;
    asset_starts_with?: Maybe<Scalars['String']>;
    asset_not_starts_with?: Maybe<Scalars['String']>;
    asset_ends_with?: Maybe<Scalars['String']>;
    asset_not_ends_with?: Maybe<Scalars['String']>;
    group?: Maybe<Scalars['String']>;
    group_not?: Maybe<Scalars['String']>;
    group_gt?: Maybe<Scalars['String']>;
    group_lt?: Maybe<Scalars['String']>;
    group_gte?: Maybe<Scalars['String']>;
    group_lte?: Maybe<Scalars['String']>;
    group_in?: Maybe<Array<Scalars['String']>>;
    group_not_in?: Maybe<Array<Scalars['String']>>;
    group_contains?: Maybe<Scalars['String']>;
    group_not_contains?: Maybe<Scalars['String']>;
    group_starts_with?: Maybe<Scalars['String']>;
    group_not_starts_with?: Maybe<Scalars['String']>;
    group_ends_with?: Maybe<Scalars['String']>;
    group_not_ends_with?: Maybe<Scalars['String']>;
    from?: Maybe<Scalars['BigInt']>;
    from_not?: Maybe<Scalars['BigInt']>;
    from_gt?: Maybe<Scalars['BigInt']>;
    from_lt?: Maybe<Scalars['BigInt']>;
    from_gte?: Maybe<Scalars['BigInt']>;
    from_lte?: Maybe<Scalars['BigInt']>;
    from_in?: Maybe<Array<Scalars['BigInt']>>;
    from_not_in?: Maybe<Array<Scalars['BigInt']>>;
    to?: Maybe<Scalars['BigInt']>;
    to_not?: Maybe<Scalars['BigInt']>;
    to_gt?: Maybe<Scalars['BigInt']>;
    to_lt?: Maybe<Scalars['BigInt']>;
    to_gte?: Maybe<Scalars['BigInt']>;
    to_lte?: Maybe<Scalars['BigInt']>;
    to_in?: Maybe<Array<Scalars['BigInt']>>;
    to_not_in?: Maybe<Array<Scalars['BigInt']>>;
    open?: Maybe<Scalars['BigDecimal']>;
    open_not?: Maybe<Scalars['BigDecimal']>;
    open_gt?: Maybe<Scalars['BigDecimal']>;
    open_lt?: Maybe<Scalars['BigDecimal']>;
    open_gte?: Maybe<Scalars['BigDecimal']>;
    open_lte?: Maybe<Scalars['BigDecimal']>;
    open_in?: Maybe<Array<Scalars['BigDecimal']>>;
    open_not_in?: Maybe<Array<Scalars['BigDecimal']>>;
    openRef?: Maybe<Scalars['String']>;
    openRef_not?: Maybe<Scalars['String']>;
    openRef_gt?: Maybe<Scalars['String']>;
    openRef_lt?: Maybe<Scalars['String']>;
    openRef_gte?: Maybe<Scalars['String']>;
    openRef_lte?: Maybe<Scalars['String']>;
    openRef_in?: Maybe<Array<Scalars['String']>>;
    openRef_not_in?: Maybe<Array<Scalars['String']>>;
    openRef_contains?: Maybe<Scalars['String']>;
    openRef_not_contains?: Maybe<Scalars['String']>;
    openRef_starts_with?: Maybe<Scalars['String']>;
    openRef_not_starts_with?: Maybe<Scalars['String']>;
    openRef_ends_with?: Maybe<Scalars['String']>;
    openRef_not_ends_with?: Maybe<Scalars['String']>;
    close?: Maybe<Scalars['BigDecimal']>;
    close_not?: Maybe<Scalars['BigDecimal']>;
    close_gt?: Maybe<Scalars['BigDecimal']>;
    close_lt?: Maybe<Scalars['BigDecimal']>;
    close_gte?: Maybe<Scalars['BigDecimal']>;
    close_lte?: Maybe<Scalars['BigDecimal']>;
    close_in?: Maybe<Array<Scalars['BigDecimal']>>;
    close_not_in?: Maybe<Array<Scalars['BigDecimal']>>;
    closeRef?: Maybe<Scalars['String']>;
    closeRef_not?: Maybe<Scalars['String']>;
    closeRef_gt?: Maybe<Scalars['String']>;
    closeRef_lt?: Maybe<Scalars['String']>;
    closeRef_gte?: Maybe<Scalars['String']>;
    closeRef_lte?: Maybe<Scalars['String']>;
    closeRef_in?: Maybe<Array<Scalars['String']>>;
    closeRef_not_in?: Maybe<Array<Scalars['String']>>;
    closeRef_contains?: Maybe<Scalars['String']>;
    closeRef_not_contains?: Maybe<Scalars['String']>;
    closeRef_starts_with?: Maybe<Scalars['String']>;
    closeRef_not_starts_with?: Maybe<Scalars['String']>;
    closeRef_ends_with?: Maybe<Scalars['String']>;
    closeRef_not_ends_with?: Maybe<Scalars['String']>;
    low?: Maybe<Scalars['BigDecimal']>;
    low_not?: Maybe<Scalars['BigDecimal']>;
    low_gt?: Maybe<Scalars['BigDecimal']>;
    low_lt?: Maybe<Scalars['BigDecimal']>;
    low_gte?: Maybe<Scalars['BigDecimal']>;
    low_lte?: Maybe<Scalars['BigDecimal']>;
    low_in?: Maybe<Array<Scalars['BigDecimal']>>;
    low_not_in?: Maybe<Array<Scalars['BigDecimal']>>;
    lowRef?: Maybe<Scalars['String']>;
    lowRef_not?: Maybe<Scalars['String']>;
    lowRef_gt?: Maybe<Scalars['String']>;
    lowRef_lt?: Maybe<Scalars['String']>;
    lowRef_gte?: Maybe<Scalars['String']>;
    lowRef_lte?: Maybe<Scalars['String']>;
    lowRef_in?: Maybe<Array<Scalars['String']>>;
    lowRef_not_in?: Maybe<Array<Scalars['String']>>;
    lowRef_contains?: Maybe<Scalars['String']>;
    lowRef_not_contains?: Maybe<Scalars['String']>;
    lowRef_starts_with?: Maybe<Scalars['String']>;
    lowRef_not_starts_with?: Maybe<Scalars['String']>;
    lowRef_ends_with?: Maybe<Scalars['String']>;
    lowRef_not_ends_with?: Maybe<Scalars['String']>;
    high?: Maybe<Scalars['BigDecimal']>;
    high_not?: Maybe<Scalars['BigDecimal']>;
    high_gt?: Maybe<Scalars['BigDecimal']>;
    high_lt?: Maybe<Scalars['BigDecimal']>;
    high_gte?: Maybe<Scalars['BigDecimal']>;
    high_lte?: Maybe<Scalars['BigDecimal']>;
    high_in?: Maybe<Array<Scalars['BigDecimal']>>;
    high_not_in?: Maybe<Array<Scalars['BigDecimal']>>;
    highRef?: Maybe<Scalars['String']>;
    highRef_not?: Maybe<Scalars['String']>;
    highRef_gt?: Maybe<Scalars['String']>;
    highRef_lt?: Maybe<Scalars['String']>;
    highRef_gte?: Maybe<Scalars['String']>;
    highRef_lte?: Maybe<Scalars['String']>;
    highRef_in?: Maybe<Array<Scalars['String']>>;
    highRef_not_in?: Maybe<Array<Scalars['String']>>;
    highRef_contains?: Maybe<Scalars['String']>;
    highRef_not_contains?: Maybe<Scalars['String']>;
    highRef_starts_with?: Maybe<Scalars['String']>;
    highRef_not_starts_with?: Maybe<Scalars['String']>;
    highRef_ends_with?: Maybe<Scalars['String']>;
    highRef_not_ends_with?: Maybe<Scalars['String']>;
};
export declare enum DailyAssetPriceCandle_OrderBy {
    Id = "id",
    Asset = "asset",
    Group = "group",
    From = "from",
    To = "to",
    Open = "open",
    OpenRef = "openRef",
    Close = "close",
    CloseRef = "closeRef",
    Low = "low",
    LowRef = "lowRef",
    High = "high",
    HighRef = "highRef"
}
export declare type DailyCurrencyPriceCandle = {
    __typename?: 'DailyCurrencyPriceCandle';
    id: Scalars['ID'];
    currency: Currency;
    group: DailyPriceCandleGroup;
    from: Scalars['BigInt'];
    to: Scalars['BigInt'];
    open: Scalars['BigDecimal'];
    openRef: CurrencyPrice;
    close: Scalars['BigDecimal'];
    closeRef: CurrencyPrice;
    low: Scalars['BigDecimal'];
    lowRef: CurrencyPrice;
    high: Scalars['BigDecimal'];
    highRef: CurrencyPrice;
};
export declare type DailyCurrencyPriceCandle_Filter = {
    id?: Maybe<Scalars['ID']>;
    id_not?: Maybe<Scalars['ID']>;
    id_gt?: Maybe<Scalars['ID']>;
    id_lt?: Maybe<Scalars['ID']>;
    id_gte?: Maybe<Scalars['ID']>;
    id_lte?: Maybe<Scalars['ID']>;
    id_in?: Maybe<Array<Scalars['ID']>>;
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    currency?: Maybe<Scalars['String']>;
    currency_not?: Maybe<Scalars['String']>;
    currency_gt?: Maybe<Scalars['String']>;
    currency_lt?: Maybe<Scalars['String']>;
    currency_gte?: Maybe<Scalars['String']>;
    currency_lte?: Maybe<Scalars['String']>;
    currency_in?: Maybe<Array<Scalars['String']>>;
    currency_not_in?: Maybe<Array<Scalars['String']>>;
    currency_contains?: Maybe<Scalars['String']>;
    currency_not_contains?: Maybe<Scalars['String']>;
    currency_starts_with?: Maybe<Scalars['String']>;
    currency_not_starts_with?: Maybe<Scalars['String']>;
    currency_ends_with?: Maybe<Scalars['String']>;
    currency_not_ends_with?: Maybe<Scalars['String']>;
    group?: Maybe<Scalars['String']>;
    group_not?: Maybe<Scalars['String']>;
    group_gt?: Maybe<Scalars['String']>;
    group_lt?: Maybe<Scalars['String']>;
    group_gte?: Maybe<Scalars['String']>;
    group_lte?: Maybe<Scalars['String']>;
    group_in?: Maybe<Array<Scalars['String']>>;
    group_not_in?: Maybe<Array<Scalars['String']>>;
    group_contains?: Maybe<Scalars['String']>;
    group_not_contains?: Maybe<Scalars['String']>;
    group_starts_with?: Maybe<Scalars['String']>;
    group_not_starts_with?: Maybe<Scalars['String']>;
    group_ends_with?: Maybe<Scalars['String']>;
    group_not_ends_with?: Maybe<Scalars['String']>;
    from?: Maybe<Scalars['BigInt']>;
    from_not?: Maybe<Scalars['BigInt']>;
    from_gt?: Maybe<Scalars['BigInt']>;
    from_lt?: Maybe<Scalars['BigInt']>;
    from_gte?: Maybe<Scalars['BigInt']>;
    from_lte?: Maybe<Scalars['BigInt']>;
    from_in?: Maybe<Array<Scalars['BigInt']>>;
    from_not_in?: Maybe<Array<Scalars['BigInt']>>;
    to?: Maybe<Scalars['BigInt']>;
    to_not?: Maybe<Scalars['BigInt']>;
    to_gt?: Maybe<Scalars['BigInt']>;
    to_lt?: Maybe<Scalars['BigInt']>;
    to_gte?: Maybe<Scalars['BigInt']>;
    to_lte?: Maybe<Scalars['BigInt']>;
    to_in?: Maybe<Array<Scalars['BigInt']>>;
    to_not_in?: Maybe<Array<Scalars['BigInt']>>;
    open?: Maybe<Scalars['BigDecimal']>;
    open_not?: Maybe<Scalars['BigDecimal']>;
    open_gt?: Maybe<Scalars['BigDecimal']>;
    open_lt?: Maybe<Scalars['BigDecimal']>;
    open_gte?: Maybe<Scalars['BigDecimal']>;
    open_lte?: Maybe<Scalars['BigDecimal']>;
    open_in?: Maybe<Array<Scalars['BigDecimal']>>;
    open_not_in?: Maybe<Array<Scalars['BigDecimal']>>;
    openRef?: Maybe<Scalars['String']>;
    openRef_not?: Maybe<Scalars['String']>;
    openRef_gt?: Maybe<Scalars['String']>;
    openRef_lt?: Maybe<Scalars['String']>;
    openRef_gte?: Maybe<Scalars['String']>;
    openRef_lte?: Maybe<Scalars['String']>;
    openRef_in?: Maybe<Array<Scalars['String']>>;
    openRef_not_in?: Maybe<Array<Scalars['String']>>;
    openRef_contains?: Maybe<Scalars['String']>;
    openRef_not_contains?: Maybe<Scalars['String']>;
    openRef_starts_with?: Maybe<Scalars['String']>;
    openRef_not_starts_with?: Maybe<Scalars['String']>;
    openRef_ends_with?: Maybe<Scalars['String']>;
    openRef_not_ends_with?: Maybe<Scalars['String']>;
    close?: Maybe<Scalars['BigDecimal']>;
    close_not?: Maybe<Scalars['BigDecimal']>;
    close_gt?: Maybe<Scalars['BigDecimal']>;
    close_lt?: Maybe<Scalars['BigDecimal']>;
    close_gte?: Maybe<Scalars['BigDecimal']>;
    close_lte?: Maybe<Scalars['BigDecimal']>;
    close_in?: Maybe<Array<Scalars['BigDecimal']>>;
    close_not_in?: Maybe<Array<Scalars['BigDecimal']>>;
    closeRef?: Maybe<Scalars['String']>;
    closeRef_not?: Maybe<Scalars['String']>;
    closeRef_gt?: Maybe<Scalars['String']>;
    closeRef_lt?: Maybe<Scalars['String']>;
    closeRef_gte?: Maybe<Scalars['String']>;
    closeRef_lte?: Maybe<Scalars['String']>;
    closeRef_in?: Maybe<Array<Scalars['String']>>;
    closeRef_not_in?: Maybe<Array<Scalars['String']>>;
    closeRef_contains?: Maybe<Scalars['String']>;
    closeRef_not_contains?: Maybe<Scalars['String']>;
    closeRef_starts_with?: Maybe<Scalars['String']>;
    closeRef_not_starts_with?: Maybe<Scalars['String']>;
    closeRef_ends_with?: Maybe<Scalars['String']>;
    closeRef_not_ends_with?: Maybe<Scalars['String']>;
    low?: Maybe<Scalars['BigDecimal']>;
    low_not?: Maybe<Scalars['BigDecimal']>;
    low_gt?: Maybe<Scalars['BigDecimal']>;
    low_lt?: Maybe<Scalars['BigDecimal']>;
    low_gte?: Maybe<Scalars['BigDecimal']>;
    low_lte?: Maybe<Scalars['BigDecimal']>;
    low_in?: Maybe<Array<Scalars['BigDecimal']>>;
    low_not_in?: Maybe<Array<Scalars['BigDecimal']>>;
    lowRef?: Maybe<Scalars['String']>;
    lowRef_not?: Maybe<Scalars['String']>;
    lowRef_gt?: Maybe<Scalars['String']>;
    lowRef_lt?: Maybe<Scalars['String']>;
    lowRef_gte?: Maybe<Scalars['String']>;
    lowRef_lte?: Maybe<Scalars['String']>;
    lowRef_in?: Maybe<Array<Scalars['String']>>;
    lowRef_not_in?: Maybe<Array<Scalars['String']>>;
    lowRef_contains?: Maybe<Scalars['String']>;
    lowRef_not_contains?: Maybe<Scalars['String']>;
    lowRef_starts_with?: Maybe<Scalars['String']>;
    lowRef_not_starts_with?: Maybe<Scalars['String']>;
    lowRef_ends_with?: Maybe<Scalars['String']>;
    lowRef_not_ends_with?: Maybe<Scalars['String']>;
    high?: Maybe<Scalars['BigDecimal']>;
    high_not?: Maybe<Scalars['BigDecimal']>;
    high_gt?: Maybe<Scalars['BigDecimal']>;
    high_lt?: Maybe<Scalars['BigDecimal']>;
    high_gte?: Maybe<Scalars['BigDecimal']>;
    high_lte?: Maybe<Scalars['BigDecimal']>;
    high_in?: Maybe<Array<Scalars['BigDecimal']>>;
    high_not_in?: Maybe<Array<Scalars['BigDecimal']>>;
    highRef?: Maybe<Scalars['String']>;
    highRef_not?: Maybe<Scalars['String']>;
    highRef_gt?: Maybe<Scalars['String']>;
    highRef_lt?: Maybe<Scalars['String']>;
    highRef_gte?: Maybe<Scalars['String']>;
    highRef_lte?: Maybe<Scalars['String']>;
    highRef_in?: Maybe<Array<Scalars['String']>>;
    highRef_not_in?: Maybe<Array<Scalars['String']>>;
    highRef_contains?: Maybe<Scalars['String']>;
    highRef_not_contains?: Maybe<Scalars['String']>;
    highRef_starts_with?: Maybe<Scalars['String']>;
    highRef_not_starts_with?: Maybe<Scalars['String']>;
    highRef_ends_with?: Maybe<Scalars['String']>;
    highRef_not_ends_with?: Maybe<Scalars['String']>;
};
export declare enum DailyCurrencyPriceCandle_OrderBy {
    Id = "id",
    Currency = "currency",
    Group = "group",
    From = "from",
    To = "to",
    Open = "open",
    OpenRef = "openRef",
    Close = "close",
    CloseRef = "closeRef",
    Low = "low",
    LowRef = "lowRef",
    High = "high",
    HighRef = "highRef"
}
export declare type DailyFundState = PeriodicFundStateInterface & {
    __typename?: 'DailyFundState';
    id: Scalars['ID'];
    fund: Fund;
    start: Scalars['BigInt'];
    end: Scalars['BigInt'];
    first: FundState;
    last: FundState;
};
export declare type DailyFundState_Filter = {
    id?: Maybe<Scalars['ID']>;
    id_not?: Maybe<Scalars['ID']>;
    id_gt?: Maybe<Scalars['ID']>;
    id_lt?: Maybe<Scalars['ID']>;
    id_gte?: Maybe<Scalars['ID']>;
    id_lte?: Maybe<Scalars['ID']>;
    id_in?: Maybe<Array<Scalars['ID']>>;
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    fund?: Maybe<Scalars['String']>;
    fund_not?: Maybe<Scalars['String']>;
    fund_gt?: Maybe<Scalars['String']>;
    fund_lt?: Maybe<Scalars['String']>;
    fund_gte?: Maybe<Scalars['String']>;
    fund_lte?: Maybe<Scalars['String']>;
    fund_in?: Maybe<Array<Scalars['String']>>;
    fund_not_in?: Maybe<Array<Scalars['String']>>;
    fund_contains?: Maybe<Scalars['String']>;
    fund_not_contains?: Maybe<Scalars['String']>;
    fund_starts_with?: Maybe<Scalars['String']>;
    fund_not_starts_with?: Maybe<Scalars['String']>;
    fund_ends_with?: Maybe<Scalars['String']>;
    fund_not_ends_with?: Maybe<Scalars['String']>;
    start?: Maybe<Scalars['BigInt']>;
    start_not?: Maybe<Scalars['BigInt']>;
    start_gt?: Maybe<Scalars['BigInt']>;
    start_lt?: Maybe<Scalars['BigInt']>;
    start_gte?: Maybe<Scalars['BigInt']>;
    start_lte?: Maybe<Scalars['BigInt']>;
    start_in?: Maybe<Array<Scalars['BigInt']>>;
    start_not_in?: Maybe<Array<Scalars['BigInt']>>;
    end?: Maybe<Scalars['BigInt']>;
    end_not?: Maybe<Scalars['BigInt']>;
    end_gt?: Maybe<Scalars['BigInt']>;
    end_lt?: Maybe<Scalars['BigInt']>;
    end_gte?: Maybe<Scalars['BigInt']>;
    end_lte?: Maybe<Scalars['BigInt']>;
    end_in?: Maybe<Array<Scalars['BigInt']>>;
    end_not_in?: Maybe<Array<Scalars['BigInt']>>;
    first?: Maybe<Scalars['String']>;
    first_not?: Maybe<Scalars['String']>;
    first_gt?: Maybe<Scalars['String']>;
    first_lt?: Maybe<Scalars['String']>;
    first_gte?: Maybe<Scalars['String']>;
    first_lte?: Maybe<Scalars['String']>;
    first_in?: Maybe<Array<Scalars['String']>>;
    first_not_in?: Maybe<Array<Scalars['String']>>;
    first_contains?: Maybe<Scalars['String']>;
    first_not_contains?: Maybe<Scalars['String']>;
    first_starts_with?: Maybe<Scalars['String']>;
    first_not_starts_with?: Maybe<Scalars['String']>;
    first_ends_with?: Maybe<Scalars['String']>;
    first_not_ends_with?: Maybe<Scalars['String']>;
    last?: Maybe<Scalars['String']>;
    last_not?: Maybe<Scalars['String']>;
    last_gt?: Maybe<Scalars['String']>;
    last_lt?: Maybe<Scalars['String']>;
    last_gte?: Maybe<Scalars['String']>;
    last_lte?: Maybe<Scalars['String']>;
    last_in?: Maybe<Array<Scalars['String']>>;
    last_not_in?: Maybe<Array<Scalars['String']>>;
    last_contains?: Maybe<Scalars['String']>;
    last_not_contains?: Maybe<Scalars['String']>;
    last_starts_with?: Maybe<Scalars['String']>;
    last_not_starts_with?: Maybe<Scalars['String']>;
    last_ends_with?: Maybe<Scalars['String']>;
    last_not_ends_with?: Maybe<Scalars['String']>;
};
export declare enum DailyFundState_OrderBy {
    Id = "id",
    Fund = "fund",
    Start = "start",
    End = "end",
    First = "first",
    Last = "last"
}
export declare type DailyPriceCandleGroup = {
    __typename?: 'DailyPriceCandleGroup';
    id: Scalars['ID'];
    from: Scalars['BigInt'];
    to: Scalars['BigInt'];
    assetCandles: Array<DailyAssetPriceCandle>;
    currencyCandles: Array<DailyCurrencyPriceCandle>;
};
export declare type DailyPriceCandleGroupAssetCandlesArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<DailyAssetPriceCandle_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<DailyAssetPriceCandle_Filter>;
};
export declare type DailyPriceCandleGroupCurrencyCandlesArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<DailyCurrencyPriceCandle_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<DailyCurrencyPriceCandle_Filter>;
};
export declare type DailyPriceCandleGroup_Filter = {
    id?: Maybe<Scalars['ID']>;
    id_not?: Maybe<Scalars['ID']>;
    id_gt?: Maybe<Scalars['ID']>;
    id_lt?: Maybe<Scalars['ID']>;
    id_gte?: Maybe<Scalars['ID']>;
    id_lte?: Maybe<Scalars['ID']>;
    id_in?: Maybe<Array<Scalars['ID']>>;
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    from?: Maybe<Scalars['BigInt']>;
    from_not?: Maybe<Scalars['BigInt']>;
    from_gt?: Maybe<Scalars['BigInt']>;
    from_lt?: Maybe<Scalars['BigInt']>;
    from_gte?: Maybe<Scalars['BigInt']>;
    from_lte?: Maybe<Scalars['BigInt']>;
    from_in?: Maybe<Array<Scalars['BigInt']>>;
    from_not_in?: Maybe<Array<Scalars['BigInt']>>;
    to?: Maybe<Scalars['BigInt']>;
    to_not?: Maybe<Scalars['BigInt']>;
    to_gt?: Maybe<Scalars['BigInt']>;
    to_lt?: Maybe<Scalars['BigInt']>;
    to_gte?: Maybe<Scalars['BigInt']>;
    to_lte?: Maybe<Scalars['BigInt']>;
    to_in?: Maybe<Array<Scalars['BigInt']>>;
    to_not_in?: Maybe<Array<Scalars['BigInt']>>;
};
export declare enum DailyPriceCandleGroup_OrderBy {
    Id = "id",
    From = "from",
    To = "to",
    AssetCandles = "assetCandles",
    CurrencyCandles = "currencyCandles"
}
export declare type DerivativeAddedEvent = EventInterface & NetworkEventInterface & {
    __typename?: 'DerivativeAddedEvent';
    id: Scalars['ID'];
    timestamp: Scalars['BigInt'];
    transaction: Transaction;
    derivative: Asset;
    priceFeed: Scalars['String'];
};
export declare type DerivativeAddedEvent_Filter = {
    id?: Maybe<Scalars['ID']>;
    id_not?: Maybe<Scalars['ID']>;
    id_gt?: Maybe<Scalars['ID']>;
    id_lt?: Maybe<Scalars['ID']>;
    id_gte?: Maybe<Scalars['ID']>;
    id_lte?: Maybe<Scalars['ID']>;
    id_in?: Maybe<Array<Scalars['ID']>>;
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    timestamp?: Maybe<Scalars['BigInt']>;
    timestamp_not?: Maybe<Scalars['BigInt']>;
    timestamp_gt?: Maybe<Scalars['BigInt']>;
    timestamp_lt?: Maybe<Scalars['BigInt']>;
    timestamp_gte?: Maybe<Scalars['BigInt']>;
    timestamp_lte?: Maybe<Scalars['BigInt']>;
    timestamp_in?: Maybe<Array<Scalars['BigInt']>>;
    timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;
    transaction?: Maybe<Scalars['String']>;
    transaction_not?: Maybe<Scalars['String']>;
    transaction_gt?: Maybe<Scalars['String']>;
    transaction_lt?: Maybe<Scalars['String']>;
    transaction_gte?: Maybe<Scalars['String']>;
    transaction_lte?: Maybe<Scalars['String']>;
    transaction_in?: Maybe<Array<Scalars['String']>>;
    transaction_not_in?: Maybe<Array<Scalars['String']>>;
    transaction_contains?: Maybe<Scalars['String']>;
    transaction_not_contains?: Maybe<Scalars['String']>;
    transaction_starts_with?: Maybe<Scalars['String']>;
    transaction_not_starts_with?: Maybe<Scalars['String']>;
    transaction_ends_with?: Maybe<Scalars['String']>;
    transaction_not_ends_with?: Maybe<Scalars['String']>;
    derivative?: Maybe<Scalars['String']>;
    derivative_not?: Maybe<Scalars['String']>;
    derivative_gt?: Maybe<Scalars['String']>;
    derivative_lt?: Maybe<Scalars['String']>;
    derivative_gte?: Maybe<Scalars['String']>;
    derivative_lte?: Maybe<Scalars['String']>;
    derivative_in?: Maybe<Array<Scalars['String']>>;
    derivative_not_in?: Maybe<Array<Scalars['String']>>;
    derivative_contains?: Maybe<Scalars['String']>;
    derivative_not_contains?: Maybe<Scalars['String']>;
    derivative_starts_with?: Maybe<Scalars['String']>;
    derivative_not_starts_with?: Maybe<Scalars['String']>;
    derivative_ends_with?: Maybe<Scalars['String']>;
    derivative_not_ends_with?: Maybe<Scalars['String']>;
    priceFeed?: Maybe<Scalars['String']>;
    priceFeed_not?: Maybe<Scalars['String']>;
    priceFeed_gt?: Maybe<Scalars['String']>;
    priceFeed_lt?: Maybe<Scalars['String']>;
    priceFeed_gte?: Maybe<Scalars['String']>;
    priceFeed_lte?: Maybe<Scalars['String']>;
    priceFeed_in?: Maybe<Array<Scalars['String']>>;
    priceFeed_not_in?: Maybe<Array<Scalars['String']>>;
    priceFeed_contains?: Maybe<Scalars['String']>;
    priceFeed_not_contains?: Maybe<Scalars['String']>;
    priceFeed_starts_with?: Maybe<Scalars['String']>;
    priceFeed_not_starts_with?: Maybe<Scalars['String']>;
    priceFeed_ends_with?: Maybe<Scalars['String']>;
    priceFeed_not_ends_with?: Maybe<Scalars['String']>;
};
export declare enum DerivativeAddedEvent_OrderBy {
    Id = "id",
    Timestamp = "timestamp",
    Transaction = "transaction",
    Derivative = "derivative",
    PriceFeed = "priceFeed"
}
export declare type DerivativeRemovedEvent = EventInterface & NetworkEventInterface & {
    __typename?: 'DerivativeRemovedEvent';
    id: Scalars['ID'];
    timestamp: Scalars['BigInt'];
    transaction: Transaction;
    derivative: Asset;
};
export declare type DerivativeRemovedEvent_Filter = {
    id?: Maybe<Scalars['ID']>;
    id_not?: Maybe<Scalars['ID']>;
    id_gt?: Maybe<Scalars['ID']>;
    id_lt?: Maybe<Scalars['ID']>;
    id_gte?: Maybe<Scalars['ID']>;
    id_lte?: Maybe<Scalars['ID']>;
    id_in?: Maybe<Array<Scalars['ID']>>;
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    timestamp?: Maybe<Scalars['BigInt']>;
    timestamp_not?: Maybe<Scalars['BigInt']>;
    timestamp_gt?: Maybe<Scalars['BigInt']>;
    timestamp_lt?: Maybe<Scalars['BigInt']>;
    timestamp_gte?: Maybe<Scalars['BigInt']>;
    timestamp_lte?: Maybe<Scalars['BigInt']>;
    timestamp_in?: Maybe<Array<Scalars['BigInt']>>;
    timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;
    transaction?: Maybe<Scalars['String']>;
    transaction_not?: Maybe<Scalars['String']>;
    transaction_gt?: Maybe<Scalars['String']>;
    transaction_lt?: Maybe<Scalars['String']>;
    transaction_gte?: Maybe<Scalars['String']>;
    transaction_lte?: Maybe<Scalars['String']>;
    transaction_in?: Maybe<Array<Scalars['String']>>;
    transaction_not_in?: Maybe<Array<Scalars['String']>>;
    transaction_contains?: Maybe<Scalars['String']>;
    transaction_not_contains?: Maybe<Scalars['String']>;
    transaction_starts_with?: Maybe<Scalars['String']>;
    transaction_not_starts_with?: Maybe<Scalars['String']>;
    transaction_ends_with?: Maybe<Scalars['String']>;
    transaction_not_ends_with?: Maybe<Scalars['String']>;
    derivative?: Maybe<Scalars['String']>;
    derivative_not?: Maybe<Scalars['String']>;
    derivative_gt?: Maybe<Scalars['String']>;
    derivative_lt?: Maybe<Scalars['String']>;
    derivative_gte?: Maybe<Scalars['String']>;
    derivative_lte?: Maybe<Scalars['String']>;
    derivative_in?: Maybe<Array<Scalars['String']>>;
    derivative_not_in?: Maybe<Array<Scalars['String']>>;
    derivative_contains?: Maybe<Scalars['String']>;
    derivative_not_contains?: Maybe<Scalars['String']>;
    derivative_starts_with?: Maybe<Scalars['String']>;
    derivative_not_starts_with?: Maybe<Scalars['String']>;
    derivative_ends_with?: Maybe<Scalars['String']>;
    derivative_not_ends_with?: Maybe<Scalars['String']>;
};
export declare enum DerivativeRemovedEvent_OrderBy {
    Id = "id",
    Timestamp = "timestamp",
    Transaction = "transaction",
    Derivative = "derivative"
}
export declare enum DerivativeType {
    Aave = "Aave",
    Alpha = "Alpha",
    Chai = "Chai",
    Compound = "Compound",
    CurvePool = "CurvePool",
    Idle = "Idle",
    Stakehound = "Stakehound",
    Synthetix = "Synthetix",
    UniswapPool = "UniswapPool",
    Yearn = "Yearn"
}
export declare type DerivativeUpdatedEvent = EventInterface & NetworkEventInterface & {
    __typename?: 'DerivativeUpdatedEvent';
    id: Scalars['ID'];
    timestamp: Scalars['BigInt'];
    transaction: Transaction;
    derivative: Asset;
    prevPriceFeed: Scalars['String'];
    nextPriceFeed: Scalars['String'];
};
export declare type DerivativeUpdatedEvent_Filter = {
    id?: Maybe<Scalars['ID']>;
    id_not?: Maybe<Scalars['ID']>;
    id_gt?: Maybe<Scalars['ID']>;
    id_lt?: Maybe<Scalars['ID']>;
    id_gte?: Maybe<Scalars['ID']>;
    id_lte?: Maybe<Scalars['ID']>;
    id_in?: Maybe<Array<Scalars['ID']>>;
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    timestamp?: Maybe<Scalars['BigInt']>;
    timestamp_not?: Maybe<Scalars['BigInt']>;
    timestamp_gt?: Maybe<Scalars['BigInt']>;
    timestamp_lt?: Maybe<Scalars['BigInt']>;
    timestamp_gte?: Maybe<Scalars['BigInt']>;
    timestamp_lte?: Maybe<Scalars['BigInt']>;
    timestamp_in?: Maybe<Array<Scalars['BigInt']>>;
    timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;
    transaction?: Maybe<Scalars['String']>;
    transaction_not?: Maybe<Scalars['String']>;
    transaction_gt?: Maybe<Scalars['String']>;
    transaction_lt?: Maybe<Scalars['String']>;
    transaction_gte?: Maybe<Scalars['String']>;
    transaction_lte?: Maybe<Scalars['String']>;
    transaction_in?: Maybe<Array<Scalars['String']>>;
    transaction_not_in?: Maybe<Array<Scalars['String']>>;
    transaction_contains?: Maybe<Scalars['String']>;
    transaction_not_contains?: Maybe<Scalars['String']>;
    transaction_starts_with?: Maybe<Scalars['String']>;
    transaction_not_starts_with?: Maybe<Scalars['String']>;
    transaction_ends_with?: Maybe<Scalars['String']>;
    transaction_not_ends_with?: Maybe<Scalars['String']>;
    derivative?: Maybe<Scalars['String']>;
    derivative_not?: Maybe<Scalars['String']>;
    derivative_gt?: Maybe<Scalars['String']>;
    derivative_lt?: Maybe<Scalars['String']>;
    derivative_gte?: Maybe<Scalars['String']>;
    derivative_lte?: Maybe<Scalars['String']>;
    derivative_in?: Maybe<Array<Scalars['String']>>;
    derivative_not_in?: Maybe<Array<Scalars['String']>>;
    derivative_contains?: Maybe<Scalars['String']>;
    derivative_not_contains?: Maybe<Scalars['String']>;
    derivative_starts_with?: Maybe<Scalars['String']>;
    derivative_not_starts_with?: Maybe<Scalars['String']>;
    derivative_ends_with?: Maybe<Scalars['String']>;
    derivative_not_ends_with?: Maybe<Scalars['String']>;
    prevPriceFeed?: Maybe<Scalars['String']>;
    prevPriceFeed_not?: Maybe<Scalars['String']>;
    prevPriceFeed_gt?: Maybe<Scalars['String']>;
    prevPriceFeed_lt?: Maybe<Scalars['String']>;
    prevPriceFeed_gte?: Maybe<Scalars['String']>;
    prevPriceFeed_lte?: Maybe<Scalars['String']>;
    prevPriceFeed_in?: Maybe<Array<Scalars['String']>>;
    prevPriceFeed_not_in?: Maybe<Array<Scalars['String']>>;
    prevPriceFeed_contains?: Maybe<Scalars['String']>;
    prevPriceFeed_not_contains?: Maybe<Scalars['String']>;
    prevPriceFeed_starts_with?: Maybe<Scalars['String']>;
    prevPriceFeed_not_starts_with?: Maybe<Scalars['String']>;
    prevPriceFeed_ends_with?: Maybe<Scalars['String']>;
    prevPriceFeed_not_ends_with?: Maybe<Scalars['String']>;
    nextPriceFeed?: Maybe<Scalars['String']>;
    nextPriceFeed_not?: Maybe<Scalars['String']>;
    nextPriceFeed_gt?: Maybe<Scalars['String']>;
    nextPriceFeed_lt?: Maybe<Scalars['String']>;
    nextPriceFeed_gte?: Maybe<Scalars['String']>;
    nextPriceFeed_lte?: Maybe<Scalars['String']>;
    nextPriceFeed_in?: Maybe<Array<Scalars['String']>>;
    nextPriceFeed_not_in?: Maybe<Array<Scalars['String']>>;
    nextPriceFeed_contains?: Maybe<Scalars['String']>;
    nextPriceFeed_not_contains?: Maybe<Scalars['String']>;
    nextPriceFeed_starts_with?: Maybe<Scalars['String']>;
    nextPriceFeed_not_starts_with?: Maybe<Scalars['String']>;
    nextPriceFeed_ends_with?: Maybe<Scalars['String']>;
    nextPriceFeed_not_ends_with?: Maybe<Scalars['String']>;
};
export declare enum DerivativeUpdatedEvent_OrderBy {
    Id = "id",
    Timestamp = "timestamp",
    Transaction = "transaction",
    Derivative = "derivative",
    PrevPriceFeed = "prevPriceFeed",
    NextPriceFeed = "nextPriceFeed"
}
export declare type DispatcherOwnershipTransferredEvent = EventInterface & NetworkEventInterface & {
    __typename?: 'DispatcherOwnershipTransferredEvent';
    id: Scalars['ID'];
    timestamp: Scalars['BigInt'];
    transaction: Transaction;
    prevOwner: Scalars['String'];
    nextOwner: Scalars['String'];
};
export declare type DispatcherOwnershipTransferredEvent_Filter = {
    id?: Maybe<Scalars['ID']>;
    id_not?: Maybe<Scalars['ID']>;
    id_gt?: Maybe<Scalars['ID']>;
    id_lt?: Maybe<Scalars['ID']>;
    id_gte?: Maybe<Scalars['ID']>;
    id_lte?: Maybe<Scalars['ID']>;
    id_in?: Maybe<Array<Scalars['ID']>>;
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    timestamp?: Maybe<Scalars['BigInt']>;
    timestamp_not?: Maybe<Scalars['BigInt']>;
    timestamp_gt?: Maybe<Scalars['BigInt']>;
    timestamp_lt?: Maybe<Scalars['BigInt']>;
    timestamp_gte?: Maybe<Scalars['BigInt']>;
    timestamp_lte?: Maybe<Scalars['BigInt']>;
    timestamp_in?: Maybe<Array<Scalars['BigInt']>>;
    timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;
    transaction?: Maybe<Scalars['String']>;
    transaction_not?: Maybe<Scalars['String']>;
    transaction_gt?: Maybe<Scalars['String']>;
    transaction_lt?: Maybe<Scalars['String']>;
    transaction_gte?: Maybe<Scalars['String']>;
    transaction_lte?: Maybe<Scalars['String']>;
    transaction_in?: Maybe<Array<Scalars['String']>>;
    transaction_not_in?: Maybe<Array<Scalars['String']>>;
    transaction_contains?: Maybe<Scalars['String']>;
    transaction_not_contains?: Maybe<Scalars['String']>;
    transaction_starts_with?: Maybe<Scalars['String']>;
    transaction_not_starts_with?: Maybe<Scalars['String']>;
    transaction_ends_with?: Maybe<Scalars['String']>;
    transaction_not_ends_with?: Maybe<Scalars['String']>;
    prevOwner?: Maybe<Scalars['String']>;
    prevOwner_not?: Maybe<Scalars['String']>;
    prevOwner_gt?: Maybe<Scalars['String']>;
    prevOwner_lt?: Maybe<Scalars['String']>;
    prevOwner_gte?: Maybe<Scalars['String']>;
    prevOwner_lte?: Maybe<Scalars['String']>;
    prevOwner_in?: Maybe<Array<Scalars['String']>>;
    prevOwner_not_in?: Maybe<Array<Scalars['String']>>;
    prevOwner_contains?: Maybe<Scalars['String']>;
    prevOwner_not_contains?: Maybe<Scalars['String']>;
    prevOwner_starts_with?: Maybe<Scalars['String']>;
    prevOwner_not_starts_with?: Maybe<Scalars['String']>;
    prevOwner_ends_with?: Maybe<Scalars['String']>;
    prevOwner_not_ends_with?: Maybe<Scalars['String']>;
    nextOwner?: Maybe<Scalars['String']>;
    nextOwner_not?: Maybe<Scalars['String']>;
    nextOwner_gt?: Maybe<Scalars['String']>;
    nextOwner_lt?: Maybe<Scalars['String']>;
    nextOwner_gte?: Maybe<Scalars['String']>;
    nextOwner_lte?: Maybe<Scalars['String']>;
    nextOwner_in?: Maybe<Array<Scalars['String']>>;
    nextOwner_not_in?: Maybe<Array<Scalars['String']>>;
    nextOwner_contains?: Maybe<Scalars['String']>;
    nextOwner_not_contains?: Maybe<Scalars['String']>;
    nextOwner_starts_with?: Maybe<Scalars['String']>;
    nextOwner_not_starts_with?: Maybe<Scalars['String']>;
    nextOwner_ends_with?: Maybe<Scalars['String']>;
    nextOwner_not_ends_with?: Maybe<Scalars['String']>;
};
export declare enum DispatcherOwnershipTransferredEvent_OrderBy {
    Id = "id",
    Timestamp = "timestamp",
    Transaction = "transaction",
    PrevOwner = "prevOwner",
    NextOwner = "nextOwner"
}
export declare type EntranceRateBurnFeeSetting = FeeSettingInterface & {
    __typename?: 'EntranceRateBurnFeeSetting';
    id: Scalars['ID'];
    fee: Fee;
    comptroller: ComptrollerProxy;
    rate: Scalars['BigDecimal'];
    timestamp: Scalars['BigInt'];
    events: Array<FundEventInterface>;
};
export declare type EntranceRateBurnFeeSettingEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<FundEventInterface_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<FundEventInterface_Filter>;
};
export declare type EntranceRateBurnFeeSetting_Filter = {
    id?: Maybe<Scalars['ID']>;
    id_not?: Maybe<Scalars['ID']>;
    id_gt?: Maybe<Scalars['ID']>;
    id_lt?: Maybe<Scalars['ID']>;
    id_gte?: Maybe<Scalars['ID']>;
    id_lte?: Maybe<Scalars['ID']>;
    id_in?: Maybe<Array<Scalars['ID']>>;
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    fee?: Maybe<Scalars['String']>;
    fee_not?: Maybe<Scalars['String']>;
    fee_gt?: Maybe<Scalars['String']>;
    fee_lt?: Maybe<Scalars['String']>;
    fee_gte?: Maybe<Scalars['String']>;
    fee_lte?: Maybe<Scalars['String']>;
    fee_in?: Maybe<Array<Scalars['String']>>;
    fee_not_in?: Maybe<Array<Scalars['String']>>;
    fee_contains?: Maybe<Scalars['String']>;
    fee_not_contains?: Maybe<Scalars['String']>;
    fee_starts_with?: Maybe<Scalars['String']>;
    fee_not_starts_with?: Maybe<Scalars['String']>;
    fee_ends_with?: Maybe<Scalars['String']>;
    fee_not_ends_with?: Maybe<Scalars['String']>;
    comptroller?: Maybe<Scalars['String']>;
    comptroller_not?: Maybe<Scalars['String']>;
    comptroller_gt?: Maybe<Scalars['String']>;
    comptroller_lt?: Maybe<Scalars['String']>;
    comptroller_gte?: Maybe<Scalars['String']>;
    comptroller_lte?: Maybe<Scalars['String']>;
    comptroller_in?: Maybe<Array<Scalars['String']>>;
    comptroller_not_in?: Maybe<Array<Scalars['String']>>;
    comptroller_contains?: Maybe<Scalars['String']>;
    comptroller_not_contains?: Maybe<Scalars['String']>;
    comptroller_starts_with?: Maybe<Scalars['String']>;
    comptroller_not_starts_with?: Maybe<Scalars['String']>;
    comptroller_ends_with?: Maybe<Scalars['String']>;
    comptroller_not_ends_with?: Maybe<Scalars['String']>;
    rate?: Maybe<Scalars['BigDecimal']>;
    rate_not?: Maybe<Scalars['BigDecimal']>;
    rate_gt?: Maybe<Scalars['BigDecimal']>;
    rate_lt?: Maybe<Scalars['BigDecimal']>;
    rate_gte?: Maybe<Scalars['BigDecimal']>;
    rate_lte?: Maybe<Scalars['BigDecimal']>;
    rate_in?: Maybe<Array<Scalars['BigDecimal']>>;
    rate_not_in?: Maybe<Array<Scalars['BigDecimal']>>;
    timestamp?: Maybe<Scalars['BigInt']>;
    timestamp_not?: Maybe<Scalars['BigInt']>;
    timestamp_gt?: Maybe<Scalars['BigInt']>;
    timestamp_lt?: Maybe<Scalars['BigInt']>;
    timestamp_gte?: Maybe<Scalars['BigInt']>;
    timestamp_lte?: Maybe<Scalars['BigInt']>;
    timestamp_in?: Maybe<Array<Scalars['BigInt']>>;
    timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;
    events?: Maybe<Array<Scalars['String']>>;
    events_not?: Maybe<Array<Scalars['String']>>;
    events_contains?: Maybe<Array<Scalars['String']>>;
    events_not_contains?: Maybe<Array<Scalars['String']>>;
};
export declare enum EntranceRateBurnFeeSetting_OrderBy {
    Id = "id",
    Fee = "fee",
    Comptroller = "comptroller",
    Rate = "rate",
    Timestamp = "timestamp",
    Events = "events"
}
export declare type EntranceRateBurnFeeSettingsAddedEvent = EventInterface & ComptrollerEventInterface & {
    __typename?: 'EntranceRateBurnFeeSettingsAddedEvent';
    id: Scalars['ID'];
    comptroller: ComptrollerProxy;
    timestamp: Scalars['BigInt'];
    transaction: Transaction;
    rate: Scalars['BigDecimal'];
};
export declare type EntranceRateBurnFeeSettingsAddedEvent_Filter = {
    id?: Maybe<Scalars['ID']>;
    id_not?: Maybe<Scalars['ID']>;
    id_gt?: Maybe<Scalars['ID']>;
    id_lt?: Maybe<Scalars['ID']>;
    id_gte?: Maybe<Scalars['ID']>;
    id_lte?: Maybe<Scalars['ID']>;
    id_in?: Maybe<Array<Scalars['ID']>>;
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    comptroller?: Maybe<Scalars['String']>;
    comptroller_not?: Maybe<Scalars['String']>;
    comptroller_gt?: Maybe<Scalars['String']>;
    comptroller_lt?: Maybe<Scalars['String']>;
    comptroller_gte?: Maybe<Scalars['String']>;
    comptroller_lte?: Maybe<Scalars['String']>;
    comptroller_in?: Maybe<Array<Scalars['String']>>;
    comptroller_not_in?: Maybe<Array<Scalars['String']>>;
    comptroller_contains?: Maybe<Scalars['String']>;
    comptroller_not_contains?: Maybe<Scalars['String']>;
    comptroller_starts_with?: Maybe<Scalars['String']>;
    comptroller_not_starts_with?: Maybe<Scalars['String']>;
    comptroller_ends_with?: Maybe<Scalars['String']>;
    comptroller_not_ends_with?: Maybe<Scalars['String']>;
    timestamp?: Maybe<Scalars['BigInt']>;
    timestamp_not?: Maybe<Scalars['BigInt']>;
    timestamp_gt?: Maybe<Scalars['BigInt']>;
    timestamp_lt?: Maybe<Scalars['BigInt']>;
    timestamp_gte?: Maybe<Scalars['BigInt']>;
    timestamp_lte?: Maybe<Scalars['BigInt']>;
    timestamp_in?: Maybe<Array<Scalars['BigInt']>>;
    timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;
    transaction?: Maybe<Scalars['String']>;
    transaction_not?: Maybe<Scalars['String']>;
    transaction_gt?: Maybe<Scalars['String']>;
    transaction_lt?: Maybe<Scalars['String']>;
    transaction_gte?: Maybe<Scalars['String']>;
    transaction_lte?: Maybe<Scalars['String']>;
    transaction_in?: Maybe<Array<Scalars['String']>>;
    transaction_not_in?: Maybe<Array<Scalars['String']>>;
    transaction_contains?: Maybe<Scalars['String']>;
    transaction_not_contains?: Maybe<Scalars['String']>;
    transaction_starts_with?: Maybe<Scalars['String']>;
    transaction_not_starts_with?: Maybe<Scalars['String']>;
    transaction_ends_with?: Maybe<Scalars['String']>;
    transaction_not_ends_with?: Maybe<Scalars['String']>;
    rate?: Maybe<Scalars['BigDecimal']>;
    rate_not?: Maybe<Scalars['BigDecimal']>;
    rate_gt?: Maybe<Scalars['BigDecimal']>;
    rate_lt?: Maybe<Scalars['BigDecimal']>;
    rate_gte?: Maybe<Scalars['BigDecimal']>;
    rate_lte?: Maybe<Scalars['BigDecimal']>;
    rate_in?: Maybe<Array<Scalars['BigDecimal']>>;
    rate_not_in?: Maybe<Array<Scalars['BigDecimal']>>;
};
export declare enum EntranceRateBurnFeeSettingsAddedEvent_OrderBy {
    Id = "id",
    Comptroller = "comptroller",
    Timestamp = "timestamp",
    Transaction = "transaction",
    Rate = "rate"
}
export declare type EntranceRateBurnFeeSettledEvent = EventInterface & FundEventInterface & {
    __typename?: 'EntranceRateBurnFeeSettledEvent';
    id: Scalars['ID'];
    fund: Fund;
    timestamp: Scalars['BigInt'];
    transaction: Transaction;
    comptrollerProxy: Scalars['String'];
    sharesQuantity: Scalars['BigDecimal'];
    payer: Account;
};
export declare type EntranceRateBurnFeeSettledEvent_Filter = {
    id?: Maybe<Scalars['ID']>;
    id_not?: Maybe<Scalars['ID']>;
    id_gt?: Maybe<Scalars['ID']>;
    id_lt?: Maybe<Scalars['ID']>;
    id_gte?: Maybe<Scalars['ID']>;
    id_lte?: Maybe<Scalars['ID']>;
    id_in?: Maybe<Array<Scalars['ID']>>;
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    fund?: Maybe<Scalars['String']>;
    fund_not?: Maybe<Scalars['String']>;
    fund_gt?: Maybe<Scalars['String']>;
    fund_lt?: Maybe<Scalars['String']>;
    fund_gte?: Maybe<Scalars['String']>;
    fund_lte?: Maybe<Scalars['String']>;
    fund_in?: Maybe<Array<Scalars['String']>>;
    fund_not_in?: Maybe<Array<Scalars['String']>>;
    fund_contains?: Maybe<Scalars['String']>;
    fund_not_contains?: Maybe<Scalars['String']>;
    fund_starts_with?: Maybe<Scalars['String']>;
    fund_not_starts_with?: Maybe<Scalars['String']>;
    fund_ends_with?: Maybe<Scalars['String']>;
    fund_not_ends_with?: Maybe<Scalars['String']>;
    timestamp?: Maybe<Scalars['BigInt']>;
    timestamp_not?: Maybe<Scalars['BigInt']>;
    timestamp_gt?: Maybe<Scalars['BigInt']>;
    timestamp_lt?: Maybe<Scalars['BigInt']>;
    timestamp_gte?: Maybe<Scalars['BigInt']>;
    timestamp_lte?: Maybe<Scalars['BigInt']>;
    timestamp_in?: Maybe<Array<Scalars['BigInt']>>;
    timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;
    transaction?: Maybe<Scalars['String']>;
    transaction_not?: Maybe<Scalars['String']>;
    transaction_gt?: Maybe<Scalars['String']>;
    transaction_lt?: Maybe<Scalars['String']>;
    transaction_gte?: Maybe<Scalars['String']>;
    transaction_lte?: Maybe<Scalars['String']>;
    transaction_in?: Maybe<Array<Scalars['String']>>;
    transaction_not_in?: Maybe<Array<Scalars['String']>>;
    transaction_contains?: Maybe<Scalars['String']>;
    transaction_not_contains?: Maybe<Scalars['String']>;
    transaction_starts_with?: Maybe<Scalars['String']>;
    transaction_not_starts_with?: Maybe<Scalars['String']>;
    transaction_ends_with?: Maybe<Scalars['String']>;
    transaction_not_ends_with?: Maybe<Scalars['String']>;
    comptrollerProxy?: Maybe<Scalars['String']>;
    comptrollerProxy_not?: Maybe<Scalars['String']>;
    comptrollerProxy_gt?: Maybe<Scalars['String']>;
    comptrollerProxy_lt?: Maybe<Scalars['String']>;
    comptrollerProxy_gte?: Maybe<Scalars['String']>;
    comptrollerProxy_lte?: Maybe<Scalars['String']>;
    comptrollerProxy_in?: Maybe<Array<Scalars['String']>>;
    comptrollerProxy_not_in?: Maybe<Array<Scalars['String']>>;
    comptrollerProxy_contains?: Maybe<Scalars['String']>;
    comptrollerProxy_not_contains?: Maybe<Scalars['String']>;
    comptrollerProxy_starts_with?: Maybe<Scalars['String']>;
    comptrollerProxy_not_starts_with?: Maybe<Scalars['String']>;
    comptrollerProxy_ends_with?: Maybe<Scalars['String']>;
    comptrollerProxy_not_ends_with?: Maybe<Scalars['String']>;
    sharesQuantity?: Maybe<Scalars['BigDecimal']>;
    sharesQuantity_not?: Maybe<Scalars['BigDecimal']>;
    sharesQuantity_gt?: Maybe<Scalars['BigDecimal']>;
    sharesQuantity_lt?: Maybe<Scalars['BigDecimal']>;
    sharesQuantity_gte?: Maybe<Scalars['BigDecimal']>;
    sharesQuantity_lte?: Maybe<Scalars['BigDecimal']>;
    sharesQuantity_in?: Maybe<Array<Scalars['BigDecimal']>>;
    sharesQuantity_not_in?: Maybe<Array<Scalars['BigDecimal']>>;
    payer?: Maybe<Scalars['String']>;
    payer_not?: Maybe<Scalars['String']>;
    payer_gt?: Maybe<Scalars['String']>;
    payer_lt?: Maybe<Scalars['String']>;
    payer_gte?: Maybe<Scalars['String']>;
    payer_lte?: Maybe<Scalars['String']>;
    payer_in?: Maybe<Array<Scalars['String']>>;
    payer_not_in?: Maybe<Array<Scalars['String']>>;
    payer_contains?: Maybe<Scalars['String']>;
    payer_not_contains?: Maybe<Scalars['String']>;
    payer_starts_with?: Maybe<Scalars['String']>;
    payer_not_starts_with?: Maybe<Scalars['String']>;
    payer_ends_with?: Maybe<Scalars['String']>;
    payer_not_ends_with?: Maybe<Scalars['String']>;
};
export declare enum EntranceRateBurnFeeSettledEvent_OrderBy {
    Id = "id",
    Fund = "fund",
    Timestamp = "timestamp",
    Transaction = "transaction",
    ComptrollerProxy = "comptrollerProxy",
    SharesQuantity = "sharesQuantity",
    Payer = "payer"
}
export declare type EntranceRateBurnFeeState = FundStateInterface & IndividualFeeStateInterface & {
    __typename?: 'EntranceRateBurnFeeState';
    id: Scalars['ID'];
    fund: Fund;
    timestamp: Scalars['BigInt'];
    fee: Fee;
    lastSettled: Scalars['BigInt'];
    events: Array<FundEventInterface>;
};
export declare type EntranceRateBurnFeeStateEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<FundEventInterface_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<FundEventInterface_Filter>;
};
export declare type EntranceRateBurnFeeState_Filter = {
    id?: Maybe<Scalars['ID']>;
    id_not?: Maybe<Scalars['ID']>;
    id_gt?: Maybe<Scalars['ID']>;
    id_lt?: Maybe<Scalars['ID']>;
    id_gte?: Maybe<Scalars['ID']>;
    id_lte?: Maybe<Scalars['ID']>;
    id_in?: Maybe<Array<Scalars['ID']>>;
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    fund?: Maybe<Scalars['String']>;
    fund_not?: Maybe<Scalars['String']>;
    fund_gt?: Maybe<Scalars['String']>;
    fund_lt?: Maybe<Scalars['String']>;
    fund_gte?: Maybe<Scalars['String']>;
    fund_lte?: Maybe<Scalars['String']>;
    fund_in?: Maybe<Array<Scalars['String']>>;
    fund_not_in?: Maybe<Array<Scalars['String']>>;
    fund_contains?: Maybe<Scalars['String']>;
    fund_not_contains?: Maybe<Scalars['String']>;
    fund_starts_with?: Maybe<Scalars['String']>;
    fund_not_starts_with?: Maybe<Scalars['String']>;
    fund_ends_with?: Maybe<Scalars['String']>;
    fund_not_ends_with?: Maybe<Scalars['String']>;
    timestamp?: Maybe<Scalars['BigInt']>;
    timestamp_not?: Maybe<Scalars['BigInt']>;
    timestamp_gt?: Maybe<Scalars['BigInt']>;
    timestamp_lt?: Maybe<Scalars['BigInt']>;
    timestamp_gte?: Maybe<Scalars['BigInt']>;
    timestamp_lte?: Maybe<Scalars['BigInt']>;
    timestamp_in?: Maybe<Array<Scalars['BigInt']>>;
    timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;
    fee?: Maybe<Scalars['String']>;
    fee_not?: Maybe<Scalars['String']>;
    fee_gt?: Maybe<Scalars['String']>;
    fee_lt?: Maybe<Scalars['String']>;
    fee_gte?: Maybe<Scalars['String']>;
    fee_lte?: Maybe<Scalars['String']>;
    fee_in?: Maybe<Array<Scalars['String']>>;
    fee_not_in?: Maybe<Array<Scalars['String']>>;
    fee_contains?: Maybe<Scalars['String']>;
    fee_not_contains?: Maybe<Scalars['String']>;
    fee_starts_with?: Maybe<Scalars['String']>;
    fee_not_starts_with?: Maybe<Scalars['String']>;
    fee_ends_with?: Maybe<Scalars['String']>;
    fee_not_ends_with?: Maybe<Scalars['String']>;
    lastSettled?: Maybe<Scalars['BigInt']>;
    lastSettled_not?: Maybe<Scalars['BigInt']>;
    lastSettled_gt?: Maybe<Scalars['BigInt']>;
    lastSettled_lt?: Maybe<Scalars['BigInt']>;
    lastSettled_gte?: Maybe<Scalars['BigInt']>;
    lastSettled_lte?: Maybe<Scalars['BigInt']>;
    lastSettled_in?: Maybe<Array<Scalars['BigInt']>>;
    lastSettled_not_in?: Maybe<Array<Scalars['BigInt']>>;
    events?: Maybe<Array<Scalars['String']>>;
    events_not?: Maybe<Array<Scalars['String']>>;
    events_contains?: Maybe<Array<Scalars['String']>>;
    events_not_contains?: Maybe<Array<Scalars['String']>>;
};
export declare enum EntranceRateBurnFeeState_OrderBy {
    Id = "id",
    Fund = "fund",
    Timestamp = "timestamp",
    Fee = "fee",
    LastSettled = "lastSettled",
    Events = "events"
}
export declare type EntranceRateDirectFeeSetting = FeeSettingInterface & {
    __typename?: 'EntranceRateDirectFeeSetting';
    id: Scalars['ID'];
    fee: Fee;
    comptroller: ComptrollerProxy;
    rate: Scalars['BigDecimal'];
    timestamp: Scalars['BigInt'];
    events: Array<FundEventInterface>;
};
export declare type EntranceRateDirectFeeSettingEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<FundEventInterface_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<FundEventInterface_Filter>;
};
export declare type EntranceRateDirectFeeSetting_Filter = {
    id?: Maybe<Scalars['ID']>;
    id_not?: Maybe<Scalars['ID']>;
    id_gt?: Maybe<Scalars['ID']>;
    id_lt?: Maybe<Scalars['ID']>;
    id_gte?: Maybe<Scalars['ID']>;
    id_lte?: Maybe<Scalars['ID']>;
    id_in?: Maybe<Array<Scalars['ID']>>;
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    fee?: Maybe<Scalars['String']>;
    fee_not?: Maybe<Scalars['String']>;
    fee_gt?: Maybe<Scalars['String']>;
    fee_lt?: Maybe<Scalars['String']>;
    fee_gte?: Maybe<Scalars['String']>;
    fee_lte?: Maybe<Scalars['String']>;
    fee_in?: Maybe<Array<Scalars['String']>>;
    fee_not_in?: Maybe<Array<Scalars['String']>>;
    fee_contains?: Maybe<Scalars['String']>;
    fee_not_contains?: Maybe<Scalars['String']>;
    fee_starts_with?: Maybe<Scalars['String']>;
    fee_not_starts_with?: Maybe<Scalars['String']>;
    fee_ends_with?: Maybe<Scalars['String']>;
    fee_not_ends_with?: Maybe<Scalars['String']>;
    comptroller?: Maybe<Scalars['String']>;
    comptroller_not?: Maybe<Scalars['String']>;
    comptroller_gt?: Maybe<Scalars['String']>;
    comptroller_lt?: Maybe<Scalars['String']>;
    comptroller_gte?: Maybe<Scalars['String']>;
    comptroller_lte?: Maybe<Scalars['String']>;
    comptroller_in?: Maybe<Array<Scalars['String']>>;
    comptroller_not_in?: Maybe<Array<Scalars['String']>>;
    comptroller_contains?: Maybe<Scalars['String']>;
    comptroller_not_contains?: Maybe<Scalars['String']>;
    comptroller_starts_with?: Maybe<Scalars['String']>;
    comptroller_not_starts_with?: Maybe<Scalars['String']>;
    comptroller_ends_with?: Maybe<Scalars['String']>;
    comptroller_not_ends_with?: Maybe<Scalars['String']>;
    rate?: Maybe<Scalars['BigDecimal']>;
    rate_not?: Maybe<Scalars['BigDecimal']>;
    rate_gt?: Maybe<Scalars['BigDecimal']>;
    rate_lt?: Maybe<Scalars['BigDecimal']>;
    rate_gte?: Maybe<Scalars['BigDecimal']>;
    rate_lte?: Maybe<Scalars['BigDecimal']>;
    rate_in?: Maybe<Array<Scalars['BigDecimal']>>;
    rate_not_in?: Maybe<Array<Scalars['BigDecimal']>>;
    timestamp?: Maybe<Scalars['BigInt']>;
    timestamp_not?: Maybe<Scalars['BigInt']>;
    timestamp_gt?: Maybe<Scalars['BigInt']>;
    timestamp_lt?: Maybe<Scalars['BigInt']>;
    timestamp_gte?: Maybe<Scalars['BigInt']>;
    timestamp_lte?: Maybe<Scalars['BigInt']>;
    timestamp_in?: Maybe<Array<Scalars['BigInt']>>;
    timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;
    events?: Maybe<Array<Scalars['String']>>;
    events_not?: Maybe<Array<Scalars['String']>>;
    events_contains?: Maybe<Array<Scalars['String']>>;
    events_not_contains?: Maybe<Array<Scalars['String']>>;
};
export declare enum EntranceRateDirectFeeSetting_OrderBy {
    Id = "id",
    Fee = "fee",
    Comptroller = "comptroller",
    Rate = "rate",
    Timestamp = "timestamp",
    Events = "events"
}
export declare type EntranceRateDirectFeeSettingsAddedEvent = EventInterface & ComptrollerEventInterface & {
    __typename?: 'EntranceRateDirectFeeSettingsAddedEvent';
    id: Scalars['ID'];
    comptroller: ComptrollerProxy;
    timestamp: Scalars['BigInt'];
    transaction: Transaction;
    rate: Scalars['BigDecimal'];
};
export declare type EntranceRateDirectFeeSettingsAddedEvent_Filter = {
    id?: Maybe<Scalars['ID']>;
    id_not?: Maybe<Scalars['ID']>;
    id_gt?: Maybe<Scalars['ID']>;
    id_lt?: Maybe<Scalars['ID']>;
    id_gte?: Maybe<Scalars['ID']>;
    id_lte?: Maybe<Scalars['ID']>;
    id_in?: Maybe<Array<Scalars['ID']>>;
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    comptroller?: Maybe<Scalars['String']>;
    comptroller_not?: Maybe<Scalars['String']>;
    comptroller_gt?: Maybe<Scalars['String']>;
    comptroller_lt?: Maybe<Scalars['String']>;
    comptroller_gte?: Maybe<Scalars['String']>;
    comptroller_lte?: Maybe<Scalars['String']>;
    comptroller_in?: Maybe<Array<Scalars['String']>>;
    comptroller_not_in?: Maybe<Array<Scalars['String']>>;
    comptroller_contains?: Maybe<Scalars['String']>;
    comptroller_not_contains?: Maybe<Scalars['String']>;
    comptroller_starts_with?: Maybe<Scalars['String']>;
    comptroller_not_starts_with?: Maybe<Scalars['String']>;
    comptroller_ends_with?: Maybe<Scalars['String']>;
    comptroller_not_ends_with?: Maybe<Scalars['String']>;
    timestamp?: Maybe<Scalars['BigInt']>;
    timestamp_not?: Maybe<Scalars['BigInt']>;
    timestamp_gt?: Maybe<Scalars['BigInt']>;
    timestamp_lt?: Maybe<Scalars['BigInt']>;
    timestamp_gte?: Maybe<Scalars['BigInt']>;
    timestamp_lte?: Maybe<Scalars['BigInt']>;
    timestamp_in?: Maybe<Array<Scalars['BigInt']>>;
    timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;
    transaction?: Maybe<Scalars['String']>;
    transaction_not?: Maybe<Scalars['String']>;
    transaction_gt?: Maybe<Scalars['String']>;
    transaction_lt?: Maybe<Scalars['String']>;
    transaction_gte?: Maybe<Scalars['String']>;
    transaction_lte?: Maybe<Scalars['String']>;
    transaction_in?: Maybe<Array<Scalars['String']>>;
    transaction_not_in?: Maybe<Array<Scalars['String']>>;
    transaction_contains?: Maybe<Scalars['String']>;
    transaction_not_contains?: Maybe<Scalars['String']>;
    transaction_starts_with?: Maybe<Scalars['String']>;
    transaction_not_starts_with?: Maybe<Scalars['String']>;
    transaction_ends_with?: Maybe<Scalars['String']>;
    transaction_not_ends_with?: Maybe<Scalars['String']>;
    rate?: Maybe<Scalars['BigDecimal']>;
    rate_not?: Maybe<Scalars['BigDecimal']>;
    rate_gt?: Maybe<Scalars['BigDecimal']>;
    rate_lt?: Maybe<Scalars['BigDecimal']>;
    rate_gte?: Maybe<Scalars['BigDecimal']>;
    rate_lte?: Maybe<Scalars['BigDecimal']>;
    rate_in?: Maybe<Array<Scalars['BigDecimal']>>;
    rate_not_in?: Maybe<Array<Scalars['BigDecimal']>>;
};
export declare enum EntranceRateDirectFeeSettingsAddedEvent_OrderBy {
    Id = "id",
    Comptroller = "comptroller",
    Timestamp = "timestamp",
    Transaction = "transaction",
    Rate = "rate"
}
export declare type EntranceRateDirectFeeSettledEvent = EventInterface & FundEventInterface & {
    __typename?: 'EntranceRateDirectFeeSettledEvent';
    id: Scalars['ID'];
    fund: Fund;
    timestamp: Scalars['BigInt'];
    transaction: Transaction;
    comptrollerProxy: Scalars['String'];
    sharesQuantity: Scalars['BigDecimal'];
    payer: Account;
};
export declare type EntranceRateDirectFeeSettledEvent_Filter = {
    id?: Maybe<Scalars['ID']>;
    id_not?: Maybe<Scalars['ID']>;
    id_gt?: Maybe<Scalars['ID']>;
    id_lt?: Maybe<Scalars['ID']>;
    id_gte?: Maybe<Scalars['ID']>;
    id_lte?: Maybe<Scalars['ID']>;
    id_in?: Maybe<Array<Scalars['ID']>>;
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    fund?: Maybe<Scalars['String']>;
    fund_not?: Maybe<Scalars['String']>;
    fund_gt?: Maybe<Scalars['String']>;
    fund_lt?: Maybe<Scalars['String']>;
    fund_gte?: Maybe<Scalars['String']>;
    fund_lte?: Maybe<Scalars['String']>;
    fund_in?: Maybe<Array<Scalars['String']>>;
    fund_not_in?: Maybe<Array<Scalars['String']>>;
    fund_contains?: Maybe<Scalars['String']>;
    fund_not_contains?: Maybe<Scalars['String']>;
    fund_starts_with?: Maybe<Scalars['String']>;
    fund_not_starts_with?: Maybe<Scalars['String']>;
    fund_ends_with?: Maybe<Scalars['String']>;
    fund_not_ends_with?: Maybe<Scalars['String']>;
    timestamp?: Maybe<Scalars['BigInt']>;
    timestamp_not?: Maybe<Scalars['BigInt']>;
    timestamp_gt?: Maybe<Scalars['BigInt']>;
    timestamp_lt?: Maybe<Scalars['BigInt']>;
    timestamp_gte?: Maybe<Scalars['BigInt']>;
    timestamp_lte?: Maybe<Scalars['BigInt']>;
    timestamp_in?: Maybe<Array<Scalars['BigInt']>>;
    timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;
    transaction?: Maybe<Scalars['String']>;
    transaction_not?: Maybe<Scalars['String']>;
    transaction_gt?: Maybe<Scalars['String']>;
    transaction_lt?: Maybe<Scalars['String']>;
    transaction_gte?: Maybe<Scalars['String']>;
    transaction_lte?: Maybe<Scalars['String']>;
    transaction_in?: Maybe<Array<Scalars['String']>>;
    transaction_not_in?: Maybe<Array<Scalars['String']>>;
    transaction_contains?: Maybe<Scalars['String']>;
    transaction_not_contains?: Maybe<Scalars['String']>;
    transaction_starts_with?: Maybe<Scalars['String']>;
    transaction_not_starts_with?: Maybe<Scalars['String']>;
    transaction_ends_with?: Maybe<Scalars['String']>;
    transaction_not_ends_with?: Maybe<Scalars['String']>;
    comptrollerProxy?: Maybe<Scalars['String']>;
    comptrollerProxy_not?: Maybe<Scalars['String']>;
    comptrollerProxy_gt?: Maybe<Scalars['String']>;
    comptrollerProxy_lt?: Maybe<Scalars['String']>;
    comptrollerProxy_gte?: Maybe<Scalars['String']>;
    comptrollerProxy_lte?: Maybe<Scalars['String']>;
    comptrollerProxy_in?: Maybe<Array<Scalars['String']>>;
    comptrollerProxy_not_in?: Maybe<Array<Scalars['String']>>;
    comptrollerProxy_contains?: Maybe<Scalars['String']>;
    comptrollerProxy_not_contains?: Maybe<Scalars['String']>;
    comptrollerProxy_starts_with?: Maybe<Scalars['String']>;
    comptrollerProxy_not_starts_with?: Maybe<Scalars['String']>;
    comptrollerProxy_ends_with?: Maybe<Scalars['String']>;
    comptrollerProxy_not_ends_with?: Maybe<Scalars['String']>;
    sharesQuantity?: Maybe<Scalars['BigDecimal']>;
    sharesQuantity_not?: Maybe<Scalars['BigDecimal']>;
    sharesQuantity_gt?: Maybe<Scalars['BigDecimal']>;
    sharesQuantity_lt?: Maybe<Scalars['BigDecimal']>;
    sharesQuantity_gte?: Maybe<Scalars['BigDecimal']>;
    sharesQuantity_lte?: Maybe<Scalars['BigDecimal']>;
    sharesQuantity_in?: Maybe<Array<Scalars['BigDecimal']>>;
    sharesQuantity_not_in?: Maybe<Array<Scalars['BigDecimal']>>;
    payer?: Maybe<Scalars['String']>;
    payer_not?: Maybe<Scalars['String']>;
    payer_gt?: Maybe<Scalars['String']>;
    payer_lt?: Maybe<Scalars['String']>;
    payer_gte?: Maybe<Scalars['String']>;
    payer_lte?: Maybe<Scalars['String']>;
    payer_in?: Maybe<Array<Scalars['String']>>;
    payer_not_in?: Maybe<Array<Scalars['String']>>;
    payer_contains?: Maybe<Scalars['String']>;
    payer_not_contains?: Maybe<Scalars['String']>;
    payer_starts_with?: Maybe<Scalars['String']>;
    payer_not_starts_with?: Maybe<Scalars['String']>;
    payer_ends_with?: Maybe<Scalars['String']>;
    payer_not_ends_with?: Maybe<Scalars['String']>;
};
export declare enum EntranceRateDirectFeeSettledEvent_OrderBy {
    Id = "id",
    Fund = "fund",
    Timestamp = "timestamp",
    Transaction = "transaction",
    ComptrollerProxy = "comptrollerProxy",
    SharesQuantity = "sharesQuantity",
    Payer = "payer"
}
export declare type EntranceRateDirectFeeState = FundStateInterface & IndividualFeeStateInterface & {
    __typename?: 'EntranceRateDirectFeeState';
    id: Scalars['ID'];
    fund: Fund;
    timestamp: Scalars['BigInt'];
    fee: Fee;
    lastSettled: Scalars['BigInt'];
    events: Array<FundEventInterface>;
};
export declare type EntranceRateDirectFeeStateEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<FundEventInterface_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<FundEventInterface_Filter>;
};
export declare type EntranceRateDirectFeeState_Filter = {
    id?: Maybe<Scalars['ID']>;
    id_not?: Maybe<Scalars['ID']>;
    id_gt?: Maybe<Scalars['ID']>;
    id_lt?: Maybe<Scalars['ID']>;
    id_gte?: Maybe<Scalars['ID']>;
    id_lte?: Maybe<Scalars['ID']>;
    id_in?: Maybe<Array<Scalars['ID']>>;
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    fund?: Maybe<Scalars['String']>;
    fund_not?: Maybe<Scalars['String']>;
    fund_gt?: Maybe<Scalars['String']>;
    fund_lt?: Maybe<Scalars['String']>;
    fund_gte?: Maybe<Scalars['String']>;
    fund_lte?: Maybe<Scalars['String']>;
    fund_in?: Maybe<Array<Scalars['String']>>;
    fund_not_in?: Maybe<Array<Scalars['String']>>;
    fund_contains?: Maybe<Scalars['String']>;
    fund_not_contains?: Maybe<Scalars['String']>;
    fund_starts_with?: Maybe<Scalars['String']>;
    fund_not_starts_with?: Maybe<Scalars['String']>;
    fund_ends_with?: Maybe<Scalars['String']>;
    fund_not_ends_with?: Maybe<Scalars['String']>;
    timestamp?: Maybe<Scalars['BigInt']>;
    timestamp_not?: Maybe<Scalars['BigInt']>;
    timestamp_gt?: Maybe<Scalars['BigInt']>;
    timestamp_lt?: Maybe<Scalars['BigInt']>;
    timestamp_gte?: Maybe<Scalars['BigInt']>;
    timestamp_lte?: Maybe<Scalars['BigInt']>;
    timestamp_in?: Maybe<Array<Scalars['BigInt']>>;
    timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;
    fee?: Maybe<Scalars['String']>;
    fee_not?: Maybe<Scalars['String']>;
    fee_gt?: Maybe<Scalars['String']>;
    fee_lt?: Maybe<Scalars['String']>;
    fee_gte?: Maybe<Scalars['String']>;
    fee_lte?: Maybe<Scalars['String']>;
    fee_in?: Maybe<Array<Scalars['String']>>;
    fee_not_in?: Maybe<Array<Scalars['String']>>;
    fee_contains?: Maybe<Scalars['String']>;
    fee_not_contains?: Maybe<Scalars['String']>;
    fee_starts_with?: Maybe<Scalars['String']>;
    fee_not_starts_with?: Maybe<Scalars['String']>;
    fee_ends_with?: Maybe<Scalars['String']>;
    fee_not_ends_with?: Maybe<Scalars['String']>;
    lastSettled?: Maybe<Scalars['BigInt']>;
    lastSettled_not?: Maybe<Scalars['BigInt']>;
    lastSettled_gt?: Maybe<Scalars['BigInt']>;
    lastSettled_lt?: Maybe<Scalars['BigInt']>;
    lastSettled_gte?: Maybe<Scalars['BigInt']>;
    lastSettled_lte?: Maybe<Scalars['BigInt']>;
    lastSettled_in?: Maybe<Array<Scalars['BigInt']>>;
    lastSettled_not_in?: Maybe<Array<Scalars['BigInt']>>;
    events?: Maybe<Array<Scalars['String']>>;
    events_not?: Maybe<Array<Scalars['String']>>;
    events_contains?: Maybe<Array<Scalars['String']>>;
    events_not_contains?: Maybe<Array<Scalars['String']>>;
};
export declare enum EntranceRateDirectFeeState_OrderBy {
    Id = "id",
    Fund = "fund",
    Timestamp = "timestamp",
    Fee = "fee",
    LastSettled = "lastSettled",
    Events = "events"
}
export declare type EthUsdAggregatorSetEvent = EventInterface & NetworkEventInterface & {
    __typename?: 'EthUsdAggregatorSetEvent';
    id: Scalars['ID'];
    timestamp: Scalars['BigInt'];
    transaction: Transaction;
    prevEthUsdAggregator: Scalars['String'];
    nextEthUsdAggregator: Scalars['String'];
};
export declare type EthUsdAggregatorSetEvent_Filter = {
    id?: Maybe<Scalars['ID']>;
    id_not?: Maybe<Scalars['ID']>;
    id_gt?: Maybe<Scalars['ID']>;
    id_lt?: Maybe<Scalars['ID']>;
    id_gte?: Maybe<Scalars['ID']>;
    id_lte?: Maybe<Scalars['ID']>;
    id_in?: Maybe<Array<Scalars['ID']>>;
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    timestamp?: Maybe<Scalars['BigInt']>;
    timestamp_not?: Maybe<Scalars['BigInt']>;
    timestamp_gt?: Maybe<Scalars['BigInt']>;
    timestamp_lt?: Maybe<Scalars['BigInt']>;
    timestamp_gte?: Maybe<Scalars['BigInt']>;
    timestamp_lte?: Maybe<Scalars['BigInt']>;
    timestamp_in?: Maybe<Array<Scalars['BigInt']>>;
    timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;
    transaction?: Maybe<Scalars['String']>;
    transaction_not?: Maybe<Scalars['String']>;
    transaction_gt?: Maybe<Scalars['String']>;
    transaction_lt?: Maybe<Scalars['String']>;
    transaction_gte?: Maybe<Scalars['String']>;
    transaction_lte?: Maybe<Scalars['String']>;
    transaction_in?: Maybe<Array<Scalars['String']>>;
    transaction_not_in?: Maybe<Array<Scalars['String']>>;
    transaction_contains?: Maybe<Scalars['String']>;
    transaction_not_contains?: Maybe<Scalars['String']>;
    transaction_starts_with?: Maybe<Scalars['String']>;
    transaction_not_starts_with?: Maybe<Scalars['String']>;
    transaction_ends_with?: Maybe<Scalars['String']>;
    transaction_not_ends_with?: Maybe<Scalars['String']>;
    prevEthUsdAggregator?: Maybe<Scalars['String']>;
    prevEthUsdAggregator_not?: Maybe<Scalars['String']>;
    prevEthUsdAggregator_gt?: Maybe<Scalars['String']>;
    prevEthUsdAggregator_lt?: Maybe<Scalars['String']>;
    prevEthUsdAggregator_gte?: Maybe<Scalars['String']>;
    prevEthUsdAggregator_lte?: Maybe<Scalars['String']>;
    prevEthUsdAggregator_in?: Maybe<Array<Scalars['String']>>;
    prevEthUsdAggregator_not_in?: Maybe<Array<Scalars['String']>>;
    prevEthUsdAggregator_contains?: Maybe<Scalars['String']>;
    prevEthUsdAggregator_not_contains?: Maybe<Scalars['String']>;
    prevEthUsdAggregator_starts_with?: Maybe<Scalars['String']>;
    prevEthUsdAggregator_not_starts_with?: Maybe<Scalars['String']>;
    prevEthUsdAggregator_ends_with?: Maybe<Scalars['String']>;
    prevEthUsdAggregator_not_ends_with?: Maybe<Scalars['String']>;
    nextEthUsdAggregator?: Maybe<Scalars['String']>;
    nextEthUsdAggregator_not?: Maybe<Scalars['String']>;
    nextEthUsdAggregator_gt?: Maybe<Scalars['String']>;
    nextEthUsdAggregator_lt?: Maybe<Scalars['String']>;
    nextEthUsdAggregator_gte?: Maybe<Scalars['String']>;
    nextEthUsdAggregator_lte?: Maybe<Scalars['String']>;
    nextEthUsdAggregator_in?: Maybe<Array<Scalars['String']>>;
    nextEthUsdAggregator_not_in?: Maybe<Array<Scalars['String']>>;
    nextEthUsdAggregator_contains?: Maybe<Scalars['String']>;
    nextEthUsdAggregator_not_contains?: Maybe<Scalars['String']>;
    nextEthUsdAggregator_starts_with?: Maybe<Scalars['String']>;
    nextEthUsdAggregator_not_starts_with?: Maybe<Scalars['String']>;
    nextEthUsdAggregator_ends_with?: Maybe<Scalars['String']>;
    nextEthUsdAggregator_not_ends_with?: Maybe<Scalars['String']>;
};
export declare enum EthUsdAggregatorSetEvent_OrderBy {
    Id = "id",
    Timestamp = "timestamp",
    Transaction = "transaction",
    PrevEthUsdAggregator = "prevEthUsdAggregator",
    NextEthUsdAggregator = "nextEthUsdAggregator"
}
export declare type EventInterface = {
    id: Scalars['ID'];
    timestamp: Scalars['BigInt'];
    transaction: Transaction;
};
export declare type EventInterface_Filter = {
    id?: Maybe<Scalars['ID']>;
    id_not?: Maybe<Scalars['ID']>;
    id_gt?: Maybe<Scalars['ID']>;
    id_lt?: Maybe<Scalars['ID']>;
    id_gte?: Maybe<Scalars['ID']>;
    id_lte?: Maybe<Scalars['ID']>;
    id_in?: Maybe<Array<Scalars['ID']>>;
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    timestamp?: Maybe<Scalars['BigInt']>;
    timestamp_not?: Maybe<Scalars['BigInt']>;
    timestamp_gt?: Maybe<Scalars['BigInt']>;
    timestamp_lt?: Maybe<Scalars['BigInt']>;
    timestamp_gte?: Maybe<Scalars['BigInt']>;
    timestamp_lte?: Maybe<Scalars['BigInt']>;
    timestamp_in?: Maybe<Array<Scalars['BigInt']>>;
    timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;
    transaction?: Maybe<Scalars['String']>;
    transaction_not?: Maybe<Scalars['String']>;
    transaction_gt?: Maybe<Scalars['String']>;
    transaction_lt?: Maybe<Scalars['String']>;
    transaction_gte?: Maybe<Scalars['String']>;
    transaction_lte?: Maybe<Scalars['String']>;
    transaction_in?: Maybe<Array<Scalars['String']>>;
    transaction_not_in?: Maybe<Array<Scalars['String']>>;
    transaction_contains?: Maybe<Scalars['String']>;
    transaction_not_contains?: Maybe<Scalars['String']>;
    transaction_starts_with?: Maybe<Scalars['String']>;
    transaction_not_starts_with?: Maybe<Scalars['String']>;
    transaction_ends_with?: Maybe<Scalars['String']>;
    transaction_not_ends_with?: Maybe<Scalars['String']>;
};
export declare enum EventInterface_OrderBy {
    Id = "id",
    Timestamp = "timestamp",
    Transaction = "transaction"
}
export declare type Fee = {
    __typename?: 'Fee';
    id: Scalars['ID'];
    feeManager: FeeManager;
    identifier: Scalars['String'];
    settings: Array<FeeSettingInterface>;
};
export declare type FeeSettingsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<FeeSettingInterface_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<FeeSettingInterface_Filter>;
};
export declare type FeeDeregisteredEvent = EventInterface & NetworkEventInterface & {
    __typename?: 'FeeDeregisteredEvent';
    id: Scalars['ID'];
    timestamp: Scalars['BigInt'];
    transaction: Transaction;
    fee: Fee;
    identifier: Scalars['String'];
};
export declare type FeeDeregisteredEvent_Filter = {
    id?: Maybe<Scalars['ID']>;
    id_not?: Maybe<Scalars['ID']>;
    id_gt?: Maybe<Scalars['ID']>;
    id_lt?: Maybe<Scalars['ID']>;
    id_gte?: Maybe<Scalars['ID']>;
    id_lte?: Maybe<Scalars['ID']>;
    id_in?: Maybe<Array<Scalars['ID']>>;
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    timestamp?: Maybe<Scalars['BigInt']>;
    timestamp_not?: Maybe<Scalars['BigInt']>;
    timestamp_gt?: Maybe<Scalars['BigInt']>;
    timestamp_lt?: Maybe<Scalars['BigInt']>;
    timestamp_gte?: Maybe<Scalars['BigInt']>;
    timestamp_lte?: Maybe<Scalars['BigInt']>;
    timestamp_in?: Maybe<Array<Scalars['BigInt']>>;
    timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;
    transaction?: Maybe<Scalars['String']>;
    transaction_not?: Maybe<Scalars['String']>;
    transaction_gt?: Maybe<Scalars['String']>;
    transaction_lt?: Maybe<Scalars['String']>;
    transaction_gte?: Maybe<Scalars['String']>;
    transaction_lte?: Maybe<Scalars['String']>;
    transaction_in?: Maybe<Array<Scalars['String']>>;
    transaction_not_in?: Maybe<Array<Scalars['String']>>;
    transaction_contains?: Maybe<Scalars['String']>;
    transaction_not_contains?: Maybe<Scalars['String']>;
    transaction_starts_with?: Maybe<Scalars['String']>;
    transaction_not_starts_with?: Maybe<Scalars['String']>;
    transaction_ends_with?: Maybe<Scalars['String']>;
    transaction_not_ends_with?: Maybe<Scalars['String']>;
    fee?: Maybe<Scalars['String']>;
    fee_not?: Maybe<Scalars['String']>;
    fee_gt?: Maybe<Scalars['String']>;
    fee_lt?: Maybe<Scalars['String']>;
    fee_gte?: Maybe<Scalars['String']>;
    fee_lte?: Maybe<Scalars['String']>;
    fee_in?: Maybe<Array<Scalars['String']>>;
    fee_not_in?: Maybe<Array<Scalars['String']>>;
    fee_contains?: Maybe<Scalars['String']>;
    fee_not_contains?: Maybe<Scalars['String']>;
    fee_starts_with?: Maybe<Scalars['String']>;
    fee_not_starts_with?: Maybe<Scalars['String']>;
    fee_ends_with?: Maybe<Scalars['String']>;
    fee_not_ends_with?: Maybe<Scalars['String']>;
    identifier?: Maybe<Scalars['String']>;
    identifier_not?: Maybe<Scalars['String']>;
    identifier_gt?: Maybe<Scalars['String']>;
    identifier_lt?: Maybe<Scalars['String']>;
    identifier_gte?: Maybe<Scalars['String']>;
    identifier_lte?: Maybe<Scalars['String']>;
    identifier_in?: Maybe<Array<Scalars['String']>>;
    identifier_not_in?: Maybe<Array<Scalars['String']>>;
    identifier_contains?: Maybe<Scalars['String']>;
    identifier_not_contains?: Maybe<Scalars['String']>;
    identifier_starts_with?: Maybe<Scalars['String']>;
    identifier_not_starts_with?: Maybe<Scalars['String']>;
    identifier_ends_with?: Maybe<Scalars['String']>;
    identifier_not_ends_with?: Maybe<Scalars['String']>;
};
export declare enum FeeDeregisteredEvent_OrderBy {
    Id = "id",
    Timestamp = "timestamp",
    Transaction = "transaction",
    Fee = "fee",
    Identifier = "identifier"
}
export declare type FeeEnabledForFundEvent = EventInterface & FundEventInterface & {
    __typename?: 'FeeEnabledForFundEvent';
    id: Scalars['ID'];
    fund: Fund;
    timestamp: Scalars['BigInt'];
    transaction: Transaction;
    fee: Fee;
    comptrollerProxy: Scalars['String'];
    settingsData: Scalars['Bytes'];
};
export declare type FeeEnabledForFundEvent_Filter = {
    id?: Maybe<Scalars['ID']>;
    id_not?: Maybe<Scalars['ID']>;
    id_gt?: Maybe<Scalars['ID']>;
    id_lt?: Maybe<Scalars['ID']>;
    id_gte?: Maybe<Scalars['ID']>;
    id_lte?: Maybe<Scalars['ID']>;
    id_in?: Maybe<Array<Scalars['ID']>>;
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    fund?: Maybe<Scalars['String']>;
    fund_not?: Maybe<Scalars['String']>;
    fund_gt?: Maybe<Scalars['String']>;
    fund_lt?: Maybe<Scalars['String']>;
    fund_gte?: Maybe<Scalars['String']>;
    fund_lte?: Maybe<Scalars['String']>;
    fund_in?: Maybe<Array<Scalars['String']>>;
    fund_not_in?: Maybe<Array<Scalars['String']>>;
    fund_contains?: Maybe<Scalars['String']>;
    fund_not_contains?: Maybe<Scalars['String']>;
    fund_starts_with?: Maybe<Scalars['String']>;
    fund_not_starts_with?: Maybe<Scalars['String']>;
    fund_ends_with?: Maybe<Scalars['String']>;
    fund_not_ends_with?: Maybe<Scalars['String']>;
    timestamp?: Maybe<Scalars['BigInt']>;
    timestamp_not?: Maybe<Scalars['BigInt']>;
    timestamp_gt?: Maybe<Scalars['BigInt']>;
    timestamp_lt?: Maybe<Scalars['BigInt']>;
    timestamp_gte?: Maybe<Scalars['BigInt']>;
    timestamp_lte?: Maybe<Scalars['BigInt']>;
    timestamp_in?: Maybe<Array<Scalars['BigInt']>>;
    timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;
    transaction?: Maybe<Scalars['String']>;
    transaction_not?: Maybe<Scalars['String']>;
    transaction_gt?: Maybe<Scalars['String']>;
    transaction_lt?: Maybe<Scalars['String']>;
    transaction_gte?: Maybe<Scalars['String']>;
    transaction_lte?: Maybe<Scalars['String']>;
    transaction_in?: Maybe<Array<Scalars['String']>>;
    transaction_not_in?: Maybe<Array<Scalars['String']>>;
    transaction_contains?: Maybe<Scalars['String']>;
    transaction_not_contains?: Maybe<Scalars['String']>;
    transaction_starts_with?: Maybe<Scalars['String']>;
    transaction_not_starts_with?: Maybe<Scalars['String']>;
    transaction_ends_with?: Maybe<Scalars['String']>;
    transaction_not_ends_with?: Maybe<Scalars['String']>;
    fee?: Maybe<Scalars['String']>;
    fee_not?: Maybe<Scalars['String']>;
    fee_gt?: Maybe<Scalars['String']>;
    fee_lt?: Maybe<Scalars['String']>;
    fee_gte?: Maybe<Scalars['String']>;
    fee_lte?: Maybe<Scalars['String']>;
    fee_in?: Maybe<Array<Scalars['String']>>;
    fee_not_in?: Maybe<Array<Scalars['String']>>;
    fee_contains?: Maybe<Scalars['String']>;
    fee_not_contains?: Maybe<Scalars['String']>;
    fee_starts_with?: Maybe<Scalars['String']>;
    fee_not_starts_with?: Maybe<Scalars['String']>;
    fee_ends_with?: Maybe<Scalars['String']>;
    fee_not_ends_with?: Maybe<Scalars['String']>;
    comptrollerProxy?: Maybe<Scalars['String']>;
    comptrollerProxy_not?: Maybe<Scalars['String']>;
    comptrollerProxy_gt?: Maybe<Scalars['String']>;
    comptrollerProxy_lt?: Maybe<Scalars['String']>;
    comptrollerProxy_gte?: Maybe<Scalars['String']>;
    comptrollerProxy_lte?: Maybe<Scalars['String']>;
    comptrollerProxy_in?: Maybe<Array<Scalars['String']>>;
    comptrollerProxy_not_in?: Maybe<Array<Scalars['String']>>;
    comptrollerProxy_contains?: Maybe<Scalars['String']>;
    comptrollerProxy_not_contains?: Maybe<Scalars['String']>;
    comptrollerProxy_starts_with?: Maybe<Scalars['String']>;
    comptrollerProxy_not_starts_with?: Maybe<Scalars['String']>;
    comptrollerProxy_ends_with?: Maybe<Scalars['String']>;
    comptrollerProxy_not_ends_with?: Maybe<Scalars['String']>;
    settingsData?: Maybe<Scalars['Bytes']>;
    settingsData_not?: Maybe<Scalars['Bytes']>;
    settingsData_in?: Maybe<Array<Scalars['Bytes']>>;
    settingsData_not_in?: Maybe<Array<Scalars['Bytes']>>;
    settingsData_contains?: Maybe<Scalars['Bytes']>;
    settingsData_not_contains?: Maybe<Scalars['Bytes']>;
};
export declare enum FeeEnabledForFundEvent_OrderBy {
    Id = "id",
    Fund = "fund",
    Timestamp = "timestamp",
    Transaction = "transaction",
    Fee = "fee",
    ComptrollerProxy = "comptrollerProxy",
    SettingsData = "settingsData"
}
export declare enum FeeHook {
    Continuous = "Continuous",
    BuySharesSetup = "BuySharesSetup",
    PreBuyShares = "PreBuyShares",
    PostBuyShares = "PostBuyShares",
    BuySharesCompleted = "BuySharesCompleted",
    PreRedeemShares = "PreRedeemShares",
    Unknown = "Unknown"
}
export declare type FeeManager = {
    __typename?: 'FeeManager';
    id: Scalars['ID'];
    release: Release;
    fees: Array<Fee>;
};
export declare type FeeManagerFeesArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<Fee_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<Fee_Filter>;
};
export declare type FeeManager_Filter = {
    id?: Maybe<Scalars['ID']>;
    id_not?: Maybe<Scalars['ID']>;
    id_gt?: Maybe<Scalars['ID']>;
    id_lt?: Maybe<Scalars['ID']>;
    id_gte?: Maybe<Scalars['ID']>;
    id_lte?: Maybe<Scalars['ID']>;
    id_in?: Maybe<Array<Scalars['ID']>>;
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    release?: Maybe<Scalars['String']>;
    release_not?: Maybe<Scalars['String']>;
    release_gt?: Maybe<Scalars['String']>;
    release_lt?: Maybe<Scalars['String']>;
    release_gte?: Maybe<Scalars['String']>;
    release_lte?: Maybe<Scalars['String']>;
    release_in?: Maybe<Array<Scalars['String']>>;
    release_not_in?: Maybe<Array<Scalars['String']>>;
    release_contains?: Maybe<Scalars['String']>;
    release_not_contains?: Maybe<Scalars['String']>;
    release_starts_with?: Maybe<Scalars['String']>;
    release_not_starts_with?: Maybe<Scalars['String']>;
    release_ends_with?: Maybe<Scalars['String']>;
    release_not_ends_with?: Maybe<Scalars['String']>;
};
export declare enum FeeManager_OrderBy {
    Id = "id",
    Release = "release",
    Fees = "fees"
}
export declare type FeeRegisteredEvent = EventInterface & NetworkEventInterface & {
    __typename?: 'FeeRegisteredEvent';
    id: Scalars['ID'];
    timestamp: Scalars['BigInt'];
    transaction: Transaction;
    fee: Fee;
    identifier: Scalars['String'];
    implementedHooksForSettle: Array<FeeHook>;
    implementedHooksForUpdate: Array<FeeHook>;
    usesGavOnSettle: Scalars['Boolean'];
    usesGavOnUpdate: Scalars['Boolean'];
};
export declare type FeeRegisteredEvent_Filter = {
    id?: Maybe<Scalars['ID']>;
    id_not?: Maybe<Scalars['ID']>;
    id_gt?: Maybe<Scalars['ID']>;
    id_lt?: Maybe<Scalars['ID']>;
    id_gte?: Maybe<Scalars['ID']>;
    id_lte?: Maybe<Scalars['ID']>;
    id_in?: Maybe<Array<Scalars['ID']>>;
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    timestamp?: Maybe<Scalars['BigInt']>;
    timestamp_not?: Maybe<Scalars['BigInt']>;
    timestamp_gt?: Maybe<Scalars['BigInt']>;
    timestamp_lt?: Maybe<Scalars['BigInt']>;
    timestamp_gte?: Maybe<Scalars['BigInt']>;
    timestamp_lte?: Maybe<Scalars['BigInt']>;
    timestamp_in?: Maybe<Array<Scalars['BigInt']>>;
    timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;
    transaction?: Maybe<Scalars['String']>;
    transaction_not?: Maybe<Scalars['String']>;
    transaction_gt?: Maybe<Scalars['String']>;
    transaction_lt?: Maybe<Scalars['String']>;
    transaction_gte?: Maybe<Scalars['String']>;
    transaction_lte?: Maybe<Scalars['String']>;
    transaction_in?: Maybe<Array<Scalars['String']>>;
    transaction_not_in?: Maybe<Array<Scalars['String']>>;
    transaction_contains?: Maybe<Scalars['String']>;
    transaction_not_contains?: Maybe<Scalars['String']>;
    transaction_starts_with?: Maybe<Scalars['String']>;
    transaction_not_starts_with?: Maybe<Scalars['String']>;
    transaction_ends_with?: Maybe<Scalars['String']>;
    transaction_not_ends_with?: Maybe<Scalars['String']>;
    fee?: Maybe<Scalars['String']>;
    fee_not?: Maybe<Scalars['String']>;
    fee_gt?: Maybe<Scalars['String']>;
    fee_lt?: Maybe<Scalars['String']>;
    fee_gte?: Maybe<Scalars['String']>;
    fee_lte?: Maybe<Scalars['String']>;
    fee_in?: Maybe<Array<Scalars['String']>>;
    fee_not_in?: Maybe<Array<Scalars['String']>>;
    fee_contains?: Maybe<Scalars['String']>;
    fee_not_contains?: Maybe<Scalars['String']>;
    fee_starts_with?: Maybe<Scalars['String']>;
    fee_not_starts_with?: Maybe<Scalars['String']>;
    fee_ends_with?: Maybe<Scalars['String']>;
    fee_not_ends_with?: Maybe<Scalars['String']>;
    identifier?: Maybe<Scalars['String']>;
    identifier_not?: Maybe<Scalars['String']>;
    identifier_gt?: Maybe<Scalars['String']>;
    identifier_lt?: Maybe<Scalars['String']>;
    identifier_gte?: Maybe<Scalars['String']>;
    identifier_lte?: Maybe<Scalars['String']>;
    identifier_in?: Maybe<Array<Scalars['String']>>;
    identifier_not_in?: Maybe<Array<Scalars['String']>>;
    identifier_contains?: Maybe<Scalars['String']>;
    identifier_not_contains?: Maybe<Scalars['String']>;
    identifier_starts_with?: Maybe<Scalars['String']>;
    identifier_not_starts_with?: Maybe<Scalars['String']>;
    identifier_ends_with?: Maybe<Scalars['String']>;
    identifier_not_ends_with?: Maybe<Scalars['String']>;
    implementedHooksForSettle?: Maybe<Array<FeeHook>>;
    implementedHooksForSettle_not?: Maybe<Array<FeeHook>>;
    implementedHooksForSettle_contains?: Maybe<Array<FeeHook>>;
    implementedHooksForSettle_not_contains?: Maybe<Array<FeeHook>>;
    implementedHooksForUpdate?: Maybe<Array<FeeHook>>;
    implementedHooksForUpdate_not?: Maybe<Array<FeeHook>>;
    implementedHooksForUpdate_contains?: Maybe<Array<FeeHook>>;
    implementedHooksForUpdate_not_contains?: Maybe<Array<FeeHook>>;
    usesGavOnSettle?: Maybe<Scalars['Boolean']>;
    usesGavOnSettle_not?: Maybe<Scalars['Boolean']>;
    usesGavOnSettle_in?: Maybe<Array<Scalars['Boolean']>>;
    usesGavOnSettle_not_in?: Maybe<Array<Scalars['Boolean']>>;
    usesGavOnUpdate?: Maybe<Scalars['Boolean']>;
    usesGavOnUpdate_not?: Maybe<Scalars['Boolean']>;
    usesGavOnUpdate_in?: Maybe<Array<Scalars['Boolean']>>;
    usesGavOnUpdate_not_in?: Maybe<Array<Scalars['Boolean']>>;
};
export declare enum FeeRegisteredEvent_OrderBy {
    Id = "id",
    Timestamp = "timestamp",
    Transaction = "transaction",
    Fee = "fee",
    Identifier = "identifier",
    ImplementedHooksForSettle = "implementedHooksForSettle",
    ImplementedHooksForUpdate = "implementedHooksForUpdate",
    UsesGavOnSettle = "usesGavOnSettle",
    UsesGavOnUpdate = "usesGavOnUpdate"
}
export declare type FeeSettingInterface = {
    id: Scalars['ID'];
    fee: Fee;
    comptroller: ComptrollerProxy;
    timestamp: Scalars['BigInt'];
    events: Array<FundEventInterface>;
};
export declare type FeeSettingInterfaceEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<FundEventInterface_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<FundEventInterface_Filter>;
};
export declare type FeeSettingInterface_Filter = {
    id?: Maybe<Scalars['ID']>;
    id_not?: Maybe<Scalars['ID']>;
    id_gt?: Maybe<Scalars['ID']>;
    id_lt?: Maybe<Scalars['ID']>;
    id_gte?: Maybe<Scalars['ID']>;
    id_lte?: Maybe<Scalars['ID']>;
    id_in?: Maybe<Array<Scalars['ID']>>;
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    fee?: Maybe<Scalars['String']>;
    fee_not?: Maybe<Scalars['String']>;
    fee_gt?: Maybe<Scalars['String']>;
    fee_lt?: Maybe<Scalars['String']>;
    fee_gte?: Maybe<Scalars['String']>;
    fee_lte?: Maybe<Scalars['String']>;
    fee_in?: Maybe<Array<Scalars['String']>>;
    fee_not_in?: Maybe<Array<Scalars['String']>>;
    fee_contains?: Maybe<Scalars['String']>;
    fee_not_contains?: Maybe<Scalars['String']>;
    fee_starts_with?: Maybe<Scalars['String']>;
    fee_not_starts_with?: Maybe<Scalars['String']>;
    fee_ends_with?: Maybe<Scalars['String']>;
    fee_not_ends_with?: Maybe<Scalars['String']>;
    comptroller?: Maybe<Scalars['String']>;
    comptroller_not?: Maybe<Scalars['String']>;
    comptroller_gt?: Maybe<Scalars['String']>;
    comptroller_lt?: Maybe<Scalars['String']>;
    comptroller_gte?: Maybe<Scalars['String']>;
    comptroller_lte?: Maybe<Scalars['String']>;
    comptroller_in?: Maybe<Array<Scalars['String']>>;
    comptroller_not_in?: Maybe<Array<Scalars['String']>>;
    comptroller_contains?: Maybe<Scalars['String']>;
    comptroller_not_contains?: Maybe<Scalars['String']>;
    comptroller_starts_with?: Maybe<Scalars['String']>;
    comptroller_not_starts_with?: Maybe<Scalars['String']>;
    comptroller_ends_with?: Maybe<Scalars['String']>;
    comptroller_not_ends_with?: Maybe<Scalars['String']>;
    timestamp?: Maybe<Scalars['BigInt']>;
    timestamp_not?: Maybe<Scalars['BigInt']>;
    timestamp_gt?: Maybe<Scalars['BigInt']>;
    timestamp_lt?: Maybe<Scalars['BigInt']>;
    timestamp_gte?: Maybe<Scalars['BigInt']>;
    timestamp_lte?: Maybe<Scalars['BigInt']>;
    timestamp_in?: Maybe<Array<Scalars['BigInt']>>;
    timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;
    events?: Maybe<Array<Scalars['String']>>;
    events_not?: Maybe<Array<Scalars['String']>>;
    events_contains?: Maybe<Array<Scalars['String']>>;
    events_not_contains?: Maybe<Array<Scalars['String']>>;
};
export declare enum FeeSettingInterface_OrderBy {
    Id = "id",
    Fee = "fee",
    Comptroller = "comptroller",
    Timestamp = "timestamp",
    Events = "events"
}
export declare type FeeSettledForFundEvent = EventInterface & FundEventInterface & SharesChangeInterface & FeeSharesChangeInterface & {
    __typename?: 'FeeSettledForFundEvent';
    id: Scalars['ID'];
    fund: Fund;
    type: ShareChangeType;
    investor: Account;
    timestamp: Scalars['BigInt'];
    transaction: Transaction;
    investmentState: InvestmentState;
    shares: Scalars['BigDecimal'];
    comptrollerProxy: ComptrollerProxy;
    fee: Fee;
    payer: Scalars['String'];
    payee: Scalars['String'];
    settlementType: SettlementType;
    sharesDue: Scalars['BigDecimal'];
    fundState: FundState;
};
export declare type FeeSettledForFundEvent_Filter = {
    id?: Maybe<Scalars['ID']>;
    id_not?: Maybe<Scalars['ID']>;
    id_gt?: Maybe<Scalars['ID']>;
    id_lt?: Maybe<Scalars['ID']>;
    id_gte?: Maybe<Scalars['ID']>;
    id_lte?: Maybe<Scalars['ID']>;
    id_in?: Maybe<Array<Scalars['ID']>>;
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    fund?: Maybe<Scalars['String']>;
    fund_not?: Maybe<Scalars['String']>;
    fund_gt?: Maybe<Scalars['String']>;
    fund_lt?: Maybe<Scalars['String']>;
    fund_gte?: Maybe<Scalars['String']>;
    fund_lte?: Maybe<Scalars['String']>;
    fund_in?: Maybe<Array<Scalars['String']>>;
    fund_not_in?: Maybe<Array<Scalars['String']>>;
    fund_contains?: Maybe<Scalars['String']>;
    fund_not_contains?: Maybe<Scalars['String']>;
    fund_starts_with?: Maybe<Scalars['String']>;
    fund_not_starts_with?: Maybe<Scalars['String']>;
    fund_ends_with?: Maybe<Scalars['String']>;
    fund_not_ends_with?: Maybe<Scalars['String']>;
    type?: Maybe<ShareChangeType>;
    type_not?: Maybe<ShareChangeType>;
    investor?: Maybe<Scalars['String']>;
    investor_not?: Maybe<Scalars['String']>;
    investor_gt?: Maybe<Scalars['String']>;
    investor_lt?: Maybe<Scalars['String']>;
    investor_gte?: Maybe<Scalars['String']>;
    investor_lte?: Maybe<Scalars['String']>;
    investor_in?: Maybe<Array<Scalars['String']>>;
    investor_not_in?: Maybe<Array<Scalars['String']>>;
    investor_contains?: Maybe<Scalars['String']>;
    investor_not_contains?: Maybe<Scalars['String']>;
    investor_starts_with?: Maybe<Scalars['String']>;
    investor_not_starts_with?: Maybe<Scalars['String']>;
    investor_ends_with?: Maybe<Scalars['String']>;
    investor_not_ends_with?: Maybe<Scalars['String']>;
    timestamp?: Maybe<Scalars['BigInt']>;
    timestamp_not?: Maybe<Scalars['BigInt']>;
    timestamp_gt?: Maybe<Scalars['BigInt']>;
    timestamp_lt?: Maybe<Scalars['BigInt']>;
    timestamp_gte?: Maybe<Scalars['BigInt']>;
    timestamp_lte?: Maybe<Scalars['BigInt']>;
    timestamp_in?: Maybe<Array<Scalars['BigInt']>>;
    timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;
    transaction?: Maybe<Scalars['String']>;
    transaction_not?: Maybe<Scalars['String']>;
    transaction_gt?: Maybe<Scalars['String']>;
    transaction_lt?: Maybe<Scalars['String']>;
    transaction_gte?: Maybe<Scalars['String']>;
    transaction_lte?: Maybe<Scalars['String']>;
    transaction_in?: Maybe<Array<Scalars['String']>>;
    transaction_not_in?: Maybe<Array<Scalars['String']>>;
    transaction_contains?: Maybe<Scalars['String']>;
    transaction_not_contains?: Maybe<Scalars['String']>;
    transaction_starts_with?: Maybe<Scalars['String']>;
    transaction_not_starts_with?: Maybe<Scalars['String']>;
    transaction_ends_with?: Maybe<Scalars['String']>;
    transaction_not_ends_with?: Maybe<Scalars['String']>;
    investmentState?: Maybe<Scalars['String']>;
    investmentState_not?: Maybe<Scalars['String']>;
    investmentState_gt?: Maybe<Scalars['String']>;
    investmentState_lt?: Maybe<Scalars['String']>;
    investmentState_gte?: Maybe<Scalars['String']>;
    investmentState_lte?: Maybe<Scalars['String']>;
    investmentState_in?: Maybe<Array<Scalars['String']>>;
    investmentState_not_in?: Maybe<Array<Scalars['String']>>;
    investmentState_contains?: Maybe<Scalars['String']>;
    investmentState_not_contains?: Maybe<Scalars['String']>;
    investmentState_starts_with?: Maybe<Scalars['String']>;
    investmentState_not_starts_with?: Maybe<Scalars['String']>;
    investmentState_ends_with?: Maybe<Scalars['String']>;
    investmentState_not_ends_with?: Maybe<Scalars['String']>;
    shares?: Maybe<Scalars['BigDecimal']>;
    shares_not?: Maybe<Scalars['BigDecimal']>;
    shares_gt?: Maybe<Scalars['BigDecimal']>;
    shares_lt?: Maybe<Scalars['BigDecimal']>;
    shares_gte?: Maybe<Scalars['BigDecimal']>;
    shares_lte?: Maybe<Scalars['BigDecimal']>;
    shares_in?: Maybe<Array<Scalars['BigDecimal']>>;
    shares_not_in?: Maybe<Array<Scalars['BigDecimal']>>;
    comptrollerProxy?: Maybe<Scalars['String']>;
    comptrollerProxy_not?: Maybe<Scalars['String']>;
    comptrollerProxy_gt?: Maybe<Scalars['String']>;
    comptrollerProxy_lt?: Maybe<Scalars['String']>;
    comptrollerProxy_gte?: Maybe<Scalars['String']>;
    comptrollerProxy_lte?: Maybe<Scalars['String']>;
    comptrollerProxy_in?: Maybe<Array<Scalars['String']>>;
    comptrollerProxy_not_in?: Maybe<Array<Scalars['String']>>;
    comptrollerProxy_contains?: Maybe<Scalars['String']>;
    comptrollerProxy_not_contains?: Maybe<Scalars['String']>;
    comptrollerProxy_starts_with?: Maybe<Scalars['String']>;
    comptrollerProxy_not_starts_with?: Maybe<Scalars['String']>;
    comptrollerProxy_ends_with?: Maybe<Scalars['String']>;
    comptrollerProxy_not_ends_with?: Maybe<Scalars['String']>;
    fee?: Maybe<Scalars['String']>;
    fee_not?: Maybe<Scalars['String']>;
    fee_gt?: Maybe<Scalars['String']>;
    fee_lt?: Maybe<Scalars['String']>;
    fee_gte?: Maybe<Scalars['String']>;
    fee_lte?: Maybe<Scalars['String']>;
    fee_in?: Maybe<Array<Scalars['String']>>;
    fee_not_in?: Maybe<Array<Scalars['String']>>;
    fee_contains?: Maybe<Scalars['String']>;
    fee_not_contains?: Maybe<Scalars['String']>;
    fee_starts_with?: Maybe<Scalars['String']>;
    fee_not_starts_with?: Maybe<Scalars['String']>;
    fee_ends_with?: Maybe<Scalars['String']>;
    fee_not_ends_with?: Maybe<Scalars['String']>;
    payer?: Maybe<Scalars['String']>;
    payer_not?: Maybe<Scalars['String']>;
    payer_gt?: Maybe<Scalars['String']>;
    payer_lt?: Maybe<Scalars['String']>;
    payer_gte?: Maybe<Scalars['String']>;
    payer_lte?: Maybe<Scalars['String']>;
    payer_in?: Maybe<Array<Scalars['String']>>;
    payer_not_in?: Maybe<Array<Scalars['String']>>;
    payer_contains?: Maybe<Scalars['String']>;
    payer_not_contains?: Maybe<Scalars['String']>;
    payer_starts_with?: Maybe<Scalars['String']>;
    payer_not_starts_with?: Maybe<Scalars['String']>;
    payer_ends_with?: Maybe<Scalars['String']>;
    payer_not_ends_with?: Maybe<Scalars['String']>;
    payee?: Maybe<Scalars['String']>;
    payee_not?: Maybe<Scalars['String']>;
    payee_gt?: Maybe<Scalars['String']>;
    payee_lt?: Maybe<Scalars['String']>;
    payee_gte?: Maybe<Scalars['String']>;
    payee_lte?: Maybe<Scalars['String']>;
    payee_in?: Maybe<Array<Scalars['String']>>;
    payee_not_in?: Maybe<Array<Scalars['String']>>;
    payee_contains?: Maybe<Scalars['String']>;
    payee_not_contains?: Maybe<Scalars['String']>;
    payee_starts_with?: Maybe<Scalars['String']>;
    payee_not_starts_with?: Maybe<Scalars['String']>;
    payee_ends_with?: Maybe<Scalars['String']>;
    payee_not_ends_with?: Maybe<Scalars['String']>;
    settlementType?: Maybe<SettlementType>;
    settlementType_not?: Maybe<SettlementType>;
    sharesDue?: Maybe<Scalars['BigDecimal']>;
    sharesDue_not?: Maybe<Scalars['BigDecimal']>;
    sharesDue_gt?: Maybe<Scalars['BigDecimal']>;
    sharesDue_lt?: Maybe<Scalars['BigDecimal']>;
    sharesDue_gte?: Maybe<Scalars['BigDecimal']>;
    sharesDue_lte?: Maybe<Scalars['BigDecimal']>;
    sharesDue_in?: Maybe<Array<Scalars['BigDecimal']>>;
    sharesDue_not_in?: Maybe<Array<Scalars['BigDecimal']>>;
    fundState?: Maybe<Scalars['String']>;
    fundState_not?: Maybe<Scalars['String']>;
    fundState_gt?: Maybe<Scalars['String']>;
    fundState_lt?: Maybe<Scalars['String']>;
    fundState_gte?: Maybe<Scalars['String']>;
    fundState_lte?: Maybe<Scalars['String']>;
    fundState_in?: Maybe<Array<Scalars['String']>>;
    fundState_not_in?: Maybe<Array<Scalars['String']>>;
    fundState_contains?: Maybe<Scalars['String']>;
    fundState_not_contains?: Maybe<Scalars['String']>;
    fundState_starts_with?: Maybe<Scalars['String']>;
    fundState_not_starts_with?: Maybe<Scalars['String']>;
    fundState_ends_with?: Maybe<Scalars['String']>;
    fundState_not_ends_with?: Maybe<Scalars['String']>;
};
export declare enum FeeSettledForFundEvent_OrderBy {
    Id = "id",
    Fund = "fund",
    Type = "type",
    Investor = "investor",
    Timestamp = "timestamp",
    Transaction = "transaction",
    InvestmentState = "investmentState",
    Shares = "shares",
    ComptrollerProxy = "comptrollerProxy",
    Fee = "fee",
    Payer = "payer",
    Payee = "payee",
    SettlementType = "settlementType",
    SharesDue = "sharesDue",
    FundState = "fundState"
}
export declare type FeeSharesChangeInterface = {
    id: Scalars['ID'];
    fund: Fund;
    investor: Account;
    timestamp: Scalars['BigInt'];
    type: ShareChangeType;
    investmentState: InvestmentState;
    shares: Scalars['BigDecimal'];
    fundState: FundState;
    transaction: Transaction;
};
export declare type FeeSharesChangeInterface_Filter = {
    id?: Maybe<Scalars['ID']>;
    id_not?: Maybe<Scalars['ID']>;
    id_gt?: Maybe<Scalars['ID']>;
    id_lt?: Maybe<Scalars['ID']>;
    id_gte?: Maybe<Scalars['ID']>;
    id_lte?: Maybe<Scalars['ID']>;
    id_in?: Maybe<Array<Scalars['ID']>>;
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    fund?: Maybe<Scalars['String']>;
    fund_not?: Maybe<Scalars['String']>;
    fund_gt?: Maybe<Scalars['String']>;
    fund_lt?: Maybe<Scalars['String']>;
    fund_gte?: Maybe<Scalars['String']>;
    fund_lte?: Maybe<Scalars['String']>;
    fund_in?: Maybe<Array<Scalars['String']>>;
    fund_not_in?: Maybe<Array<Scalars['String']>>;
    fund_contains?: Maybe<Scalars['String']>;
    fund_not_contains?: Maybe<Scalars['String']>;
    fund_starts_with?: Maybe<Scalars['String']>;
    fund_not_starts_with?: Maybe<Scalars['String']>;
    fund_ends_with?: Maybe<Scalars['String']>;
    fund_not_ends_with?: Maybe<Scalars['String']>;
    investor?: Maybe<Scalars['String']>;
    investor_not?: Maybe<Scalars['String']>;
    investor_gt?: Maybe<Scalars['String']>;
    investor_lt?: Maybe<Scalars['String']>;
    investor_gte?: Maybe<Scalars['String']>;
    investor_lte?: Maybe<Scalars['String']>;
    investor_in?: Maybe<Array<Scalars['String']>>;
    investor_not_in?: Maybe<Array<Scalars['String']>>;
    investor_contains?: Maybe<Scalars['String']>;
    investor_not_contains?: Maybe<Scalars['String']>;
    investor_starts_with?: Maybe<Scalars['String']>;
    investor_not_starts_with?: Maybe<Scalars['String']>;
    investor_ends_with?: Maybe<Scalars['String']>;
    investor_not_ends_with?: Maybe<Scalars['String']>;
    timestamp?: Maybe<Scalars['BigInt']>;
    timestamp_not?: Maybe<Scalars['BigInt']>;
    timestamp_gt?: Maybe<Scalars['BigInt']>;
    timestamp_lt?: Maybe<Scalars['BigInt']>;
    timestamp_gte?: Maybe<Scalars['BigInt']>;
    timestamp_lte?: Maybe<Scalars['BigInt']>;
    timestamp_in?: Maybe<Array<Scalars['BigInt']>>;
    timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;
    type?: Maybe<ShareChangeType>;
    type_not?: Maybe<ShareChangeType>;
    investmentState?: Maybe<Scalars['String']>;
    investmentState_not?: Maybe<Scalars['String']>;
    investmentState_gt?: Maybe<Scalars['String']>;
    investmentState_lt?: Maybe<Scalars['String']>;
    investmentState_gte?: Maybe<Scalars['String']>;
    investmentState_lte?: Maybe<Scalars['String']>;
    investmentState_in?: Maybe<Array<Scalars['String']>>;
    investmentState_not_in?: Maybe<Array<Scalars['String']>>;
    investmentState_contains?: Maybe<Scalars['String']>;
    investmentState_not_contains?: Maybe<Scalars['String']>;
    investmentState_starts_with?: Maybe<Scalars['String']>;
    investmentState_not_starts_with?: Maybe<Scalars['String']>;
    investmentState_ends_with?: Maybe<Scalars['String']>;
    investmentState_not_ends_with?: Maybe<Scalars['String']>;
    shares?: Maybe<Scalars['BigDecimal']>;
    shares_not?: Maybe<Scalars['BigDecimal']>;
    shares_gt?: Maybe<Scalars['BigDecimal']>;
    shares_lt?: Maybe<Scalars['BigDecimal']>;
    shares_gte?: Maybe<Scalars['BigDecimal']>;
    shares_lte?: Maybe<Scalars['BigDecimal']>;
    shares_in?: Maybe<Array<Scalars['BigDecimal']>>;
    shares_not_in?: Maybe<Array<Scalars['BigDecimal']>>;
    fundState?: Maybe<Scalars['String']>;
    fundState_not?: Maybe<Scalars['String']>;
    fundState_gt?: Maybe<Scalars['String']>;
    fundState_lt?: Maybe<Scalars['String']>;
    fundState_gte?: Maybe<Scalars['String']>;
    fundState_lte?: Maybe<Scalars['String']>;
    fundState_in?: Maybe<Array<Scalars['String']>>;
    fundState_not_in?: Maybe<Array<Scalars['String']>>;
    fundState_contains?: Maybe<Scalars['String']>;
    fundState_not_contains?: Maybe<Scalars['String']>;
    fundState_starts_with?: Maybe<Scalars['String']>;
    fundState_not_starts_with?: Maybe<Scalars['String']>;
    fundState_ends_with?: Maybe<Scalars['String']>;
    fundState_not_ends_with?: Maybe<Scalars['String']>;
    transaction?: Maybe<Scalars['String']>;
    transaction_not?: Maybe<Scalars['String']>;
    transaction_gt?: Maybe<Scalars['String']>;
    transaction_lt?: Maybe<Scalars['String']>;
    transaction_gte?: Maybe<Scalars['String']>;
    transaction_lte?: Maybe<Scalars['String']>;
    transaction_in?: Maybe<Array<Scalars['String']>>;
    transaction_not_in?: Maybe<Array<Scalars['String']>>;
    transaction_contains?: Maybe<Scalars['String']>;
    transaction_not_contains?: Maybe<Scalars['String']>;
    transaction_starts_with?: Maybe<Scalars['String']>;
    transaction_not_starts_with?: Maybe<Scalars['String']>;
    transaction_ends_with?: Maybe<Scalars['String']>;
    transaction_not_ends_with?: Maybe<Scalars['String']>;
};
export declare enum FeeSharesChangeInterface_OrderBy {
    Id = "id",
    Fund = "fund",
    Investor = "investor",
    Timestamp = "timestamp",
    Type = "type",
    InvestmentState = "investmentState",
    Shares = "shares",
    FundState = "fundState",
    Transaction = "transaction"
}
export declare type FeeState = FundStateInterface & {
    __typename?: 'FeeState';
    id: Scalars['ID'];
    fund: Fund;
    timestamp: Scalars['BigInt'];
    feeStates: Array<IndividualFeeStateInterface>;
    events: Array<FundEventInterface>;
};
export declare type FeeStateFeeStatesArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<IndividualFeeStateInterface_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<IndividualFeeStateInterface_Filter>;
};
export declare type FeeStateEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<FundEventInterface_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<FundEventInterface_Filter>;
};
export declare type FeeState_Filter = {
    id?: Maybe<Scalars['ID']>;
    id_not?: Maybe<Scalars['ID']>;
    id_gt?: Maybe<Scalars['ID']>;
    id_lt?: Maybe<Scalars['ID']>;
    id_gte?: Maybe<Scalars['ID']>;
    id_lte?: Maybe<Scalars['ID']>;
    id_in?: Maybe<Array<Scalars['ID']>>;
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    fund?: Maybe<Scalars['String']>;
    fund_not?: Maybe<Scalars['String']>;
    fund_gt?: Maybe<Scalars['String']>;
    fund_lt?: Maybe<Scalars['String']>;
    fund_gte?: Maybe<Scalars['String']>;
    fund_lte?: Maybe<Scalars['String']>;
    fund_in?: Maybe<Array<Scalars['String']>>;
    fund_not_in?: Maybe<Array<Scalars['String']>>;
    fund_contains?: Maybe<Scalars['String']>;
    fund_not_contains?: Maybe<Scalars['String']>;
    fund_starts_with?: Maybe<Scalars['String']>;
    fund_not_starts_with?: Maybe<Scalars['String']>;
    fund_ends_with?: Maybe<Scalars['String']>;
    fund_not_ends_with?: Maybe<Scalars['String']>;
    timestamp?: Maybe<Scalars['BigInt']>;
    timestamp_not?: Maybe<Scalars['BigInt']>;
    timestamp_gt?: Maybe<Scalars['BigInt']>;
    timestamp_lt?: Maybe<Scalars['BigInt']>;
    timestamp_gte?: Maybe<Scalars['BigInt']>;
    timestamp_lte?: Maybe<Scalars['BigInt']>;
    timestamp_in?: Maybe<Array<Scalars['BigInt']>>;
    timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;
    feeStates?: Maybe<Array<Scalars['String']>>;
    feeStates_not?: Maybe<Array<Scalars['String']>>;
    feeStates_contains?: Maybe<Array<Scalars['String']>>;
    feeStates_not_contains?: Maybe<Array<Scalars['String']>>;
    events?: Maybe<Array<Scalars['String']>>;
    events_not?: Maybe<Array<Scalars['String']>>;
    events_contains?: Maybe<Array<Scalars['String']>>;
    events_not_contains?: Maybe<Array<Scalars['String']>>;
};
export declare enum FeeState_OrderBy {
    Id = "id",
    Fund = "fund",
    Timestamp = "timestamp",
    FeeStates = "feeStates",
    Events = "events"
}
export declare type Fee_Filter = {
    id?: Maybe<Scalars['ID']>;
    id_not?: Maybe<Scalars['ID']>;
    id_gt?: Maybe<Scalars['ID']>;
    id_lt?: Maybe<Scalars['ID']>;
    id_gte?: Maybe<Scalars['ID']>;
    id_lte?: Maybe<Scalars['ID']>;
    id_in?: Maybe<Array<Scalars['ID']>>;
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    feeManager?: Maybe<Scalars['String']>;
    feeManager_not?: Maybe<Scalars['String']>;
    feeManager_gt?: Maybe<Scalars['String']>;
    feeManager_lt?: Maybe<Scalars['String']>;
    feeManager_gte?: Maybe<Scalars['String']>;
    feeManager_lte?: Maybe<Scalars['String']>;
    feeManager_in?: Maybe<Array<Scalars['String']>>;
    feeManager_not_in?: Maybe<Array<Scalars['String']>>;
    feeManager_contains?: Maybe<Scalars['String']>;
    feeManager_not_contains?: Maybe<Scalars['String']>;
    feeManager_starts_with?: Maybe<Scalars['String']>;
    feeManager_not_starts_with?: Maybe<Scalars['String']>;
    feeManager_ends_with?: Maybe<Scalars['String']>;
    feeManager_not_ends_with?: Maybe<Scalars['String']>;
    identifier?: Maybe<Scalars['String']>;
    identifier_not?: Maybe<Scalars['String']>;
    identifier_gt?: Maybe<Scalars['String']>;
    identifier_lt?: Maybe<Scalars['String']>;
    identifier_gte?: Maybe<Scalars['String']>;
    identifier_lte?: Maybe<Scalars['String']>;
    identifier_in?: Maybe<Array<Scalars['String']>>;
    identifier_not_in?: Maybe<Array<Scalars['String']>>;
    identifier_contains?: Maybe<Scalars['String']>;
    identifier_not_contains?: Maybe<Scalars['String']>;
    identifier_starts_with?: Maybe<Scalars['String']>;
    identifier_not_starts_with?: Maybe<Scalars['String']>;
    identifier_ends_with?: Maybe<Scalars['String']>;
    identifier_not_ends_with?: Maybe<Scalars['String']>;
};
export declare enum Fee_OrderBy {
    Id = "id",
    FeeManager = "feeManager",
    Identifier = "identifier",
    Settings = "settings"
}
export declare type FeesRecipientSetForFundEvent = EventInterface & FundEventInterface & {
    __typename?: 'FeesRecipientSetForFundEvent';
    id: Scalars['ID'];
    fund: Fund;
    timestamp: Scalars['BigInt'];
    transaction: Transaction;
    comptrollerProxy: ComptrollerProxy;
    prevFeesRecipient: Scalars['String'];
    nextFeesRecipient: Scalars['String'];
};
export declare type FeesRecipientSetForFundEvent_Filter = {
    id?: Maybe<Scalars['ID']>;
    id_not?: Maybe<Scalars['ID']>;
    id_gt?: Maybe<Scalars['ID']>;
    id_lt?: Maybe<Scalars['ID']>;
    id_gte?: Maybe<Scalars['ID']>;
    id_lte?: Maybe<Scalars['ID']>;
    id_in?: Maybe<Array<Scalars['ID']>>;
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    fund?: Maybe<Scalars['String']>;
    fund_not?: Maybe<Scalars['String']>;
    fund_gt?: Maybe<Scalars['String']>;
    fund_lt?: Maybe<Scalars['String']>;
    fund_gte?: Maybe<Scalars['String']>;
    fund_lte?: Maybe<Scalars['String']>;
    fund_in?: Maybe<Array<Scalars['String']>>;
    fund_not_in?: Maybe<Array<Scalars['String']>>;
    fund_contains?: Maybe<Scalars['String']>;
    fund_not_contains?: Maybe<Scalars['String']>;
    fund_starts_with?: Maybe<Scalars['String']>;
    fund_not_starts_with?: Maybe<Scalars['String']>;
    fund_ends_with?: Maybe<Scalars['String']>;
    fund_not_ends_with?: Maybe<Scalars['String']>;
    timestamp?: Maybe<Scalars['BigInt']>;
    timestamp_not?: Maybe<Scalars['BigInt']>;
    timestamp_gt?: Maybe<Scalars['BigInt']>;
    timestamp_lt?: Maybe<Scalars['BigInt']>;
    timestamp_gte?: Maybe<Scalars['BigInt']>;
    timestamp_lte?: Maybe<Scalars['BigInt']>;
    timestamp_in?: Maybe<Array<Scalars['BigInt']>>;
    timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;
    transaction?: Maybe<Scalars['String']>;
    transaction_not?: Maybe<Scalars['String']>;
    transaction_gt?: Maybe<Scalars['String']>;
    transaction_lt?: Maybe<Scalars['String']>;
    transaction_gte?: Maybe<Scalars['String']>;
    transaction_lte?: Maybe<Scalars['String']>;
    transaction_in?: Maybe<Array<Scalars['String']>>;
    transaction_not_in?: Maybe<Array<Scalars['String']>>;
    transaction_contains?: Maybe<Scalars['String']>;
    transaction_not_contains?: Maybe<Scalars['String']>;
    transaction_starts_with?: Maybe<Scalars['String']>;
    transaction_not_starts_with?: Maybe<Scalars['String']>;
    transaction_ends_with?: Maybe<Scalars['String']>;
    transaction_not_ends_with?: Maybe<Scalars['String']>;
    comptrollerProxy?: Maybe<Scalars['String']>;
    comptrollerProxy_not?: Maybe<Scalars['String']>;
    comptrollerProxy_gt?: Maybe<Scalars['String']>;
    comptrollerProxy_lt?: Maybe<Scalars['String']>;
    comptrollerProxy_gte?: Maybe<Scalars['String']>;
    comptrollerProxy_lte?: Maybe<Scalars['String']>;
    comptrollerProxy_in?: Maybe<Array<Scalars['String']>>;
    comptrollerProxy_not_in?: Maybe<Array<Scalars['String']>>;
    comptrollerProxy_contains?: Maybe<Scalars['String']>;
    comptrollerProxy_not_contains?: Maybe<Scalars['String']>;
    comptrollerProxy_starts_with?: Maybe<Scalars['String']>;
    comptrollerProxy_not_starts_with?: Maybe<Scalars['String']>;
    comptrollerProxy_ends_with?: Maybe<Scalars['String']>;
    comptrollerProxy_not_ends_with?: Maybe<Scalars['String']>;
    prevFeesRecipient?: Maybe<Scalars['String']>;
    prevFeesRecipient_not?: Maybe<Scalars['String']>;
    prevFeesRecipient_gt?: Maybe<Scalars['String']>;
    prevFeesRecipient_lt?: Maybe<Scalars['String']>;
    prevFeesRecipient_gte?: Maybe<Scalars['String']>;
    prevFeesRecipient_lte?: Maybe<Scalars['String']>;
    prevFeesRecipient_in?: Maybe<Array<Scalars['String']>>;
    prevFeesRecipient_not_in?: Maybe<Array<Scalars['String']>>;
    prevFeesRecipient_contains?: Maybe<Scalars['String']>;
    prevFeesRecipient_not_contains?: Maybe<Scalars['String']>;
    prevFeesRecipient_starts_with?: Maybe<Scalars['String']>;
    prevFeesRecipient_not_starts_with?: Maybe<Scalars['String']>;
    prevFeesRecipient_ends_with?: Maybe<Scalars['String']>;
    prevFeesRecipient_not_ends_with?: Maybe<Scalars['String']>;
    nextFeesRecipient?: Maybe<Scalars['String']>;
    nextFeesRecipient_not?: Maybe<Scalars['String']>;
    nextFeesRecipient_gt?: Maybe<Scalars['String']>;
    nextFeesRecipient_lt?: Maybe<Scalars['String']>;
    nextFeesRecipient_gte?: Maybe<Scalars['String']>;
    nextFeesRecipient_lte?: Maybe<Scalars['String']>;
    nextFeesRecipient_in?: Maybe<Array<Scalars['String']>>;
    nextFeesRecipient_not_in?: Maybe<Array<Scalars['String']>>;
    nextFeesRecipient_contains?: Maybe<Scalars['String']>;
    nextFeesRecipient_not_contains?: Maybe<Scalars['String']>;
    nextFeesRecipient_starts_with?: Maybe<Scalars['String']>;
    nextFeesRecipient_not_starts_with?: Maybe<Scalars['String']>;
    nextFeesRecipient_ends_with?: Maybe<Scalars['String']>;
    nextFeesRecipient_not_ends_with?: Maybe<Scalars['String']>;
};
export declare enum FeesRecipientSetForFundEvent_OrderBy {
    Id = "id",
    Fund = "fund",
    Timestamp = "timestamp",
    Transaction = "transaction",
    ComptrollerProxy = "comptrollerProxy",
    PrevFeesRecipient = "prevFeesRecipient",
    NextFeesRecipient = "nextFeesRecipient"
}
export declare type Fund = {
    __typename?: 'Fund';
    id: Scalars['ID'];
    accessor: ComptrollerProxy;
    comptrollerProxies: Array<ComptrollerProxy>;
    name: Scalars['String'];
    inception: Scalars['BigInt'];
    creator: Account;
    release: Release;
    manager: Account;
    migrator?: Maybe<Scalars['String']>;
    lastKnowGavInEth?: Maybe<Scalars['BigDecimal']>;
    trackedAssets: Array<Asset>;
    trades: Array<Trade>;
    investments: Array<Investment>;
    investmentCount: Scalars['Int'];
    sharesChanges: Array<SharesChangeInterface>;
    feeSharesChanges: Array<FeeSharesChangeInterface>;
    investmentSharesChanges: Array<InvestmentSharesChangeInterface>;
    shares: ShareState;
    sharesHistory: Array<ShareState>;
    portfolio: PortfolioState;
    portfolioHistory: Array<PortfolioState>;
    feeState: FeeState;
    feeStateHistory: Array<FeeState>;
    state: FundState;
    stateHistory: Array<FundState>;
    firstInvestmentState?: Maybe<FundState>;
    hourlyStates: Array<HourlyFundState>;
    dailyStates: Array<DailyFundState>;
    monthlyStates: Array<MonthlyFundState>;
    events: Array<FundEventInterface>;
    migrations?: Maybe<Array<Migration>>;
};
export declare type FundComptrollerProxiesArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<ComptrollerProxy_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<ComptrollerProxy_Filter>;
};
export declare type FundTrackedAssetsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<Asset_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<Asset_Filter>;
};
export declare type FundTradesArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<Trade_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<Trade_Filter>;
};
export declare type FundInvestmentsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<Investment_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<Investment_Filter>;
};
export declare type FundSharesChangesArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<SharesChangeInterface_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<SharesChangeInterface_Filter>;
};
export declare type FundFeeSharesChangesArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<FeeSharesChangeInterface_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<FeeSharesChangeInterface_Filter>;
};
export declare type FundInvestmentSharesChangesArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<InvestmentSharesChangeInterface_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<InvestmentSharesChangeInterface_Filter>;
};
export declare type FundSharesHistoryArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<ShareState_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<ShareState_Filter>;
};
export declare type FundPortfolioHistoryArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<PortfolioState_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<PortfolioState_Filter>;
};
export declare type FundFeeStateHistoryArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<FeeState_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<FeeState_Filter>;
};
export declare type FundStateHistoryArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<FundState_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<FundState_Filter>;
};
export declare type FundHourlyStatesArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<HourlyFundState_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<HourlyFundState_Filter>;
};
export declare type FundDailyStatesArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<DailyFundState_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<DailyFundState_Filter>;
};
export declare type FundMonthlyStatesArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<MonthlyFundState_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<MonthlyFundState_Filter>;
};
export declare type FundEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<FundEventInterface_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<FundEventInterface_Filter>;
};
export declare type FundMigrationsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<Migration_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<Migration_Filter>;
};
export declare type FundDeployerSetEvent = EventInterface & NetworkEventInterface & {
    __typename?: 'FundDeployerSetEvent';
    id: Scalars['ID'];
    timestamp: Scalars['BigInt'];
    transaction: Transaction;
    nextFundDeployer: Scalars['String'];
    prevFundDeployer?: Maybe<Scalars['String']>;
};
export declare type FundDeployerSetEvent_Filter = {
    id?: Maybe<Scalars['ID']>;
    id_not?: Maybe<Scalars['ID']>;
    id_gt?: Maybe<Scalars['ID']>;
    id_lt?: Maybe<Scalars['ID']>;
    id_gte?: Maybe<Scalars['ID']>;
    id_lte?: Maybe<Scalars['ID']>;
    id_in?: Maybe<Array<Scalars['ID']>>;
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    timestamp?: Maybe<Scalars['BigInt']>;
    timestamp_not?: Maybe<Scalars['BigInt']>;
    timestamp_gt?: Maybe<Scalars['BigInt']>;
    timestamp_lt?: Maybe<Scalars['BigInt']>;
    timestamp_gte?: Maybe<Scalars['BigInt']>;
    timestamp_lte?: Maybe<Scalars['BigInt']>;
    timestamp_in?: Maybe<Array<Scalars['BigInt']>>;
    timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;
    transaction?: Maybe<Scalars['String']>;
    transaction_not?: Maybe<Scalars['String']>;
    transaction_gt?: Maybe<Scalars['String']>;
    transaction_lt?: Maybe<Scalars['String']>;
    transaction_gte?: Maybe<Scalars['String']>;
    transaction_lte?: Maybe<Scalars['String']>;
    transaction_in?: Maybe<Array<Scalars['String']>>;
    transaction_not_in?: Maybe<Array<Scalars['String']>>;
    transaction_contains?: Maybe<Scalars['String']>;
    transaction_not_contains?: Maybe<Scalars['String']>;
    transaction_starts_with?: Maybe<Scalars['String']>;
    transaction_not_starts_with?: Maybe<Scalars['String']>;
    transaction_ends_with?: Maybe<Scalars['String']>;
    transaction_not_ends_with?: Maybe<Scalars['String']>;
    nextFundDeployer?: Maybe<Scalars['String']>;
    nextFundDeployer_not?: Maybe<Scalars['String']>;
    nextFundDeployer_gt?: Maybe<Scalars['String']>;
    nextFundDeployer_lt?: Maybe<Scalars['String']>;
    nextFundDeployer_gte?: Maybe<Scalars['String']>;
    nextFundDeployer_lte?: Maybe<Scalars['String']>;
    nextFundDeployer_in?: Maybe<Array<Scalars['String']>>;
    nextFundDeployer_not_in?: Maybe<Array<Scalars['String']>>;
    nextFundDeployer_contains?: Maybe<Scalars['String']>;
    nextFundDeployer_not_contains?: Maybe<Scalars['String']>;
    nextFundDeployer_starts_with?: Maybe<Scalars['String']>;
    nextFundDeployer_not_starts_with?: Maybe<Scalars['String']>;
    nextFundDeployer_ends_with?: Maybe<Scalars['String']>;
    nextFundDeployer_not_ends_with?: Maybe<Scalars['String']>;
    prevFundDeployer?: Maybe<Scalars['String']>;
    prevFundDeployer_not?: Maybe<Scalars['String']>;
    prevFundDeployer_gt?: Maybe<Scalars['String']>;
    prevFundDeployer_lt?: Maybe<Scalars['String']>;
    prevFundDeployer_gte?: Maybe<Scalars['String']>;
    prevFundDeployer_lte?: Maybe<Scalars['String']>;
    prevFundDeployer_in?: Maybe<Array<Scalars['String']>>;
    prevFundDeployer_not_in?: Maybe<Array<Scalars['String']>>;
    prevFundDeployer_contains?: Maybe<Scalars['String']>;
    prevFundDeployer_not_contains?: Maybe<Scalars['String']>;
    prevFundDeployer_starts_with?: Maybe<Scalars['String']>;
    prevFundDeployer_not_starts_with?: Maybe<Scalars['String']>;
    prevFundDeployer_ends_with?: Maybe<Scalars['String']>;
    prevFundDeployer_not_ends_with?: Maybe<Scalars['String']>;
};
export declare enum FundDeployerSetEvent_OrderBy {
    Id = "id",
    Timestamp = "timestamp",
    Transaction = "transaction",
    NextFundDeployer = "nextFundDeployer",
    PrevFundDeployer = "prevFundDeployer"
}
export declare type FundEventInterface = {
    id: Scalars['ID'];
    fund: Fund;
    timestamp: Scalars['BigInt'];
    transaction: Transaction;
};
export declare type FundEventInterface_Filter = {
    id?: Maybe<Scalars['ID']>;
    id_not?: Maybe<Scalars['ID']>;
    id_gt?: Maybe<Scalars['ID']>;
    id_lt?: Maybe<Scalars['ID']>;
    id_gte?: Maybe<Scalars['ID']>;
    id_lte?: Maybe<Scalars['ID']>;
    id_in?: Maybe<Array<Scalars['ID']>>;
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    fund?: Maybe<Scalars['String']>;
    fund_not?: Maybe<Scalars['String']>;
    fund_gt?: Maybe<Scalars['String']>;
    fund_lt?: Maybe<Scalars['String']>;
    fund_gte?: Maybe<Scalars['String']>;
    fund_lte?: Maybe<Scalars['String']>;
    fund_in?: Maybe<Array<Scalars['String']>>;
    fund_not_in?: Maybe<Array<Scalars['String']>>;
    fund_contains?: Maybe<Scalars['String']>;
    fund_not_contains?: Maybe<Scalars['String']>;
    fund_starts_with?: Maybe<Scalars['String']>;
    fund_not_starts_with?: Maybe<Scalars['String']>;
    fund_ends_with?: Maybe<Scalars['String']>;
    fund_not_ends_with?: Maybe<Scalars['String']>;
    timestamp?: Maybe<Scalars['BigInt']>;
    timestamp_not?: Maybe<Scalars['BigInt']>;
    timestamp_gt?: Maybe<Scalars['BigInt']>;
    timestamp_lt?: Maybe<Scalars['BigInt']>;
    timestamp_gte?: Maybe<Scalars['BigInt']>;
    timestamp_lte?: Maybe<Scalars['BigInt']>;
    timestamp_in?: Maybe<Array<Scalars['BigInt']>>;
    timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;
    transaction?: Maybe<Scalars['String']>;
    transaction_not?: Maybe<Scalars['String']>;
    transaction_gt?: Maybe<Scalars['String']>;
    transaction_lt?: Maybe<Scalars['String']>;
    transaction_gte?: Maybe<Scalars['String']>;
    transaction_lte?: Maybe<Scalars['String']>;
    transaction_in?: Maybe<Array<Scalars['String']>>;
    transaction_not_in?: Maybe<Array<Scalars['String']>>;
    transaction_contains?: Maybe<Scalars['String']>;
    transaction_not_contains?: Maybe<Scalars['String']>;
    transaction_starts_with?: Maybe<Scalars['String']>;
    transaction_not_starts_with?: Maybe<Scalars['String']>;
    transaction_ends_with?: Maybe<Scalars['String']>;
    transaction_not_ends_with?: Maybe<Scalars['String']>;
};
export declare enum FundEventInterface_OrderBy {
    Id = "id",
    Fund = "fund",
    Timestamp = "timestamp",
    Transaction = "transaction"
}
export declare type FundState = FundStateInterface & {
    __typename?: 'FundState';
    id: Scalars['ID'];
    fund: Fund;
    timestamp: Scalars['BigInt'];
    shares: ShareState;
    portfolio: PortfolioState;
    feeState: FeeState;
    currencyPrices: Array<CurrencyPrice>;
    investmentCount: Scalars['Int'];
    events: Array<FundEventInterface>;
};
export declare type FundStateCurrencyPricesArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<CurrencyPrice_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<CurrencyPrice_Filter>;
};
export declare type FundStateEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<FundEventInterface_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<FundEventInterface_Filter>;
};
export declare type FundStateInterface = {
    id: Scalars['ID'];
    fund: Fund;
    timestamp: Scalars['BigInt'];
    events: Array<FundEventInterface>;
};
export declare type FundStateInterfaceEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<FundEventInterface_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<FundEventInterface_Filter>;
};
export declare type FundStateInterface_Filter = {
    id?: Maybe<Scalars['ID']>;
    id_not?: Maybe<Scalars['ID']>;
    id_gt?: Maybe<Scalars['ID']>;
    id_lt?: Maybe<Scalars['ID']>;
    id_gte?: Maybe<Scalars['ID']>;
    id_lte?: Maybe<Scalars['ID']>;
    id_in?: Maybe<Array<Scalars['ID']>>;
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    fund?: Maybe<Scalars['String']>;
    fund_not?: Maybe<Scalars['String']>;
    fund_gt?: Maybe<Scalars['String']>;
    fund_lt?: Maybe<Scalars['String']>;
    fund_gte?: Maybe<Scalars['String']>;
    fund_lte?: Maybe<Scalars['String']>;
    fund_in?: Maybe<Array<Scalars['String']>>;
    fund_not_in?: Maybe<Array<Scalars['String']>>;
    fund_contains?: Maybe<Scalars['String']>;
    fund_not_contains?: Maybe<Scalars['String']>;
    fund_starts_with?: Maybe<Scalars['String']>;
    fund_not_starts_with?: Maybe<Scalars['String']>;
    fund_ends_with?: Maybe<Scalars['String']>;
    fund_not_ends_with?: Maybe<Scalars['String']>;
    timestamp?: Maybe<Scalars['BigInt']>;
    timestamp_not?: Maybe<Scalars['BigInt']>;
    timestamp_gt?: Maybe<Scalars['BigInt']>;
    timestamp_lt?: Maybe<Scalars['BigInt']>;
    timestamp_gte?: Maybe<Scalars['BigInt']>;
    timestamp_lte?: Maybe<Scalars['BigInt']>;
    timestamp_in?: Maybe<Array<Scalars['BigInt']>>;
    timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;
    events?: Maybe<Array<Scalars['String']>>;
    events_not?: Maybe<Array<Scalars['String']>>;
    events_contains?: Maybe<Array<Scalars['String']>>;
    events_not_contains?: Maybe<Array<Scalars['String']>>;
};
export declare enum FundStateInterface_OrderBy {
    Id = "id",
    Fund = "fund",
    Timestamp = "timestamp",
    Events = "events"
}
export declare type FundState_Filter = {
    id?: Maybe<Scalars['ID']>;
    id_not?: Maybe<Scalars['ID']>;
    id_gt?: Maybe<Scalars['ID']>;
    id_lt?: Maybe<Scalars['ID']>;
    id_gte?: Maybe<Scalars['ID']>;
    id_lte?: Maybe<Scalars['ID']>;
    id_in?: Maybe<Array<Scalars['ID']>>;
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    fund?: Maybe<Scalars['String']>;
    fund_not?: Maybe<Scalars['String']>;
    fund_gt?: Maybe<Scalars['String']>;
    fund_lt?: Maybe<Scalars['String']>;
    fund_gte?: Maybe<Scalars['String']>;
    fund_lte?: Maybe<Scalars['String']>;
    fund_in?: Maybe<Array<Scalars['String']>>;
    fund_not_in?: Maybe<Array<Scalars['String']>>;
    fund_contains?: Maybe<Scalars['String']>;
    fund_not_contains?: Maybe<Scalars['String']>;
    fund_starts_with?: Maybe<Scalars['String']>;
    fund_not_starts_with?: Maybe<Scalars['String']>;
    fund_ends_with?: Maybe<Scalars['String']>;
    fund_not_ends_with?: Maybe<Scalars['String']>;
    timestamp?: Maybe<Scalars['BigInt']>;
    timestamp_not?: Maybe<Scalars['BigInt']>;
    timestamp_gt?: Maybe<Scalars['BigInt']>;
    timestamp_lt?: Maybe<Scalars['BigInt']>;
    timestamp_gte?: Maybe<Scalars['BigInt']>;
    timestamp_lte?: Maybe<Scalars['BigInt']>;
    timestamp_in?: Maybe<Array<Scalars['BigInt']>>;
    timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;
    shares?: Maybe<Scalars['String']>;
    shares_not?: Maybe<Scalars['String']>;
    shares_gt?: Maybe<Scalars['String']>;
    shares_lt?: Maybe<Scalars['String']>;
    shares_gte?: Maybe<Scalars['String']>;
    shares_lte?: Maybe<Scalars['String']>;
    shares_in?: Maybe<Array<Scalars['String']>>;
    shares_not_in?: Maybe<Array<Scalars['String']>>;
    shares_contains?: Maybe<Scalars['String']>;
    shares_not_contains?: Maybe<Scalars['String']>;
    shares_starts_with?: Maybe<Scalars['String']>;
    shares_not_starts_with?: Maybe<Scalars['String']>;
    shares_ends_with?: Maybe<Scalars['String']>;
    shares_not_ends_with?: Maybe<Scalars['String']>;
    portfolio?: Maybe<Scalars['String']>;
    portfolio_not?: Maybe<Scalars['String']>;
    portfolio_gt?: Maybe<Scalars['String']>;
    portfolio_lt?: Maybe<Scalars['String']>;
    portfolio_gte?: Maybe<Scalars['String']>;
    portfolio_lte?: Maybe<Scalars['String']>;
    portfolio_in?: Maybe<Array<Scalars['String']>>;
    portfolio_not_in?: Maybe<Array<Scalars['String']>>;
    portfolio_contains?: Maybe<Scalars['String']>;
    portfolio_not_contains?: Maybe<Scalars['String']>;
    portfolio_starts_with?: Maybe<Scalars['String']>;
    portfolio_not_starts_with?: Maybe<Scalars['String']>;
    portfolio_ends_with?: Maybe<Scalars['String']>;
    portfolio_not_ends_with?: Maybe<Scalars['String']>;
    feeState?: Maybe<Scalars['String']>;
    feeState_not?: Maybe<Scalars['String']>;
    feeState_gt?: Maybe<Scalars['String']>;
    feeState_lt?: Maybe<Scalars['String']>;
    feeState_gte?: Maybe<Scalars['String']>;
    feeState_lte?: Maybe<Scalars['String']>;
    feeState_in?: Maybe<Array<Scalars['String']>>;
    feeState_not_in?: Maybe<Array<Scalars['String']>>;
    feeState_contains?: Maybe<Scalars['String']>;
    feeState_not_contains?: Maybe<Scalars['String']>;
    feeState_starts_with?: Maybe<Scalars['String']>;
    feeState_not_starts_with?: Maybe<Scalars['String']>;
    feeState_ends_with?: Maybe<Scalars['String']>;
    feeState_not_ends_with?: Maybe<Scalars['String']>;
    currencyPrices?: Maybe<Array<Scalars['String']>>;
    currencyPrices_not?: Maybe<Array<Scalars['String']>>;
    currencyPrices_contains?: Maybe<Array<Scalars['String']>>;
    currencyPrices_not_contains?: Maybe<Array<Scalars['String']>>;
    investmentCount?: Maybe<Scalars['Int']>;
    investmentCount_not?: Maybe<Scalars['Int']>;
    investmentCount_gt?: Maybe<Scalars['Int']>;
    investmentCount_lt?: Maybe<Scalars['Int']>;
    investmentCount_gte?: Maybe<Scalars['Int']>;
    investmentCount_lte?: Maybe<Scalars['Int']>;
    investmentCount_in?: Maybe<Array<Scalars['Int']>>;
    investmentCount_not_in?: Maybe<Array<Scalars['Int']>>;
    events?: Maybe<Array<Scalars['String']>>;
    events_not?: Maybe<Array<Scalars['String']>>;
    events_contains?: Maybe<Array<Scalars['String']>>;
    events_not_contains?: Maybe<Array<Scalars['String']>>;
};
export declare enum FundState_OrderBy {
    Id = "id",
    Fund = "fund",
    Timestamp = "timestamp",
    Shares = "shares",
    Portfolio = "portfolio",
    FeeState = "feeState",
    CurrencyPrices = "currencyPrices",
    InvestmentCount = "investmentCount",
    Events = "events"
}
export declare type Fund_Filter = {
    id?: Maybe<Scalars['ID']>;
    id_not?: Maybe<Scalars['ID']>;
    id_gt?: Maybe<Scalars['ID']>;
    id_lt?: Maybe<Scalars['ID']>;
    id_gte?: Maybe<Scalars['ID']>;
    id_lte?: Maybe<Scalars['ID']>;
    id_in?: Maybe<Array<Scalars['ID']>>;
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    accessor?: Maybe<Scalars['String']>;
    accessor_not?: Maybe<Scalars['String']>;
    accessor_gt?: Maybe<Scalars['String']>;
    accessor_lt?: Maybe<Scalars['String']>;
    accessor_gte?: Maybe<Scalars['String']>;
    accessor_lte?: Maybe<Scalars['String']>;
    accessor_in?: Maybe<Array<Scalars['String']>>;
    accessor_not_in?: Maybe<Array<Scalars['String']>>;
    accessor_contains?: Maybe<Scalars['String']>;
    accessor_not_contains?: Maybe<Scalars['String']>;
    accessor_starts_with?: Maybe<Scalars['String']>;
    accessor_not_starts_with?: Maybe<Scalars['String']>;
    accessor_ends_with?: Maybe<Scalars['String']>;
    accessor_not_ends_with?: Maybe<Scalars['String']>;
    name?: Maybe<Scalars['String']>;
    name_not?: Maybe<Scalars['String']>;
    name_gt?: Maybe<Scalars['String']>;
    name_lt?: Maybe<Scalars['String']>;
    name_gte?: Maybe<Scalars['String']>;
    name_lte?: Maybe<Scalars['String']>;
    name_in?: Maybe<Array<Scalars['String']>>;
    name_not_in?: Maybe<Array<Scalars['String']>>;
    name_contains?: Maybe<Scalars['String']>;
    name_not_contains?: Maybe<Scalars['String']>;
    name_starts_with?: Maybe<Scalars['String']>;
    name_not_starts_with?: Maybe<Scalars['String']>;
    name_ends_with?: Maybe<Scalars['String']>;
    name_not_ends_with?: Maybe<Scalars['String']>;
    inception?: Maybe<Scalars['BigInt']>;
    inception_not?: Maybe<Scalars['BigInt']>;
    inception_gt?: Maybe<Scalars['BigInt']>;
    inception_lt?: Maybe<Scalars['BigInt']>;
    inception_gte?: Maybe<Scalars['BigInt']>;
    inception_lte?: Maybe<Scalars['BigInt']>;
    inception_in?: Maybe<Array<Scalars['BigInt']>>;
    inception_not_in?: Maybe<Array<Scalars['BigInt']>>;
    creator?: Maybe<Scalars['String']>;
    creator_not?: Maybe<Scalars['String']>;
    creator_gt?: Maybe<Scalars['String']>;
    creator_lt?: Maybe<Scalars['String']>;
    creator_gte?: Maybe<Scalars['String']>;
    creator_lte?: Maybe<Scalars['String']>;
    creator_in?: Maybe<Array<Scalars['String']>>;
    creator_not_in?: Maybe<Array<Scalars['String']>>;
    creator_contains?: Maybe<Scalars['String']>;
    creator_not_contains?: Maybe<Scalars['String']>;
    creator_starts_with?: Maybe<Scalars['String']>;
    creator_not_starts_with?: Maybe<Scalars['String']>;
    creator_ends_with?: Maybe<Scalars['String']>;
    creator_not_ends_with?: Maybe<Scalars['String']>;
    release?: Maybe<Scalars['String']>;
    release_not?: Maybe<Scalars['String']>;
    release_gt?: Maybe<Scalars['String']>;
    release_lt?: Maybe<Scalars['String']>;
    release_gte?: Maybe<Scalars['String']>;
    release_lte?: Maybe<Scalars['String']>;
    release_in?: Maybe<Array<Scalars['String']>>;
    release_not_in?: Maybe<Array<Scalars['String']>>;
    release_contains?: Maybe<Scalars['String']>;
    release_not_contains?: Maybe<Scalars['String']>;
    release_starts_with?: Maybe<Scalars['String']>;
    release_not_starts_with?: Maybe<Scalars['String']>;
    release_ends_with?: Maybe<Scalars['String']>;
    release_not_ends_with?: Maybe<Scalars['String']>;
    manager?: Maybe<Scalars['String']>;
    manager_not?: Maybe<Scalars['String']>;
    manager_gt?: Maybe<Scalars['String']>;
    manager_lt?: Maybe<Scalars['String']>;
    manager_gte?: Maybe<Scalars['String']>;
    manager_lte?: Maybe<Scalars['String']>;
    manager_in?: Maybe<Array<Scalars['String']>>;
    manager_not_in?: Maybe<Array<Scalars['String']>>;
    manager_contains?: Maybe<Scalars['String']>;
    manager_not_contains?: Maybe<Scalars['String']>;
    manager_starts_with?: Maybe<Scalars['String']>;
    manager_not_starts_with?: Maybe<Scalars['String']>;
    manager_ends_with?: Maybe<Scalars['String']>;
    manager_not_ends_with?: Maybe<Scalars['String']>;
    migrator?: Maybe<Scalars['String']>;
    migrator_not?: Maybe<Scalars['String']>;
    migrator_gt?: Maybe<Scalars['String']>;
    migrator_lt?: Maybe<Scalars['String']>;
    migrator_gte?: Maybe<Scalars['String']>;
    migrator_lte?: Maybe<Scalars['String']>;
    migrator_in?: Maybe<Array<Scalars['String']>>;
    migrator_not_in?: Maybe<Array<Scalars['String']>>;
    migrator_contains?: Maybe<Scalars['String']>;
    migrator_not_contains?: Maybe<Scalars['String']>;
    migrator_starts_with?: Maybe<Scalars['String']>;
    migrator_not_starts_with?: Maybe<Scalars['String']>;
    migrator_ends_with?: Maybe<Scalars['String']>;
    migrator_not_ends_with?: Maybe<Scalars['String']>;
    lastKnowGavInEth?: Maybe<Scalars['BigDecimal']>;
    lastKnowGavInEth_not?: Maybe<Scalars['BigDecimal']>;
    lastKnowGavInEth_gt?: Maybe<Scalars['BigDecimal']>;
    lastKnowGavInEth_lt?: Maybe<Scalars['BigDecimal']>;
    lastKnowGavInEth_gte?: Maybe<Scalars['BigDecimal']>;
    lastKnowGavInEth_lte?: Maybe<Scalars['BigDecimal']>;
    lastKnowGavInEth_in?: Maybe<Array<Scalars['BigDecimal']>>;
    lastKnowGavInEth_not_in?: Maybe<Array<Scalars['BigDecimal']>>;
    trackedAssets?: Maybe<Array<Scalars['String']>>;
    trackedAssets_not?: Maybe<Array<Scalars['String']>>;
    trackedAssets_contains?: Maybe<Array<Scalars['String']>>;
    trackedAssets_not_contains?: Maybe<Array<Scalars['String']>>;
    investmentCount?: Maybe<Scalars['Int']>;
    investmentCount_not?: Maybe<Scalars['Int']>;
    investmentCount_gt?: Maybe<Scalars['Int']>;
    investmentCount_lt?: Maybe<Scalars['Int']>;
    investmentCount_gte?: Maybe<Scalars['Int']>;
    investmentCount_lte?: Maybe<Scalars['Int']>;
    investmentCount_in?: Maybe<Array<Scalars['Int']>>;
    investmentCount_not_in?: Maybe<Array<Scalars['Int']>>;
    shares?: Maybe<Scalars['String']>;
    shares_not?: Maybe<Scalars['String']>;
    shares_gt?: Maybe<Scalars['String']>;
    shares_lt?: Maybe<Scalars['String']>;
    shares_gte?: Maybe<Scalars['String']>;
    shares_lte?: Maybe<Scalars['String']>;
    shares_in?: Maybe<Array<Scalars['String']>>;
    shares_not_in?: Maybe<Array<Scalars['String']>>;
    shares_contains?: Maybe<Scalars['String']>;
    shares_not_contains?: Maybe<Scalars['String']>;
    shares_starts_with?: Maybe<Scalars['String']>;
    shares_not_starts_with?: Maybe<Scalars['String']>;
    shares_ends_with?: Maybe<Scalars['String']>;
    shares_not_ends_with?: Maybe<Scalars['String']>;
    portfolio?: Maybe<Scalars['String']>;
    portfolio_not?: Maybe<Scalars['String']>;
    portfolio_gt?: Maybe<Scalars['String']>;
    portfolio_lt?: Maybe<Scalars['String']>;
    portfolio_gte?: Maybe<Scalars['String']>;
    portfolio_lte?: Maybe<Scalars['String']>;
    portfolio_in?: Maybe<Array<Scalars['String']>>;
    portfolio_not_in?: Maybe<Array<Scalars['String']>>;
    portfolio_contains?: Maybe<Scalars['String']>;
    portfolio_not_contains?: Maybe<Scalars['String']>;
    portfolio_starts_with?: Maybe<Scalars['String']>;
    portfolio_not_starts_with?: Maybe<Scalars['String']>;
    portfolio_ends_with?: Maybe<Scalars['String']>;
    portfolio_not_ends_with?: Maybe<Scalars['String']>;
    feeState?: Maybe<Scalars['String']>;
    feeState_not?: Maybe<Scalars['String']>;
    feeState_gt?: Maybe<Scalars['String']>;
    feeState_lt?: Maybe<Scalars['String']>;
    feeState_gte?: Maybe<Scalars['String']>;
    feeState_lte?: Maybe<Scalars['String']>;
    feeState_in?: Maybe<Array<Scalars['String']>>;
    feeState_not_in?: Maybe<Array<Scalars['String']>>;
    feeState_contains?: Maybe<Scalars['String']>;
    feeState_not_contains?: Maybe<Scalars['String']>;
    feeState_starts_with?: Maybe<Scalars['String']>;
    feeState_not_starts_with?: Maybe<Scalars['String']>;
    feeState_ends_with?: Maybe<Scalars['String']>;
    feeState_not_ends_with?: Maybe<Scalars['String']>;
    state?: Maybe<Scalars['String']>;
    state_not?: Maybe<Scalars['String']>;
    state_gt?: Maybe<Scalars['String']>;
    state_lt?: Maybe<Scalars['String']>;
    state_gte?: Maybe<Scalars['String']>;
    state_lte?: Maybe<Scalars['String']>;
    state_in?: Maybe<Array<Scalars['String']>>;
    state_not_in?: Maybe<Array<Scalars['String']>>;
    state_contains?: Maybe<Scalars['String']>;
    state_not_contains?: Maybe<Scalars['String']>;
    state_starts_with?: Maybe<Scalars['String']>;
    state_not_starts_with?: Maybe<Scalars['String']>;
    state_ends_with?: Maybe<Scalars['String']>;
    state_not_ends_with?: Maybe<Scalars['String']>;
    firstInvestmentState?: Maybe<Scalars['String']>;
    firstInvestmentState_not?: Maybe<Scalars['String']>;
    firstInvestmentState_gt?: Maybe<Scalars['String']>;
    firstInvestmentState_lt?: Maybe<Scalars['String']>;
    firstInvestmentState_gte?: Maybe<Scalars['String']>;
    firstInvestmentState_lte?: Maybe<Scalars['String']>;
    firstInvestmentState_in?: Maybe<Array<Scalars['String']>>;
    firstInvestmentState_not_in?: Maybe<Array<Scalars['String']>>;
    firstInvestmentState_contains?: Maybe<Scalars['String']>;
    firstInvestmentState_not_contains?: Maybe<Scalars['String']>;
    firstInvestmentState_starts_with?: Maybe<Scalars['String']>;
    firstInvestmentState_not_starts_with?: Maybe<Scalars['String']>;
    firstInvestmentState_ends_with?: Maybe<Scalars['String']>;
    firstInvestmentState_not_ends_with?: Maybe<Scalars['String']>;
};
export declare enum Fund_OrderBy {
    Id = "id",
    Accessor = "accessor",
    ComptrollerProxies = "comptrollerProxies",
    Name = "name",
    Inception = "inception",
    Creator = "creator",
    Release = "release",
    Manager = "manager",
    Migrator = "migrator",
    LastKnowGavInEth = "lastKnowGavInEth",
    TrackedAssets = "trackedAssets",
    Trades = "trades",
    Investments = "investments",
    InvestmentCount = "investmentCount",
    SharesChanges = "sharesChanges",
    FeeSharesChanges = "feeSharesChanges",
    InvestmentSharesChanges = "investmentSharesChanges",
    Shares = "shares",
    SharesHistory = "sharesHistory",
    Portfolio = "portfolio",
    PortfolioHistory = "portfolioHistory",
    FeeState = "feeState",
    FeeStateHistory = "feeStateHistory",
    State = "state",
    StateHistory = "stateHistory",
    FirstInvestmentState = "firstInvestmentState",
    HourlyStates = "hourlyStates",
    DailyStates = "dailyStates",
    MonthlyStates = "monthlyStates",
    Events = "events",
    Migrations = "migrations"
}
export declare type GuaranteedRedemption = {
    __typename?: 'GuaranteedRedemption';
    id: Scalars['ID'];
    adapters: Array<IntegrationAdapter>;
    buffer: Scalars['BigInt'];
};
export declare type GuaranteedRedemptionAdaptersArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<IntegrationAdapter_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<IntegrationAdapter_Filter>;
};
export declare type GuaranteedRedemptionAdapterAddedEvent = EventInterface & NetworkEventInterface & {
    __typename?: 'GuaranteedRedemptionAdapterAddedEvent';
    id: Scalars['ID'];
    timestamp: Scalars['BigInt'];
    transaction: Transaction;
    adapter: IntegrationAdapter;
};
export declare type GuaranteedRedemptionAdapterAddedEvent_Filter = {
    id?: Maybe<Scalars['ID']>;
    id_not?: Maybe<Scalars['ID']>;
    id_gt?: Maybe<Scalars['ID']>;
    id_lt?: Maybe<Scalars['ID']>;
    id_gte?: Maybe<Scalars['ID']>;
    id_lte?: Maybe<Scalars['ID']>;
    id_in?: Maybe<Array<Scalars['ID']>>;
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    timestamp?: Maybe<Scalars['BigInt']>;
    timestamp_not?: Maybe<Scalars['BigInt']>;
    timestamp_gt?: Maybe<Scalars['BigInt']>;
    timestamp_lt?: Maybe<Scalars['BigInt']>;
    timestamp_gte?: Maybe<Scalars['BigInt']>;
    timestamp_lte?: Maybe<Scalars['BigInt']>;
    timestamp_in?: Maybe<Array<Scalars['BigInt']>>;
    timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;
    transaction?: Maybe<Scalars['String']>;
    transaction_not?: Maybe<Scalars['String']>;
    transaction_gt?: Maybe<Scalars['String']>;
    transaction_lt?: Maybe<Scalars['String']>;
    transaction_gte?: Maybe<Scalars['String']>;
    transaction_lte?: Maybe<Scalars['String']>;
    transaction_in?: Maybe<Array<Scalars['String']>>;
    transaction_not_in?: Maybe<Array<Scalars['String']>>;
    transaction_contains?: Maybe<Scalars['String']>;
    transaction_not_contains?: Maybe<Scalars['String']>;
    transaction_starts_with?: Maybe<Scalars['String']>;
    transaction_not_starts_with?: Maybe<Scalars['String']>;
    transaction_ends_with?: Maybe<Scalars['String']>;
    transaction_not_ends_with?: Maybe<Scalars['String']>;
    adapter?: Maybe<Scalars['String']>;
    adapter_not?: Maybe<Scalars['String']>;
    adapter_gt?: Maybe<Scalars['String']>;
    adapter_lt?: Maybe<Scalars['String']>;
    adapter_gte?: Maybe<Scalars['String']>;
    adapter_lte?: Maybe<Scalars['String']>;
    adapter_in?: Maybe<Array<Scalars['String']>>;
    adapter_not_in?: Maybe<Array<Scalars['String']>>;
    adapter_contains?: Maybe<Scalars['String']>;
    adapter_not_contains?: Maybe<Scalars['String']>;
    adapter_starts_with?: Maybe<Scalars['String']>;
    adapter_not_starts_with?: Maybe<Scalars['String']>;
    adapter_ends_with?: Maybe<Scalars['String']>;
    adapter_not_ends_with?: Maybe<Scalars['String']>;
};
export declare enum GuaranteedRedemptionAdapterAddedEvent_OrderBy {
    Id = "id",
    Timestamp = "timestamp",
    Transaction = "transaction",
    Adapter = "adapter"
}
export declare type GuaranteedRedemptionAdapterRemovedEvent = EventInterface & NetworkEventInterface & {
    __typename?: 'GuaranteedRedemptionAdapterRemovedEvent';
    id: Scalars['ID'];
    timestamp: Scalars['BigInt'];
    transaction: Transaction;
    adapter: IntegrationAdapter;
};
export declare type GuaranteedRedemptionAdapterRemovedEvent_Filter = {
    id?: Maybe<Scalars['ID']>;
    id_not?: Maybe<Scalars['ID']>;
    id_gt?: Maybe<Scalars['ID']>;
    id_lt?: Maybe<Scalars['ID']>;
    id_gte?: Maybe<Scalars['ID']>;
    id_lte?: Maybe<Scalars['ID']>;
    id_in?: Maybe<Array<Scalars['ID']>>;
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    timestamp?: Maybe<Scalars['BigInt']>;
    timestamp_not?: Maybe<Scalars['BigInt']>;
    timestamp_gt?: Maybe<Scalars['BigInt']>;
    timestamp_lt?: Maybe<Scalars['BigInt']>;
    timestamp_gte?: Maybe<Scalars['BigInt']>;
    timestamp_lte?: Maybe<Scalars['BigInt']>;
    timestamp_in?: Maybe<Array<Scalars['BigInt']>>;
    timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;
    transaction?: Maybe<Scalars['String']>;
    transaction_not?: Maybe<Scalars['String']>;
    transaction_gt?: Maybe<Scalars['String']>;
    transaction_lt?: Maybe<Scalars['String']>;
    transaction_gte?: Maybe<Scalars['String']>;
    transaction_lte?: Maybe<Scalars['String']>;
    transaction_in?: Maybe<Array<Scalars['String']>>;
    transaction_not_in?: Maybe<Array<Scalars['String']>>;
    transaction_contains?: Maybe<Scalars['String']>;
    transaction_not_contains?: Maybe<Scalars['String']>;
    transaction_starts_with?: Maybe<Scalars['String']>;
    transaction_not_starts_with?: Maybe<Scalars['String']>;
    transaction_ends_with?: Maybe<Scalars['String']>;
    transaction_not_ends_with?: Maybe<Scalars['String']>;
    adapter?: Maybe<Scalars['String']>;
    adapter_not?: Maybe<Scalars['String']>;
    adapter_gt?: Maybe<Scalars['String']>;
    adapter_lt?: Maybe<Scalars['String']>;
    adapter_gte?: Maybe<Scalars['String']>;
    adapter_lte?: Maybe<Scalars['String']>;
    adapter_in?: Maybe<Array<Scalars['String']>>;
    adapter_not_in?: Maybe<Array<Scalars['String']>>;
    adapter_contains?: Maybe<Scalars['String']>;
    adapter_not_contains?: Maybe<Scalars['String']>;
    adapter_starts_with?: Maybe<Scalars['String']>;
    adapter_not_starts_with?: Maybe<Scalars['String']>;
    adapter_ends_with?: Maybe<Scalars['String']>;
    adapter_not_ends_with?: Maybe<Scalars['String']>;
};
export declare enum GuaranteedRedemptionAdapterRemovedEvent_OrderBy {
    Id = "id",
    Timestamp = "timestamp",
    Transaction = "transaction",
    Adapter = "adapter"
}
export declare type GuaranteedRedemptionFundSettingsSetEvent = EventInterface & FundEventInterface & {
    __typename?: 'GuaranteedRedemptionFundSettingsSetEvent';
    id: Scalars['ID'];
    fund: Fund;
    timestamp: Scalars['BigInt'];
    transaction: Transaction;
    comptrollerProxy: Scalars['String'];
    startTimestamp: Scalars['BigInt'];
    duration: Scalars['BigInt'];
};
export declare type GuaranteedRedemptionFundSettingsSetEvent_Filter = {
    id?: Maybe<Scalars['ID']>;
    id_not?: Maybe<Scalars['ID']>;
    id_gt?: Maybe<Scalars['ID']>;
    id_lt?: Maybe<Scalars['ID']>;
    id_gte?: Maybe<Scalars['ID']>;
    id_lte?: Maybe<Scalars['ID']>;
    id_in?: Maybe<Array<Scalars['ID']>>;
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    fund?: Maybe<Scalars['String']>;
    fund_not?: Maybe<Scalars['String']>;
    fund_gt?: Maybe<Scalars['String']>;
    fund_lt?: Maybe<Scalars['String']>;
    fund_gte?: Maybe<Scalars['String']>;
    fund_lte?: Maybe<Scalars['String']>;
    fund_in?: Maybe<Array<Scalars['String']>>;
    fund_not_in?: Maybe<Array<Scalars['String']>>;
    fund_contains?: Maybe<Scalars['String']>;
    fund_not_contains?: Maybe<Scalars['String']>;
    fund_starts_with?: Maybe<Scalars['String']>;
    fund_not_starts_with?: Maybe<Scalars['String']>;
    fund_ends_with?: Maybe<Scalars['String']>;
    fund_not_ends_with?: Maybe<Scalars['String']>;
    timestamp?: Maybe<Scalars['BigInt']>;
    timestamp_not?: Maybe<Scalars['BigInt']>;
    timestamp_gt?: Maybe<Scalars['BigInt']>;
    timestamp_lt?: Maybe<Scalars['BigInt']>;
    timestamp_gte?: Maybe<Scalars['BigInt']>;
    timestamp_lte?: Maybe<Scalars['BigInt']>;
    timestamp_in?: Maybe<Array<Scalars['BigInt']>>;
    timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;
    transaction?: Maybe<Scalars['String']>;
    transaction_not?: Maybe<Scalars['String']>;
    transaction_gt?: Maybe<Scalars['String']>;
    transaction_lt?: Maybe<Scalars['String']>;
    transaction_gte?: Maybe<Scalars['String']>;
    transaction_lte?: Maybe<Scalars['String']>;
    transaction_in?: Maybe<Array<Scalars['String']>>;
    transaction_not_in?: Maybe<Array<Scalars['String']>>;
    transaction_contains?: Maybe<Scalars['String']>;
    transaction_not_contains?: Maybe<Scalars['String']>;
    transaction_starts_with?: Maybe<Scalars['String']>;
    transaction_not_starts_with?: Maybe<Scalars['String']>;
    transaction_ends_with?: Maybe<Scalars['String']>;
    transaction_not_ends_with?: Maybe<Scalars['String']>;
    comptrollerProxy?: Maybe<Scalars['String']>;
    comptrollerProxy_not?: Maybe<Scalars['String']>;
    comptrollerProxy_gt?: Maybe<Scalars['String']>;
    comptrollerProxy_lt?: Maybe<Scalars['String']>;
    comptrollerProxy_gte?: Maybe<Scalars['String']>;
    comptrollerProxy_lte?: Maybe<Scalars['String']>;
    comptrollerProxy_in?: Maybe<Array<Scalars['String']>>;
    comptrollerProxy_not_in?: Maybe<Array<Scalars['String']>>;
    comptrollerProxy_contains?: Maybe<Scalars['String']>;
    comptrollerProxy_not_contains?: Maybe<Scalars['String']>;
    comptrollerProxy_starts_with?: Maybe<Scalars['String']>;
    comptrollerProxy_not_starts_with?: Maybe<Scalars['String']>;
    comptrollerProxy_ends_with?: Maybe<Scalars['String']>;
    comptrollerProxy_not_ends_with?: Maybe<Scalars['String']>;
    startTimestamp?: Maybe<Scalars['BigInt']>;
    startTimestamp_not?: Maybe<Scalars['BigInt']>;
    startTimestamp_gt?: Maybe<Scalars['BigInt']>;
    startTimestamp_lt?: Maybe<Scalars['BigInt']>;
    startTimestamp_gte?: Maybe<Scalars['BigInt']>;
    startTimestamp_lte?: Maybe<Scalars['BigInt']>;
    startTimestamp_in?: Maybe<Array<Scalars['BigInt']>>;
    startTimestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;
    duration?: Maybe<Scalars['BigInt']>;
    duration_not?: Maybe<Scalars['BigInt']>;
    duration_gt?: Maybe<Scalars['BigInt']>;
    duration_lt?: Maybe<Scalars['BigInt']>;
    duration_gte?: Maybe<Scalars['BigInt']>;
    duration_lte?: Maybe<Scalars['BigInt']>;
    duration_in?: Maybe<Array<Scalars['BigInt']>>;
    duration_not_in?: Maybe<Array<Scalars['BigInt']>>;
};
export declare enum GuaranteedRedemptionFundSettingsSetEvent_OrderBy {
    Id = "id",
    Fund = "fund",
    Timestamp = "timestamp",
    Transaction = "transaction",
    ComptrollerProxy = "comptrollerProxy",
    StartTimestamp = "startTimestamp",
    Duration = "duration"
}
export declare type GuaranteedRedemptionRedemptionWindowBufferSetEvent = EventInterface & NetworkEventInterface & {
    __typename?: 'GuaranteedRedemptionRedemptionWindowBufferSetEvent';
    id: Scalars['ID'];
    timestamp: Scalars['BigInt'];
    transaction: Transaction;
    prevBuffer: Scalars['BigInt'];
    nextBuffer: Scalars['BigInt'];
};
export declare type GuaranteedRedemptionRedemptionWindowBufferSetEvent_Filter = {
    id?: Maybe<Scalars['ID']>;
    id_not?: Maybe<Scalars['ID']>;
    id_gt?: Maybe<Scalars['ID']>;
    id_lt?: Maybe<Scalars['ID']>;
    id_gte?: Maybe<Scalars['ID']>;
    id_lte?: Maybe<Scalars['ID']>;
    id_in?: Maybe<Array<Scalars['ID']>>;
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    timestamp?: Maybe<Scalars['BigInt']>;
    timestamp_not?: Maybe<Scalars['BigInt']>;
    timestamp_gt?: Maybe<Scalars['BigInt']>;
    timestamp_lt?: Maybe<Scalars['BigInt']>;
    timestamp_gte?: Maybe<Scalars['BigInt']>;
    timestamp_lte?: Maybe<Scalars['BigInt']>;
    timestamp_in?: Maybe<Array<Scalars['BigInt']>>;
    timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;
    transaction?: Maybe<Scalars['String']>;
    transaction_not?: Maybe<Scalars['String']>;
    transaction_gt?: Maybe<Scalars['String']>;
    transaction_lt?: Maybe<Scalars['String']>;
    transaction_gte?: Maybe<Scalars['String']>;
    transaction_lte?: Maybe<Scalars['String']>;
    transaction_in?: Maybe<Array<Scalars['String']>>;
    transaction_not_in?: Maybe<Array<Scalars['String']>>;
    transaction_contains?: Maybe<Scalars['String']>;
    transaction_not_contains?: Maybe<Scalars['String']>;
    transaction_starts_with?: Maybe<Scalars['String']>;
    transaction_not_starts_with?: Maybe<Scalars['String']>;
    transaction_ends_with?: Maybe<Scalars['String']>;
    transaction_not_ends_with?: Maybe<Scalars['String']>;
    prevBuffer?: Maybe<Scalars['BigInt']>;
    prevBuffer_not?: Maybe<Scalars['BigInt']>;
    prevBuffer_gt?: Maybe<Scalars['BigInt']>;
    prevBuffer_lt?: Maybe<Scalars['BigInt']>;
    prevBuffer_gte?: Maybe<Scalars['BigInt']>;
    prevBuffer_lte?: Maybe<Scalars['BigInt']>;
    prevBuffer_in?: Maybe<Array<Scalars['BigInt']>>;
    prevBuffer_not_in?: Maybe<Array<Scalars['BigInt']>>;
    nextBuffer?: Maybe<Scalars['BigInt']>;
    nextBuffer_not?: Maybe<Scalars['BigInt']>;
    nextBuffer_gt?: Maybe<Scalars['BigInt']>;
    nextBuffer_lt?: Maybe<Scalars['BigInt']>;
    nextBuffer_gte?: Maybe<Scalars['BigInt']>;
    nextBuffer_lte?: Maybe<Scalars['BigInt']>;
    nextBuffer_in?: Maybe<Array<Scalars['BigInt']>>;
    nextBuffer_not_in?: Maybe<Array<Scalars['BigInt']>>;
};
export declare enum GuaranteedRedemptionRedemptionWindowBufferSetEvent_OrderBy {
    Id = "id",
    Timestamp = "timestamp",
    Transaction = "transaction",
    PrevBuffer = "prevBuffer",
    NextBuffer = "nextBuffer"
}
export declare type GuaranteedRedemptionSetting = PolicySettingInterface & {
    __typename?: 'GuaranteedRedemptionSetting';
    id: Scalars['ID'];
    policy: Policy;
    comptroller: ComptrollerProxy;
    startTimestamp: Scalars['BigInt'];
    duration: Scalars['BigInt'];
    timestamp: Scalars['BigInt'];
    enabled: Scalars['Boolean'];
    events: Array<FundEventInterface>;
};
export declare type GuaranteedRedemptionSettingEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<FundEventInterface_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<FundEventInterface_Filter>;
};
export declare type GuaranteedRedemptionSetting_Filter = {
    id?: Maybe<Scalars['ID']>;
    id_not?: Maybe<Scalars['ID']>;
    id_gt?: Maybe<Scalars['ID']>;
    id_lt?: Maybe<Scalars['ID']>;
    id_gte?: Maybe<Scalars['ID']>;
    id_lte?: Maybe<Scalars['ID']>;
    id_in?: Maybe<Array<Scalars['ID']>>;
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    policy?: Maybe<Scalars['String']>;
    policy_not?: Maybe<Scalars['String']>;
    policy_gt?: Maybe<Scalars['String']>;
    policy_lt?: Maybe<Scalars['String']>;
    policy_gte?: Maybe<Scalars['String']>;
    policy_lte?: Maybe<Scalars['String']>;
    policy_in?: Maybe<Array<Scalars['String']>>;
    policy_not_in?: Maybe<Array<Scalars['String']>>;
    policy_contains?: Maybe<Scalars['String']>;
    policy_not_contains?: Maybe<Scalars['String']>;
    policy_starts_with?: Maybe<Scalars['String']>;
    policy_not_starts_with?: Maybe<Scalars['String']>;
    policy_ends_with?: Maybe<Scalars['String']>;
    policy_not_ends_with?: Maybe<Scalars['String']>;
    comptroller?: Maybe<Scalars['String']>;
    comptroller_not?: Maybe<Scalars['String']>;
    comptroller_gt?: Maybe<Scalars['String']>;
    comptroller_lt?: Maybe<Scalars['String']>;
    comptroller_gte?: Maybe<Scalars['String']>;
    comptroller_lte?: Maybe<Scalars['String']>;
    comptroller_in?: Maybe<Array<Scalars['String']>>;
    comptroller_not_in?: Maybe<Array<Scalars['String']>>;
    comptroller_contains?: Maybe<Scalars['String']>;
    comptroller_not_contains?: Maybe<Scalars['String']>;
    comptroller_starts_with?: Maybe<Scalars['String']>;
    comptroller_not_starts_with?: Maybe<Scalars['String']>;
    comptroller_ends_with?: Maybe<Scalars['String']>;
    comptroller_not_ends_with?: Maybe<Scalars['String']>;
    startTimestamp?: Maybe<Scalars['BigInt']>;
    startTimestamp_not?: Maybe<Scalars['BigInt']>;
    startTimestamp_gt?: Maybe<Scalars['BigInt']>;
    startTimestamp_lt?: Maybe<Scalars['BigInt']>;
    startTimestamp_gte?: Maybe<Scalars['BigInt']>;
    startTimestamp_lte?: Maybe<Scalars['BigInt']>;
    startTimestamp_in?: Maybe<Array<Scalars['BigInt']>>;
    startTimestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;
    duration?: Maybe<Scalars['BigInt']>;
    duration_not?: Maybe<Scalars['BigInt']>;
    duration_gt?: Maybe<Scalars['BigInt']>;
    duration_lt?: Maybe<Scalars['BigInt']>;
    duration_gte?: Maybe<Scalars['BigInt']>;
    duration_lte?: Maybe<Scalars['BigInt']>;
    duration_in?: Maybe<Array<Scalars['BigInt']>>;
    duration_not_in?: Maybe<Array<Scalars['BigInt']>>;
    timestamp?: Maybe<Scalars['BigInt']>;
    timestamp_not?: Maybe<Scalars['BigInt']>;
    timestamp_gt?: Maybe<Scalars['BigInt']>;
    timestamp_lt?: Maybe<Scalars['BigInt']>;
    timestamp_gte?: Maybe<Scalars['BigInt']>;
    timestamp_lte?: Maybe<Scalars['BigInt']>;
    timestamp_in?: Maybe<Array<Scalars['BigInt']>>;
    timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;
    enabled?: Maybe<Scalars['Boolean']>;
    enabled_not?: Maybe<Scalars['Boolean']>;
    enabled_in?: Maybe<Array<Scalars['Boolean']>>;
    enabled_not_in?: Maybe<Array<Scalars['Boolean']>>;
    events?: Maybe<Array<Scalars['String']>>;
    events_not?: Maybe<Array<Scalars['String']>>;
    events_contains?: Maybe<Array<Scalars['String']>>;
    events_not_contains?: Maybe<Array<Scalars['String']>>;
};
export declare enum GuaranteedRedemptionSetting_OrderBy {
    Id = "id",
    Policy = "policy",
    Comptroller = "comptroller",
    StartTimestamp = "startTimestamp",
    Duration = "duration",
    Timestamp = "timestamp",
    Enabled = "enabled",
    Events = "events"
}
export declare type GuaranteedRedemption_Filter = {
    id?: Maybe<Scalars['ID']>;
    id_not?: Maybe<Scalars['ID']>;
    id_gt?: Maybe<Scalars['ID']>;
    id_lt?: Maybe<Scalars['ID']>;
    id_gte?: Maybe<Scalars['ID']>;
    id_lte?: Maybe<Scalars['ID']>;
    id_in?: Maybe<Array<Scalars['ID']>>;
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    adapters?: Maybe<Array<Scalars['String']>>;
    adapters_not?: Maybe<Array<Scalars['String']>>;
    adapters_contains?: Maybe<Array<Scalars['String']>>;
    adapters_not_contains?: Maybe<Array<Scalars['String']>>;
    buffer?: Maybe<Scalars['BigInt']>;
    buffer_not?: Maybe<Scalars['BigInt']>;
    buffer_gt?: Maybe<Scalars['BigInt']>;
    buffer_lt?: Maybe<Scalars['BigInt']>;
    buffer_gte?: Maybe<Scalars['BigInt']>;
    buffer_lte?: Maybe<Scalars['BigInt']>;
    buffer_in?: Maybe<Array<Scalars['BigInt']>>;
    buffer_not_in?: Maybe<Array<Scalars['BigInt']>>;
};
export declare enum GuaranteedRedemption_OrderBy {
    Id = "id",
    Adapters = "adapters",
    Buffer = "buffer"
}
export declare type HoldingState = FundStateInterface & {
    __typename?: 'HoldingState';
    id: Scalars['ID'];
    fund: Fund;
    timestamp: Scalars['BigInt'];
    asset: Asset;
    price?: Maybe<AssetPrice>;
    amount: Scalars['BigDecimal'];
    events: Array<FundEventInterface>;
};
export declare type HoldingStateEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<FundEventInterface_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<FundEventInterface_Filter>;
};
export declare type HoldingState_Filter = {
    id?: Maybe<Scalars['ID']>;
    id_not?: Maybe<Scalars['ID']>;
    id_gt?: Maybe<Scalars['ID']>;
    id_lt?: Maybe<Scalars['ID']>;
    id_gte?: Maybe<Scalars['ID']>;
    id_lte?: Maybe<Scalars['ID']>;
    id_in?: Maybe<Array<Scalars['ID']>>;
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    fund?: Maybe<Scalars['String']>;
    fund_not?: Maybe<Scalars['String']>;
    fund_gt?: Maybe<Scalars['String']>;
    fund_lt?: Maybe<Scalars['String']>;
    fund_gte?: Maybe<Scalars['String']>;
    fund_lte?: Maybe<Scalars['String']>;
    fund_in?: Maybe<Array<Scalars['String']>>;
    fund_not_in?: Maybe<Array<Scalars['String']>>;
    fund_contains?: Maybe<Scalars['String']>;
    fund_not_contains?: Maybe<Scalars['String']>;
    fund_starts_with?: Maybe<Scalars['String']>;
    fund_not_starts_with?: Maybe<Scalars['String']>;
    fund_ends_with?: Maybe<Scalars['String']>;
    fund_not_ends_with?: Maybe<Scalars['String']>;
    timestamp?: Maybe<Scalars['BigInt']>;
    timestamp_not?: Maybe<Scalars['BigInt']>;
    timestamp_gt?: Maybe<Scalars['BigInt']>;
    timestamp_lt?: Maybe<Scalars['BigInt']>;
    timestamp_gte?: Maybe<Scalars['BigInt']>;
    timestamp_lte?: Maybe<Scalars['BigInt']>;
    timestamp_in?: Maybe<Array<Scalars['BigInt']>>;
    timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;
    asset?: Maybe<Scalars['String']>;
    asset_not?: Maybe<Scalars['String']>;
    asset_gt?: Maybe<Scalars['String']>;
    asset_lt?: Maybe<Scalars['String']>;
    asset_gte?: Maybe<Scalars['String']>;
    asset_lte?: Maybe<Scalars['String']>;
    asset_in?: Maybe<Array<Scalars['String']>>;
    asset_not_in?: Maybe<Array<Scalars['String']>>;
    asset_contains?: Maybe<Scalars['String']>;
    asset_not_contains?: Maybe<Scalars['String']>;
    asset_starts_with?: Maybe<Scalars['String']>;
    asset_not_starts_with?: Maybe<Scalars['String']>;
    asset_ends_with?: Maybe<Scalars['String']>;
    asset_not_ends_with?: Maybe<Scalars['String']>;
    price?: Maybe<Scalars['String']>;
    price_not?: Maybe<Scalars['String']>;
    price_gt?: Maybe<Scalars['String']>;
    price_lt?: Maybe<Scalars['String']>;
    price_gte?: Maybe<Scalars['String']>;
    price_lte?: Maybe<Scalars['String']>;
    price_in?: Maybe<Array<Scalars['String']>>;
    price_not_in?: Maybe<Array<Scalars['String']>>;
    price_contains?: Maybe<Scalars['String']>;
    price_not_contains?: Maybe<Scalars['String']>;
    price_starts_with?: Maybe<Scalars['String']>;
    price_not_starts_with?: Maybe<Scalars['String']>;
    price_ends_with?: Maybe<Scalars['String']>;
    price_not_ends_with?: Maybe<Scalars['String']>;
    amount?: Maybe<Scalars['BigDecimal']>;
    amount_not?: Maybe<Scalars['BigDecimal']>;
    amount_gt?: Maybe<Scalars['BigDecimal']>;
    amount_lt?: Maybe<Scalars['BigDecimal']>;
    amount_gte?: Maybe<Scalars['BigDecimal']>;
    amount_lte?: Maybe<Scalars['BigDecimal']>;
    amount_in?: Maybe<Array<Scalars['BigDecimal']>>;
    amount_not_in?: Maybe<Array<Scalars['BigDecimal']>>;
    events?: Maybe<Array<Scalars['String']>>;
    events_not?: Maybe<Array<Scalars['String']>>;
    events_contains?: Maybe<Array<Scalars['String']>>;
    events_not_contains?: Maybe<Array<Scalars['String']>>;
};
export declare enum HoldingState_OrderBy {
    Id = "id",
    Fund = "fund",
    Timestamp = "timestamp",
    Asset = "asset",
    Price = "price",
    Amount = "amount",
    Events = "events"
}
export declare type HourlyAssetPriceCandle = {
    __typename?: 'HourlyAssetPriceCandle';
    id: Scalars['ID'];
    asset: Asset;
    group: HourlyPriceCandleGroup;
    from: Scalars['BigInt'];
    to: Scalars['BigInt'];
    open: Scalars['BigDecimal'];
    openRef: AssetPrice;
    close: Scalars['BigDecimal'];
    closeRef: AssetPrice;
    low: Scalars['BigDecimal'];
    lowRef: AssetPrice;
    high: Scalars['BigDecimal'];
    highRef: AssetPrice;
};
export declare type HourlyAssetPriceCandle_Filter = {
    id?: Maybe<Scalars['ID']>;
    id_not?: Maybe<Scalars['ID']>;
    id_gt?: Maybe<Scalars['ID']>;
    id_lt?: Maybe<Scalars['ID']>;
    id_gte?: Maybe<Scalars['ID']>;
    id_lte?: Maybe<Scalars['ID']>;
    id_in?: Maybe<Array<Scalars['ID']>>;
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    asset?: Maybe<Scalars['String']>;
    asset_not?: Maybe<Scalars['String']>;
    asset_gt?: Maybe<Scalars['String']>;
    asset_lt?: Maybe<Scalars['String']>;
    asset_gte?: Maybe<Scalars['String']>;
    asset_lte?: Maybe<Scalars['String']>;
    asset_in?: Maybe<Array<Scalars['String']>>;
    asset_not_in?: Maybe<Array<Scalars['String']>>;
    asset_contains?: Maybe<Scalars['String']>;
    asset_not_contains?: Maybe<Scalars['String']>;
    asset_starts_with?: Maybe<Scalars['String']>;
    asset_not_starts_with?: Maybe<Scalars['String']>;
    asset_ends_with?: Maybe<Scalars['String']>;
    asset_not_ends_with?: Maybe<Scalars['String']>;
    group?: Maybe<Scalars['String']>;
    group_not?: Maybe<Scalars['String']>;
    group_gt?: Maybe<Scalars['String']>;
    group_lt?: Maybe<Scalars['String']>;
    group_gte?: Maybe<Scalars['String']>;
    group_lte?: Maybe<Scalars['String']>;
    group_in?: Maybe<Array<Scalars['String']>>;
    group_not_in?: Maybe<Array<Scalars['String']>>;
    group_contains?: Maybe<Scalars['String']>;
    group_not_contains?: Maybe<Scalars['String']>;
    group_starts_with?: Maybe<Scalars['String']>;
    group_not_starts_with?: Maybe<Scalars['String']>;
    group_ends_with?: Maybe<Scalars['String']>;
    group_not_ends_with?: Maybe<Scalars['String']>;
    from?: Maybe<Scalars['BigInt']>;
    from_not?: Maybe<Scalars['BigInt']>;
    from_gt?: Maybe<Scalars['BigInt']>;
    from_lt?: Maybe<Scalars['BigInt']>;
    from_gte?: Maybe<Scalars['BigInt']>;
    from_lte?: Maybe<Scalars['BigInt']>;
    from_in?: Maybe<Array<Scalars['BigInt']>>;
    from_not_in?: Maybe<Array<Scalars['BigInt']>>;
    to?: Maybe<Scalars['BigInt']>;
    to_not?: Maybe<Scalars['BigInt']>;
    to_gt?: Maybe<Scalars['BigInt']>;
    to_lt?: Maybe<Scalars['BigInt']>;
    to_gte?: Maybe<Scalars['BigInt']>;
    to_lte?: Maybe<Scalars['BigInt']>;
    to_in?: Maybe<Array<Scalars['BigInt']>>;
    to_not_in?: Maybe<Array<Scalars['BigInt']>>;
    open?: Maybe<Scalars['BigDecimal']>;
    open_not?: Maybe<Scalars['BigDecimal']>;
    open_gt?: Maybe<Scalars['BigDecimal']>;
    open_lt?: Maybe<Scalars['BigDecimal']>;
    open_gte?: Maybe<Scalars['BigDecimal']>;
    open_lte?: Maybe<Scalars['BigDecimal']>;
    open_in?: Maybe<Array<Scalars['BigDecimal']>>;
    open_not_in?: Maybe<Array<Scalars['BigDecimal']>>;
    openRef?: Maybe<Scalars['String']>;
    openRef_not?: Maybe<Scalars['String']>;
    openRef_gt?: Maybe<Scalars['String']>;
    openRef_lt?: Maybe<Scalars['String']>;
    openRef_gte?: Maybe<Scalars['String']>;
    openRef_lte?: Maybe<Scalars['String']>;
    openRef_in?: Maybe<Array<Scalars['String']>>;
    openRef_not_in?: Maybe<Array<Scalars['String']>>;
    openRef_contains?: Maybe<Scalars['String']>;
    openRef_not_contains?: Maybe<Scalars['String']>;
    openRef_starts_with?: Maybe<Scalars['String']>;
    openRef_not_starts_with?: Maybe<Scalars['String']>;
    openRef_ends_with?: Maybe<Scalars['String']>;
    openRef_not_ends_with?: Maybe<Scalars['String']>;
    close?: Maybe<Scalars['BigDecimal']>;
    close_not?: Maybe<Scalars['BigDecimal']>;
    close_gt?: Maybe<Scalars['BigDecimal']>;
    close_lt?: Maybe<Scalars['BigDecimal']>;
    close_gte?: Maybe<Scalars['BigDecimal']>;
    close_lte?: Maybe<Scalars['BigDecimal']>;
    close_in?: Maybe<Array<Scalars['BigDecimal']>>;
    close_not_in?: Maybe<Array<Scalars['BigDecimal']>>;
    closeRef?: Maybe<Scalars['String']>;
    closeRef_not?: Maybe<Scalars['String']>;
    closeRef_gt?: Maybe<Scalars['String']>;
    closeRef_lt?: Maybe<Scalars['String']>;
    closeRef_gte?: Maybe<Scalars['String']>;
    closeRef_lte?: Maybe<Scalars['String']>;
    closeRef_in?: Maybe<Array<Scalars['String']>>;
    closeRef_not_in?: Maybe<Array<Scalars['String']>>;
    closeRef_contains?: Maybe<Scalars['String']>;
    closeRef_not_contains?: Maybe<Scalars['String']>;
    closeRef_starts_with?: Maybe<Scalars['String']>;
    closeRef_not_starts_with?: Maybe<Scalars['String']>;
    closeRef_ends_with?: Maybe<Scalars['String']>;
    closeRef_not_ends_with?: Maybe<Scalars['String']>;
    low?: Maybe<Scalars['BigDecimal']>;
    low_not?: Maybe<Scalars['BigDecimal']>;
    low_gt?: Maybe<Scalars['BigDecimal']>;
    low_lt?: Maybe<Scalars['BigDecimal']>;
    low_gte?: Maybe<Scalars['BigDecimal']>;
    low_lte?: Maybe<Scalars['BigDecimal']>;
    low_in?: Maybe<Array<Scalars['BigDecimal']>>;
    low_not_in?: Maybe<Array<Scalars['BigDecimal']>>;
    lowRef?: Maybe<Scalars['String']>;
    lowRef_not?: Maybe<Scalars['String']>;
    lowRef_gt?: Maybe<Scalars['String']>;
    lowRef_lt?: Maybe<Scalars['String']>;
    lowRef_gte?: Maybe<Scalars['String']>;
    lowRef_lte?: Maybe<Scalars['String']>;
    lowRef_in?: Maybe<Array<Scalars['String']>>;
    lowRef_not_in?: Maybe<Array<Scalars['String']>>;
    lowRef_contains?: Maybe<Scalars['String']>;
    lowRef_not_contains?: Maybe<Scalars['String']>;
    lowRef_starts_with?: Maybe<Scalars['String']>;
    lowRef_not_starts_with?: Maybe<Scalars['String']>;
    lowRef_ends_with?: Maybe<Scalars['String']>;
    lowRef_not_ends_with?: Maybe<Scalars['String']>;
    high?: Maybe<Scalars['BigDecimal']>;
    high_not?: Maybe<Scalars['BigDecimal']>;
    high_gt?: Maybe<Scalars['BigDecimal']>;
    high_lt?: Maybe<Scalars['BigDecimal']>;
    high_gte?: Maybe<Scalars['BigDecimal']>;
    high_lte?: Maybe<Scalars['BigDecimal']>;
    high_in?: Maybe<Array<Scalars['BigDecimal']>>;
    high_not_in?: Maybe<Array<Scalars['BigDecimal']>>;
    highRef?: Maybe<Scalars['String']>;
    highRef_not?: Maybe<Scalars['String']>;
    highRef_gt?: Maybe<Scalars['String']>;
    highRef_lt?: Maybe<Scalars['String']>;
    highRef_gte?: Maybe<Scalars['String']>;
    highRef_lte?: Maybe<Scalars['String']>;
    highRef_in?: Maybe<Array<Scalars['String']>>;
    highRef_not_in?: Maybe<Array<Scalars['String']>>;
    highRef_contains?: Maybe<Scalars['String']>;
    highRef_not_contains?: Maybe<Scalars['String']>;
    highRef_starts_with?: Maybe<Scalars['String']>;
    highRef_not_starts_with?: Maybe<Scalars['String']>;
    highRef_ends_with?: Maybe<Scalars['String']>;
    highRef_not_ends_with?: Maybe<Scalars['String']>;
};
export declare enum HourlyAssetPriceCandle_OrderBy {
    Id = "id",
    Asset = "asset",
    Group = "group",
    From = "from",
    To = "to",
    Open = "open",
    OpenRef = "openRef",
    Close = "close",
    CloseRef = "closeRef",
    Low = "low",
    LowRef = "lowRef",
    High = "high",
    HighRef = "highRef"
}
export declare type HourlyCurrencyPriceCandle = {
    __typename?: 'HourlyCurrencyPriceCandle';
    id: Scalars['ID'];
    currency: Currency;
    group: HourlyPriceCandleGroup;
    from: Scalars['BigInt'];
    to: Scalars['BigInt'];
    open: Scalars['BigDecimal'];
    openRef: CurrencyPrice;
    close: Scalars['BigDecimal'];
    closeRef: CurrencyPrice;
    low: Scalars['BigDecimal'];
    lowRef: CurrencyPrice;
    high: Scalars['BigDecimal'];
    highRef: CurrencyPrice;
};
export declare type HourlyCurrencyPriceCandle_Filter = {
    id?: Maybe<Scalars['ID']>;
    id_not?: Maybe<Scalars['ID']>;
    id_gt?: Maybe<Scalars['ID']>;
    id_lt?: Maybe<Scalars['ID']>;
    id_gte?: Maybe<Scalars['ID']>;
    id_lte?: Maybe<Scalars['ID']>;
    id_in?: Maybe<Array<Scalars['ID']>>;
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    currency?: Maybe<Scalars['String']>;
    currency_not?: Maybe<Scalars['String']>;
    currency_gt?: Maybe<Scalars['String']>;
    currency_lt?: Maybe<Scalars['String']>;
    currency_gte?: Maybe<Scalars['String']>;
    currency_lte?: Maybe<Scalars['String']>;
    currency_in?: Maybe<Array<Scalars['String']>>;
    currency_not_in?: Maybe<Array<Scalars['String']>>;
    currency_contains?: Maybe<Scalars['String']>;
    currency_not_contains?: Maybe<Scalars['String']>;
    currency_starts_with?: Maybe<Scalars['String']>;
    currency_not_starts_with?: Maybe<Scalars['String']>;
    currency_ends_with?: Maybe<Scalars['String']>;
    currency_not_ends_with?: Maybe<Scalars['String']>;
    group?: Maybe<Scalars['String']>;
    group_not?: Maybe<Scalars['String']>;
    group_gt?: Maybe<Scalars['String']>;
    group_lt?: Maybe<Scalars['String']>;
    group_gte?: Maybe<Scalars['String']>;
    group_lte?: Maybe<Scalars['String']>;
    group_in?: Maybe<Array<Scalars['String']>>;
    group_not_in?: Maybe<Array<Scalars['String']>>;
    group_contains?: Maybe<Scalars['String']>;
    group_not_contains?: Maybe<Scalars['String']>;
    group_starts_with?: Maybe<Scalars['String']>;
    group_not_starts_with?: Maybe<Scalars['String']>;
    group_ends_with?: Maybe<Scalars['String']>;
    group_not_ends_with?: Maybe<Scalars['String']>;
    from?: Maybe<Scalars['BigInt']>;
    from_not?: Maybe<Scalars['BigInt']>;
    from_gt?: Maybe<Scalars['BigInt']>;
    from_lt?: Maybe<Scalars['BigInt']>;
    from_gte?: Maybe<Scalars['BigInt']>;
    from_lte?: Maybe<Scalars['BigInt']>;
    from_in?: Maybe<Array<Scalars['BigInt']>>;
    from_not_in?: Maybe<Array<Scalars['BigInt']>>;
    to?: Maybe<Scalars['BigInt']>;
    to_not?: Maybe<Scalars['BigInt']>;
    to_gt?: Maybe<Scalars['BigInt']>;
    to_lt?: Maybe<Scalars['BigInt']>;
    to_gte?: Maybe<Scalars['BigInt']>;
    to_lte?: Maybe<Scalars['BigInt']>;
    to_in?: Maybe<Array<Scalars['BigInt']>>;
    to_not_in?: Maybe<Array<Scalars['BigInt']>>;
    open?: Maybe<Scalars['BigDecimal']>;
    open_not?: Maybe<Scalars['BigDecimal']>;
    open_gt?: Maybe<Scalars['BigDecimal']>;
    open_lt?: Maybe<Scalars['BigDecimal']>;
    open_gte?: Maybe<Scalars['BigDecimal']>;
    open_lte?: Maybe<Scalars['BigDecimal']>;
    open_in?: Maybe<Array<Scalars['BigDecimal']>>;
    open_not_in?: Maybe<Array<Scalars['BigDecimal']>>;
    openRef?: Maybe<Scalars['String']>;
    openRef_not?: Maybe<Scalars['String']>;
    openRef_gt?: Maybe<Scalars['String']>;
    openRef_lt?: Maybe<Scalars['String']>;
    openRef_gte?: Maybe<Scalars['String']>;
    openRef_lte?: Maybe<Scalars['String']>;
    openRef_in?: Maybe<Array<Scalars['String']>>;
    openRef_not_in?: Maybe<Array<Scalars['String']>>;
    openRef_contains?: Maybe<Scalars['String']>;
    openRef_not_contains?: Maybe<Scalars['String']>;
    openRef_starts_with?: Maybe<Scalars['String']>;
    openRef_not_starts_with?: Maybe<Scalars['String']>;
    openRef_ends_with?: Maybe<Scalars['String']>;
    openRef_not_ends_with?: Maybe<Scalars['String']>;
    close?: Maybe<Scalars['BigDecimal']>;
    close_not?: Maybe<Scalars['BigDecimal']>;
    close_gt?: Maybe<Scalars['BigDecimal']>;
    close_lt?: Maybe<Scalars['BigDecimal']>;
    close_gte?: Maybe<Scalars['BigDecimal']>;
    close_lte?: Maybe<Scalars['BigDecimal']>;
    close_in?: Maybe<Array<Scalars['BigDecimal']>>;
    close_not_in?: Maybe<Array<Scalars['BigDecimal']>>;
    closeRef?: Maybe<Scalars['String']>;
    closeRef_not?: Maybe<Scalars['String']>;
    closeRef_gt?: Maybe<Scalars['String']>;
    closeRef_lt?: Maybe<Scalars['String']>;
    closeRef_gte?: Maybe<Scalars['String']>;
    closeRef_lte?: Maybe<Scalars['String']>;
    closeRef_in?: Maybe<Array<Scalars['String']>>;
    closeRef_not_in?: Maybe<Array<Scalars['String']>>;
    closeRef_contains?: Maybe<Scalars['String']>;
    closeRef_not_contains?: Maybe<Scalars['String']>;
    closeRef_starts_with?: Maybe<Scalars['String']>;
    closeRef_not_starts_with?: Maybe<Scalars['String']>;
    closeRef_ends_with?: Maybe<Scalars['String']>;
    closeRef_not_ends_with?: Maybe<Scalars['String']>;
    low?: Maybe<Scalars['BigDecimal']>;
    low_not?: Maybe<Scalars['BigDecimal']>;
    low_gt?: Maybe<Scalars['BigDecimal']>;
    low_lt?: Maybe<Scalars['BigDecimal']>;
    low_gte?: Maybe<Scalars['BigDecimal']>;
    low_lte?: Maybe<Scalars['BigDecimal']>;
    low_in?: Maybe<Array<Scalars['BigDecimal']>>;
    low_not_in?: Maybe<Array<Scalars['BigDecimal']>>;
    lowRef?: Maybe<Scalars['String']>;
    lowRef_not?: Maybe<Scalars['String']>;
    lowRef_gt?: Maybe<Scalars['String']>;
    lowRef_lt?: Maybe<Scalars['String']>;
    lowRef_gte?: Maybe<Scalars['String']>;
    lowRef_lte?: Maybe<Scalars['String']>;
    lowRef_in?: Maybe<Array<Scalars['String']>>;
    lowRef_not_in?: Maybe<Array<Scalars['String']>>;
    lowRef_contains?: Maybe<Scalars['String']>;
    lowRef_not_contains?: Maybe<Scalars['String']>;
    lowRef_starts_with?: Maybe<Scalars['String']>;
    lowRef_not_starts_with?: Maybe<Scalars['String']>;
    lowRef_ends_with?: Maybe<Scalars['String']>;
    lowRef_not_ends_with?: Maybe<Scalars['String']>;
    high?: Maybe<Scalars['BigDecimal']>;
    high_not?: Maybe<Scalars['BigDecimal']>;
    high_gt?: Maybe<Scalars['BigDecimal']>;
    high_lt?: Maybe<Scalars['BigDecimal']>;
    high_gte?: Maybe<Scalars['BigDecimal']>;
    high_lte?: Maybe<Scalars['BigDecimal']>;
    high_in?: Maybe<Array<Scalars['BigDecimal']>>;
    high_not_in?: Maybe<Array<Scalars['BigDecimal']>>;
    highRef?: Maybe<Scalars['String']>;
    highRef_not?: Maybe<Scalars['String']>;
    highRef_gt?: Maybe<Scalars['String']>;
    highRef_lt?: Maybe<Scalars['String']>;
    highRef_gte?: Maybe<Scalars['String']>;
    highRef_lte?: Maybe<Scalars['String']>;
    highRef_in?: Maybe<Array<Scalars['String']>>;
    highRef_not_in?: Maybe<Array<Scalars['String']>>;
    highRef_contains?: Maybe<Scalars['String']>;
    highRef_not_contains?: Maybe<Scalars['String']>;
    highRef_starts_with?: Maybe<Scalars['String']>;
    highRef_not_starts_with?: Maybe<Scalars['String']>;
    highRef_ends_with?: Maybe<Scalars['String']>;
    highRef_not_ends_with?: Maybe<Scalars['String']>;
};
export declare enum HourlyCurrencyPriceCandle_OrderBy {
    Id = "id",
    Currency = "currency",
    Group = "group",
    From = "from",
    To = "to",
    Open = "open",
    OpenRef = "openRef",
    Close = "close",
    CloseRef = "closeRef",
    Low = "low",
    LowRef = "lowRef",
    High = "high",
    HighRef = "highRef"
}
export declare type HourlyFundState = PeriodicFundStateInterface & {
    __typename?: 'HourlyFundState';
    id: Scalars['ID'];
    fund: Fund;
    start: Scalars['BigInt'];
    end: Scalars['BigInt'];
    first: FundState;
    last: FundState;
};
export declare type HourlyFundState_Filter = {
    id?: Maybe<Scalars['ID']>;
    id_not?: Maybe<Scalars['ID']>;
    id_gt?: Maybe<Scalars['ID']>;
    id_lt?: Maybe<Scalars['ID']>;
    id_gte?: Maybe<Scalars['ID']>;
    id_lte?: Maybe<Scalars['ID']>;
    id_in?: Maybe<Array<Scalars['ID']>>;
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    fund?: Maybe<Scalars['String']>;
    fund_not?: Maybe<Scalars['String']>;
    fund_gt?: Maybe<Scalars['String']>;
    fund_lt?: Maybe<Scalars['String']>;
    fund_gte?: Maybe<Scalars['String']>;
    fund_lte?: Maybe<Scalars['String']>;
    fund_in?: Maybe<Array<Scalars['String']>>;
    fund_not_in?: Maybe<Array<Scalars['String']>>;
    fund_contains?: Maybe<Scalars['String']>;
    fund_not_contains?: Maybe<Scalars['String']>;
    fund_starts_with?: Maybe<Scalars['String']>;
    fund_not_starts_with?: Maybe<Scalars['String']>;
    fund_ends_with?: Maybe<Scalars['String']>;
    fund_not_ends_with?: Maybe<Scalars['String']>;
    start?: Maybe<Scalars['BigInt']>;
    start_not?: Maybe<Scalars['BigInt']>;
    start_gt?: Maybe<Scalars['BigInt']>;
    start_lt?: Maybe<Scalars['BigInt']>;
    start_gte?: Maybe<Scalars['BigInt']>;
    start_lte?: Maybe<Scalars['BigInt']>;
    start_in?: Maybe<Array<Scalars['BigInt']>>;
    start_not_in?: Maybe<Array<Scalars['BigInt']>>;
    end?: Maybe<Scalars['BigInt']>;
    end_not?: Maybe<Scalars['BigInt']>;
    end_gt?: Maybe<Scalars['BigInt']>;
    end_lt?: Maybe<Scalars['BigInt']>;
    end_gte?: Maybe<Scalars['BigInt']>;
    end_lte?: Maybe<Scalars['BigInt']>;
    end_in?: Maybe<Array<Scalars['BigInt']>>;
    end_not_in?: Maybe<Array<Scalars['BigInt']>>;
    first?: Maybe<Scalars['String']>;
    first_not?: Maybe<Scalars['String']>;
    first_gt?: Maybe<Scalars['String']>;
    first_lt?: Maybe<Scalars['String']>;
    first_gte?: Maybe<Scalars['String']>;
    first_lte?: Maybe<Scalars['String']>;
    first_in?: Maybe<Array<Scalars['String']>>;
    first_not_in?: Maybe<Array<Scalars['String']>>;
    first_contains?: Maybe<Scalars['String']>;
    first_not_contains?: Maybe<Scalars['String']>;
    first_starts_with?: Maybe<Scalars['String']>;
    first_not_starts_with?: Maybe<Scalars['String']>;
    first_ends_with?: Maybe<Scalars['String']>;
    first_not_ends_with?: Maybe<Scalars['String']>;
    last?: Maybe<Scalars['String']>;
    last_not?: Maybe<Scalars['String']>;
    last_gt?: Maybe<Scalars['String']>;
    last_lt?: Maybe<Scalars['String']>;
    last_gte?: Maybe<Scalars['String']>;
    last_lte?: Maybe<Scalars['String']>;
    last_in?: Maybe<Array<Scalars['String']>>;
    last_not_in?: Maybe<Array<Scalars['String']>>;
    last_contains?: Maybe<Scalars['String']>;
    last_not_contains?: Maybe<Scalars['String']>;
    last_starts_with?: Maybe<Scalars['String']>;
    last_not_starts_with?: Maybe<Scalars['String']>;
    last_ends_with?: Maybe<Scalars['String']>;
    last_not_ends_with?: Maybe<Scalars['String']>;
};
export declare enum HourlyFundState_OrderBy {
    Id = "id",
    Fund = "fund",
    Start = "start",
    End = "end",
    First = "first",
    Last = "last"
}
export declare type HourlyPriceCandleGroup = {
    __typename?: 'HourlyPriceCandleGroup';
    id: Scalars['ID'];
    from: Scalars['BigInt'];
    to: Scalars['BigInt'];
    assetCandles: Array<HourlyAssetPriceCandle>;
    currencyCandles: Array<HourlyCurrencyPriceCandle>;
};
export declare type HourlyPriceCandleGroupAssetCandlesArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<HourlyAssetPriceCandle_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<HourlyAssetPriceCandle_Filter>;
};
export declare type HourlyPriceCandleGroupCurrencyCandlesArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<HourlyCurrencyPriceCandle_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<HourlyCurrencyPriceCandle_Filter>;
};
export declare type HourlyPriceCandleGroup_Filter = {
    id?: Maybe<Scalars['ID']>;
    id_not?: Maybe<Scalars['ID']>;
    id_gt?: Maybe<Scalars['ID']>;
    id_lt?: Maybe<Scalars['ID']>;
    id_gte?: Maybe<Scalars['ID']>;
    id_lte?: Maybe<Scalars['ID']>;
    id_in?: Maybe<Array<Scalars['ID']>>;
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    from?: Maybe<Scalars['BigInt']>;
    from_not?: Maybe<Scalars['BigInt']>;
    from_gt?: Maybe<Scalars['BigInt']>;
    from_lt?: Maybe<Scalars['BigInt']>;
    from_gte?: Maybe<Scalars['BigInt']>;
    from_lte?: Maybe<Scalars['BigInt']>;
    from_in?: Maybe<Array<Scalars['BigInt']>>;
    from_not_in?: Maybe<Array<Scalars['BigInt']>>;
    to?: Maybe<Scalars['BigInt']>;
    to_not?: Maybe<Scalars['BigInt']>;
    to_gt?: Maybe<Scalars['BigInt']>;
    to_lt?: Maybe<Scalars['BigInt']>;
    to_gte?: Maybe<Scalars['BigInt']>;
    to_lte?: Maybe<Scalars['BigInt']>;
    to_in?: Maybe<Array<Scalars['BigInt']>>;
    to_not_in?: Maybe<Array<Scalars['BigInt']>>;
};
export declare enum HourlyPriceCandleGroup_OrderBy {
    Id = "id",
    From = "from",
    To = "to",
    AssetCandles = "assetCandles",
    CurrencyCandles = "currencyCandles"
}
export declare type IndividualFeeStateInterface = {
    id: Scalars['ID'];
    fund: Fund;
    timestamp: Scalars['BigInt'];
    fee: Fee;
    events: Array<FundEventInterface>;
};
export declare type IndividualFeeStateInterfaceEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<FundEventInterface_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<FundEventInterface_Filter>;
};
export declare type IndividualFeeStateInterface_Filter = {
    id?: Maybe<Scalars['ID']>;
    id_not?: Maybe<Scalars['ID']>;
    id_gt?: Maybe<Scalars['ID']>;
    id_lt?: Maybe<Scalars['ID']>;
    id_gte?: Maybe<Scalars['ID']>;
    id_lte?: Maybe<Scalars['ID']>;
    id_in?: Maybe<Array<Scalars['ID']>>;
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    fund?: Maybe<Scalars['String']>;
    fund_not?: Maybe<Scalars['String']>;
    fund_gt?: Maybe<Scalars['String']>;
    fund_lt?: Maybe<Scalars['String']>;
    fund_gte?: Maybe<Scalars['String']>;
    fund_lte?: Maybe<Scalars['String']>;
    fund_in?: Maybe<Array<Scalars['String']>>;
    fund_not_in?: Maybe<Array<Scalars['String']>>;
    fund_contains?: Maybe<Scalars['String']>;
    fund_not_contains?: Maybe<Scalars['String']>;
    fund_starts_with?: Maybe<Scalars['String']>;
    fund_not_starts_with?: Maybe<Scalars['String']>;
    fund_ends_with?: Maybe<Scalars['String']>;
    fund_not_ends_with?: Maybe<Scalars['String']>;
    timestamp?: Maybe<Scalars['BigInt']>;
    timestamp_not?: Maybe<Scalars['BigInt']>;
    timestamp_gt?: Maybe<Scalars['BigInt']>;
    timestamp_lt?: Maybe<Scalars['BigInt']>;
    timestamp_gte?: Maybe<Scalars['BigInt']>;
    timestamp_lte?: Maybe<Scalars['BigInt']>;
    timestamp_in?: Maybe<Array<Scalars['BigInt']>>;
    timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;
    fee?: Maybe<Scalars['String']>;
    fee_not?: Maybe<Scalars['String']>;
    fee_gt?: Maybe<Scalars['String']>;
    fee_lt?: Maybe<Scalars['String']>;
    fee_gte?: Maybe<Scalars['String']>;
    fee_lte?: Maybe<Scalars['String']>;
    fee_in?: Maybe<Array<Scalars['String']>>;
    fee_not_in?: Maybe<Array<Scalars['String']>>;
    fee_contains?: Maybe<Scalars['String']>;
    fee_not_contains?: Maybe<Scalars['String']>;
    fee_starts_with?: Maybe<Scalars['String']>;
    fee_not_starts_with?: Maybe<Scalars['String']>;
    fee_ends_with?: Maybe<Scalars['String']>;
    fee_not_ends_with?: Maybe<Scalars['String']>;
    events?: Maybe<Array<Scalars['String']>>;
    events_not?: Maybe<Array<Scalars['String']>>;
    events_contains?: Maybe<Array<Scalars['String']>>;
    events_not_contains?: Maybe<Array<Scalars['String']>>;
};
export declare enum IndividualFeeStateInterface_OrderBy {
    Id = "id",
    Fund = "fund",
    Timestamp = "timestamp",
    Fee = "fee",
    Events = "events"
}
export declare type IntegrationAdapter = {
    __typename?: 'IntegrationAdapter';
    id: Scalars['ID'];
    integrationManager: IntegrationManager;
    identifier: Scalars['String'];
    blacklisted: Array<AdapterBlacklistSetting>;
    whitelisted: Array<AdapterWhitelistSetting>;
};
export declare type IntegrationAdapterBlacklistedArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<AdapterBlacklistSetting_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<AdapterBlacklistSetting_Filter>;
};
export declare type IntegrationAdapterWhitelistedArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<AdapterWhitelistSetting_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<AdapterWhitelistSetting_Filter>;
};
export declare type IntegrationAdapter_Filter = {
    id?: Maybe<Scalars['ID']>;
    id_not?: Maybe<Scalars['ID']>;
    id_gt?: Maybe<Scalars['ID']>;
    id_lt?: Maybe<Scalars['ID']>;
    id_gte?: Maybe<Scalars['ID']>;
    id_lte?: Maybe<Scalars['ID']>;
    id_in?: Maybe<Array<Scalars['ID']>>;
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    integrationManager?: Maybe<Scalars['String']>;
    integrationManager_not?: Maybe<Scalars['String']>;
    integrationManager_gt?: Maybe<Scalars['String']>;
    integrationManager_lt?: Maybe<Scalars['String']>;
    integrationManager_gte?: Maybe<Scalars['String']>;
    integrationManager_lte?: Maybe<Scalars['String']>;
    integrationManager_in?: Maybe<Array<Scalars['String']>>;
    integrationManager_not_in?: Maybe<Array<Scalars['String']>>;
    integrationManager_contains?: Maybe<Scalars['String']>;
    integrationManager_not_contains?: Maybe<Scalars['String']>;
    integrationManager_starts_with?: Maybe<Scalars['String']>;
    integrationManager_not_starts_with?: Maybe<Scalars['String']>;
    integrationManager_ends_with?: Maybe<Scalars['String']>;
    integrationManager_not_ends_with?: Maybe<Scalars['String']>;
    identifier?: Maybe<Scalars['String']>;
    identifier_not?: Maybe<Scalars['String']>;
    identifier_gt?: Maybe<Scalars['String']>;
    identifier_lt?: Maybe<Scalars['String']>;
    identifier_gte?: Maybe<Scalars['String']>;
    identifier_lte?: Maybe<Scalars['String']>;
    identifier_in?: Maybe<Array<Scalars['String']>>;
    identifier_not_in?: Maybe<Array<Scalars['String']>>;
    identifier_contains?: Maybe<Scalars['String']>;
    identifier_not_contains?: Maybe<Scalars['String']>;
    identifier_starts_with?: Maybe<Scalars['String']>;
    identifier_not_starts_with?: Maybe<Scalars['String']>;
    identifier_ends_with?: Maybe<Scalars['String']>;
    identifier_not_ends_with?: Maybe<Scalars['String']>;
};
export declare enum IntegrationAdapter_OrderBy {
    Id = "id",
    IntegrationManager = "integrationManager",
    Identifier = "identifier",
    Blacklisted = "blacklisted",
    Whitelisted = "whitelisted"
}
export declare type IntegrationManager = {
    __typename?: 'IntegrationManager';
    id: Scalars['ID'];
    release: Release;
    adapters: Array<IntegrationAdapter>;
};
export declare type IntegrationManagerAdaptersArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<IntegrationAdapter_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<IntegrationAdapter_Filter>;
};
export declare type IntegrationManager_Filter = {
    id?: Maybe<Scalars['ID']>;
    id_not?: Maybe<Scalars['ID']>;
    id_gt?: Maybe<Scalars['ID']>;
    id_lt?: Maybe<Scalars['ID']>;
    id_gte?: Maybe<Scalars['ID']>;
    id_lte?: Maybe<Scalars['ID']>;
    id_in?: Maybe<Array<Scalars['ID']>>;
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    release?: Maybe<Scalars['String']>;
    release_not?: Maybe<Scalars['String']>;
    release_gt?: Maybe<Scalars['String']>;
    release_lt?: Maybe<Scalars['String']>;
    release_gte?: Maybe<Scalars['String']>;
    release_lte?: Maybe<Scalars['String']>;
    release_in?: Maybe<Array<Scalars['String']>>;
    release_not_in?: Maybe<Array<Scalars['String']>>;
    release_contains?: Maybe<Scalars['String']>;
    release_not_contains?: Maybe<Scalars['String']>;
    release_starts_with?: Maybe<Scalars['String']>;
    release_not_starts_with?: Maybe<Scalars['String']>;
    release_ends_with?: Maybe<Scalars['String']>;
    release_not_ends_with?: Maybe<Scalars['String']>;
};
export declare enum IntegrationManager_OrderBy {
    Id = "id",
    Release = "release",
    Adapters = "adapters"
}
export declare enum IntegrationMethod {
    AddTrackedAssets = "ADD_TRACKED_ASSETS",
    RemoveTrackedAssets = "REMOVE_TRACKED_ASSETS",
    ApproveAssets = "APPROVE_ASSETS",
    TakeOrder = "TAKE_ORDER",
    Lend = "LEND",
    Redeem = "REDEEM",
    Stake = "STAKE",
    Unstake = "UNSTAKE",
    ClaimRewards = "CLAIM_REWARDS",
    ClaimRewardsAndReinvest = "CLAIM_REWARDS_AND_REINVEST",
    ClaimRewardsAndSwap = "CLAIM_REWARDS_AND_SWAP",
    LendAndStake = "LEND_AND_STAKE",
    UnstakeAndRedeem = "UNSTAKE_AND_REDEEM",
    Unknown = "UNKNOWN"
}
export declare type Investment = {
    __typename?: 'Investment';
    id: Scalars['ID'];
    since: Scalars['BigInt'];
    fund: Fund;
    investor: Account;
    shares: Scalars['BigDecimal'];
    state: InvestmentState;
    stateHistory: Array<InvestmentState>;
};
export declare type InvestmentStateHistoryArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<InvestmentState_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<InvestmentState_Filter>;
};
export declare type InvestmentSharesChangeInterface = {
    id: Scalars['ID'];
    fund: Fund;
    investor: Account;
    timestamp: Scalars['BigInt'];
    type: ShareChangeType;
    investmentState: InvestmentState;
    shares: Scalars['BigDecimal'];
    fundState: FundState;
    transaction: Transaction;
};
export declare type InvestmentSharesChangeInterface_Filter = {
    id?: Maybe<Scalars['ID']>;
    id_not?: Maybe<Scalars['ID']>;
    id_gt?: Maybe<Scalars['ID']>;
    id_lt?: Maybe<Scalars['ID']>;
    id_gte?: Maybe<Scalars['ID']>;
    id_lte?: Maybe<Scalars['ID']>;
    id_in?: Maybe<Array<Scalars['ID']>>;
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    fund?: Maybe<Scalars['String']>;
    fund_not?: Maybe<Scalars['String']>;
    fund_gt?: Maybe<Scalars['String']>;
    fund_lt?: Maybe<Scalars['String']>;
    fund_gte?: Maybe<Scalars['String']>;
    fund_lte?: Maybe<Scalars['String']>;
    fund_in?: Maybe<Array<Scalars['String']>>;
    fund_not_in?: Maybe<Array<Scalars['String']>>;
    fund_contains?: Maybe<Scalars['String']>;
    fund_not_contains?: Maybe<Scalars['String']>;
    fund_starts_with?: Maybe<Scalars['String']>;
    fund_not_starts_with?: Maybe<Scalars['String']>;
    fund_ends_with?: Maybe<Scalars['String']>;
    fund_not_ends_with?: Maybe<Scalars['String']>;
    investor?: Maybe<Scalars['String']>;
    investor_not?: Maybe<Scalars['String']>;
    investor_gt?: Maybe<Scalars['String']>;
    investor_lt?: Maybe<Scalars['String']>;
    investor_gte?: Maybe<Scalars['String']>;
    investor_lte?: Maybe<Scalars['String']>;
    investor_in?: Maybe<Array<Scalars['String']>>;
    investor_not_in?: Maybe<Array<Scalars['String']>>;
    investor_contains?: Maybe<Scalars['String']>;
    investor_not_contains?: Maybe<Scalars['String']>;
    investor_starts_with?: Maybe<Scalars['String']>;
    investor_not_starts_with?: Maybe<Scalars['String']>;
    investor_ends_with?: Maybe<Scalars['String']>;
    investor_not_ends_with?: Maybe<Scalars['String']>;
    timestamp?: Maybe<Scalars['BigInt']>;
    timestamp_not?: Maybe<Scalars['BigInt']>;
    timestamp_gt?: Maybe<Scalars['BigInt']>;
    timestamp_lt?: Maybe<Scalars['BigInt']>;
    timestamp_gte?: Maybe<Scalars['BigInt']>;
    timestamp_lte?: Maybe<Scalars['BigInt']>;
    timestamp_in?: Maybe<Array<Scalars['BigInt']>>;
    timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;
    type?: Maybe<ShareChangeType>;
    type_not?: Maybe<ShareChangeType>;
    investmentState?: Maybe<Scalars['String']>;
    investmentState_not?: Maybe<Scalars['String']>;
    investmentState_gt?: Maybe<Scalars['String']>;
    investmentState_lt?: Maybe<Scalars['String']>;
    investmentState_gte?: Maybe<Scalars['String']>;
    investmentState_lte?: Maybe<Scalars['String']>;
    investmentState_in?: Maybe<Array<Scalars['String']>>;
    investmentState_not_in?: Maybe<Array<Scalars['String']>>;
    investmentState_contains?: Maybe<Scalars['String']>;
    investmentState_not_contains?: Maybe<Scalars['String']>;
    investmentState_starts_with?: Maybe<Scalars['String']>;
    investmentState_not_starts_with?: Maybe<Scalars['String']>;
    investmentState_ends_with?: Maybe<Scalars['String']>;
    investmentState_not_ends_with?: Maybe<Scalars['String']>;
    shares?: Maybe<Scalars['BigDecimal']>;
    shares_not?: Maybe<Scalars['BigDecimal']>;
    shares_gt?: Maybe<Scalars['BigDecimal']>;
    shares_lt?: Maybe<Scalars['BigDecimal']>;
    shares_gte?: Maybe<Scalars['BigDecimal']>;
    shares_lte?: Maybe<Scalars['BigDecimal']>;
    shares_in?: Maybe<Array<Scalars['BigDecimal']>>;
    shares_not_in?: Maybe<Array<Scalars['BigDecimal']>>;
    fundState?: Maybe<Scalars['String']>;
    fundState_not?: Maybe<Scalars['String']>;
    fundState_gt?: Maybe<Scalars['String']>;
    fundState_lt?: Maybe<Scalars['String']>;
    fundState_gte?: Maybe<Scalars['String']>;
    fundState_lte?: Maybe<Scalars['String']>;
    fundState_in?: Maybe<Array<Scalars['String']>>;
    fundState_not_in?: Maybe<Array<Scalars['String']>>;
    fundState_contains?: Maybe<Scalars['String']>;
    fundState_not_contains?: Maybe<Scalars['String']>;
    fundState_starts_with?: Maybe<Scalars['String']>;
    fundState_not_starts_with?: Maybe<Scalars['String']>;
    fundState_ends_with?: Maybe<Scalars['String']>;
    fundState_not_ends_with?: Maybe<Scalars['String']>;
    transaction?: Maybe<Scalars['String']>;
    transaction_not?: Maybe<Scalars['String']>;
    transaction_gt?: Maybe<Scalars['String']>;
    transaction_lt?: Maybe<Scalars['String']>;
    transaction_gte?: Maybe<Scalars['String']>;
    transaction_lte?: Maybe<Scalars['String']>;
    transaction_in?: Maybe<Array<Scalars['String']>>;
    transaction_not_in?: Maybe<Array<Scalars['String']>>;
    transaction_contains?: Maybe<Scalars['String']>;
    transaction_not_contains?: Maybe<Scalars['String']>;
    transaction_starts_with?: Maybe<Scalars['String']>;
    transaction_not_starts_with?: Maybe<Scalars['String']>;
    transaction_ends_with?: Maybe<Scalars['String']>;
    transaction_not_ends_with?: Maybe<Scalars['String']>;
};
export declare enum InvestmentSharesChangeInterface_OrderBy {
    Id = "id",
    Fund = "fund",
    Investor = "investor",
    Timestamp = "timestamp",
    Type = "type",
    InvestmentState = "investmentState",
    Shares = "shares",
    FundState = "fundState",
    Transaction = "transaction"
}
export declare type InvestmentState = {
    __typename?: 'InvestmentState';
    id: Scalars['ID'];
    timestamp: Scalars['BigInt'];
    fund: Fund;
    investor: Account;
    investment: Investment;
    shares: Scalars['BigDecimal'];
    changes: Array<SharesChangeInterface>;
    fundState: FundState;
};
export declare type InvestmentStateChangesArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<SharesChangeInterface_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<SharesChangeInterface_Filter>;
};
export declare type InvestmentState_Filter = {
    id?: Maybe<Scalars['ID']>;
    id_not?: Maybe<Scalars['ID']>;
    id_gt?: Maybe<Scalars['ID']>;
    id_lt?: Maybe<Scalars['ID']>;
    id_gte?: Maybe<Scalars['ID']>;
    id_lte?: Maybe<Scalars['ID']>;
    id_in?: Maybe<Array<Scalars['ID']>>;
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    timestamp?: Maybe<Scalars['BigInt']>;
    timestamp_not?: Maybe<Scalars['BigInt']>;
    timestamp_gt?: Maybe<Scalars['BigInt']>;
    timestamp_lt?: Maybe<Scalars['BigInt']>;
    timestamp_gte?: Maybe<Scalars['BigInt']>;
    timestamp_lte?: Maybe<Scalars['BigInt']>;
    timestamp_in?: Maybe<Array<Scalars['BigInt']>>;
    timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;
    fund?: Maybe<Scalars['String']>;
    fund_not?: Maybe<Scalars['String']>;
    fund_gt?: Maybe<Scalars['String']>;
    fund_lt?: Maybe<Scalars['String']>;
    fund_gte?: Maybe<Scalars['String']>;
    fund_lte?: Maybe<Scalars['String']>;
    fund_in?: Maybe<Array<Scalars['String']>>;
    fund_not_in?: Maybe<Array<Scalars['String']>>;
    fund_contains?: Maybe<Scalars['String']>;
    fund_not_contains?: Maybe<Scalars['String']>;
    fund_starts_with?: Maybe<Scalars['String']>;
    fund_not_starts_with?: Maybe<Scalars['String']>;
    fund_ends_with?: Maybe<Scalars['String']>;
    fund_not_ends_with?: Maybe<Scalars['String']>;
    investor?: Maybe<Scalars['String']>;
    investor_not?: Maybe<Scalars['String']>;
    investor_gt?: Maybe<Scalars['String']>;
    investor_lt?: Maybe<Scalars['String']>;
    investor_gte?: Maybe<Scalars['String']>;
    investor_lte?: Maybe<Scalars['String']>;
    investor_in?: Maybe<Array<Scalars['String']>>;
    investor_not_in?: Maybe<Array<Scalars['String']>>;
    investor_contains?: Maybe<Scalars['String']>;
    investor_not_contains?: Maybe<Scalars['String']>;
    investor_starts_with?: Maybe<Scalars['String']>;
    investor_not_starts_with?: Maybe<Scalars['String']>;
    investor_ends_with?: Maybe<Scalars['String']>;
    investor_not_ends_with?: Maybe<Scalars['String']>;
    investment?: Maybe<Scalars['String']>;
    investment_not?: Maybe<Scalars['String']>;
    investment_gt?: Maybe<Scalars['String']>;
    investment_lt?: Maybe<Scalars['String']>;
    investment_gte?: Maybe<Scalars['String']>;
    investment_lte?: Maybe<Scalars['String']>;
    investment_in?: Maybe<Array<Scalars['String']>>;
    investment_not_in?: Maybe<Array<Scalars['String']>>;
    investment_contains?: Maybe<Scalars['String']>;
    investment_not_contains?: Maybe<Scalars['String']>;
    investment_starts_with?: Maybe<Scalars['String']>;
    investment_not_starts_with?: Maybe<Scalars['String']>;
    investment_ends_with?: Maybe<Scalars['String']>;
    investment_not_ends_with?: Maybe<Scalars['String']>;
    shares?: Maybe<Scalars['BigDecimal']>;
    shares_not?: Maybe<Scalars['BigDecimal']>;
    shares_gt?: Maybe<Scalars['BigDecimal']>;
    shares_lt?: Maybe<Scalars['BigDecimal']>;
    shares_gte?: Maybe<Scalars['BigDecimal']>;
    shares_lte?: Maybe<Scalars['BigDecimal']>;
    shares_in?: Maybe<Array<Scalars['BigDecimal']>>;
    shares_not_in?: Maybe<Array<Scalars['BigDecimal']>>;
    fundState?: Maybe<Scalars['String']>;
    fundState_not?: Maybe<Scalars['String']>;
    fundState_gt?: Maybe<Scalars['String']>;
    fundState_lt?: Maybe<Scalars['String']>;
    fundState_gte?: Maybe<Scalars['String']>;
    fundState_lte?: Maybe<Scalars['String']>;
    fundState_in?: Maybe<Array<Scalars['String']>>;
    fundState_not_in?: Maybe<Array<Scalars['String']>>;
    fundState_contains?: Maybe<Scalars['String']>;
    fundState_not_contains?: Maybe<Scalars['String']>;
    fundState_starts_with?: Maybe<Scalars['String']>;
    fundState_not_starts_with?: Maybe<Scalars['String']>;
    fundState_ends_with?: Maybe<Scalars['String']>;
    fundState_not_ends_with?: Maybe<Scalars['String']>;
};
export declare enum InvestmentState_OrderBy {
    Id = "id",
    Timestamp = "timestamp",
    Fund = "fund",
    Investor = "investor",
    Investment = "investment",
    Shares = "shares",
    Changes = "changes",
    FundState = "fundState"
}
export declare type Investment_Filter = {
    id?: Maybe<Scalars['ID']>;
    id_not?: Maybe<Scalars['ID']>;
    id_gt?: Maybe<Scalars['ID']>;
    id_lt?: Maybe<Scalars['ID']>;
    id_gte?: Maybe<Scalars['ID']>;
    id_lte?: Maybe<Scalars['ID']>;
    id_in?: Maybe<Array<Scalars['ID']>>;
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    since?: Maybe<Scalars['BigInt']>;
    since_not?: Maybe<Scalars['BigInt']>;
    since_gt?: Maybe<Scalars['BigInt']>;
    since_lt?: Maybe<Scalars['BigInt']>;
    since_gte?: Maybe<Scalars['BigInt']>;
    since_lte?: Maybe<Scalars['BigInt']>;
    since_in?: Maybe<Array<Scalars['BigInt']>>;
    since_not_in?: Maybe<Array<Scalars['BigInt']>>;
    fund?: Maybe<Scalars['String']>;
    fund_not?: Maybe<Scalars['String']>;
    fund_gt?: Maybe<Scalars['String']>;
    fund_lt?: Maybe<Scalars['String']>;
    fund_gte?: Maybe<Scalars['String']>;
    fund_lte?: Maybe<Scalars['String']>;
    fund_in?: Maybe<Array<Scalars['String']>>;
    fund_not_in?: Maybe<Array<Scalars['String']>>;
    fund_contains?: Maybe<Scalars['String']>;
    fund_not_contains?: Maybe<Scalars['String']>;
    fund_starts_with?: Maybe<Scalars['String']>;
    fund_not_starts_with?: Maybe<Scalars['String']>;
    fund_ends_with?: Maybe<Scalars['String']>;
    fund_not_ends_with?: Maybe<Scalars['String']>;
    investor?: Maybe<Scalars['String']>;
    investor_not?: Maybe<Scalars['String']>;
    investor_gt?: Maybe<Scalars['String']>;
    investor_lt?: Maybe<Scalars['String']>;
    investor_gte?: Maybe<Scalars['String']>;
    investor_lte?: Maybe<Scalars['String']>;
    investor_in?: Maybe<Array<Scalars['String']>>;
    investor_not_in?: Maybe<Array<Scalars['String']>>;
    investor_contains?: Maybe<Scalars['String']>;
    investor_not_contains?: Maybe<Scalars['String']>;
    investor_starts_with?: Maybe<Scalars['String']>;
    investor_not_starts_with?: Maybe<Scalars['String']>;
    investor_ends_with?: Maybe<Scalars['String']>;
    investor_not_ends_with?: Maybe<Scalars['String']>;
    shares?: Maybe<Scalars['BigDecimal']>;
    shares_not?: Maybe<Scalars['BigDecimal']>;
    shares_gt?: Maybe<Scalars['BigDecimal']>;
    shares_lt?: Maybe<Scalars['BigDecimal']>;
    shares_gte?: Maybe<Scalars['BigDecimal']>;
    shares_lte?: Maybe<Scalars['BigDecimal']>;
    shares_in?: Maybe<Array<Scalars['BigDecimal']>>;
    shares_not_in?: Maybe<Array<Scalars['BigDecimal']>>;
    state?: Maybe<Scalars['String']>;
    state_not?: Maybe<Scalars['String']>;
    state_gt?: Maybe<Scalars['String']>;
    state_lt?: Maybe<Scalars['String']>;
    state_gte?: Maybe<Scalars['String']>;
    state_lte?: Maybe<Scalars['String']>;
    state_in?: Maybe<Array<Scalars['String']>>;
    state_not_in?: Maybe<Array<Scalars['String']>>;
    state_contains?: Maybe<Scalars['String']>;
    state_not_contains?: Maybe<Scalars['String']>;
    state_starts_with?: Maybe<Scalars['String']>;
    state_not_starts_with?: Maybe<Scalars['String']>;
    state_ends_with?: Maybe<Scalars['String']>;
    state_not_ends_with?: Maybe<Scalars['String']>;
};
export declare enum Investment_OrderBy {
    Id = "id",
    Since = "since",
    Fund = "fund",
    Investor = "investor",
    Shares = "shares",
    State = "state",
    StateHistory = "stateHistory"
}
export declare type InvestorWhitelistAddressesAddedEvent = EventInterface & FundEventInterface & {
    __typename?: 'InvestorWhitelistAddressesAddedEvent';
    id: Scalars['ID'];
    fund: Fund;
    timestamp: Scalars['BigInt'];
    transaction: Transaction;
    comptrollerProxy: Scalars['String'];
    items: Array<Account>;
};
export declare type InvestorWhitelistAddressesAddedEventItemsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<Account_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<Account_Filter>;
};
export declare type InvestorWhitelistAddressesAddedEvent_Filter = {
    id?: Maybe<Scalars['ID']>;
    id_not?: Maybe<Scalars['ID']>;
    id_gt?: Maybe<Scalars['ID']>;
    id_lt?: Maybe<Scalars['ID']>;
    id_gte?: Maybe<Scalars['ID']>;
    id_lte?: Maybe<Scalars['ID']>;
    id_in?: Maybe<Array<Scalars['ID']>>;
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    fund?: Maybe<Scalars['String']>;
    fund_not?: Maybe<Scalars['String']>;
    fund_gt?: Maybe<Scalars['String']>;
    fund_lt?: Maybe<Scalars['String']>;
    fund_gte?: Maybe<Scalars['String']>;
    fund_lte?: Maybe<Scalars['String']>;
    fund_in?: Maybe<Array<Scalars['String']>>;
    fund_not_in?: Maybe<Array<Scalars['String']>>;
    fund_contains?: Maybe<Scalars['String']>;
    fund_not_contains?: Maybe<Scalars['String']>;
    fund_starts_with?: Maybe<Scalars['String']>;
    fund_not_starts_with?: Maybe<Scalars['String']>;
    fund_ends_with?: Maybe<Scalars['String']>;
    fund_not_ends_with?: Maybe<Scalars['String']>;
    timestamp?: Maybe<Scalars['BigInt']>;
    timestamp_not?: Maybe<Scalars['BigInt']>;
    timestamp_gt?: Maybe<Scalars['BigInt']>;
    timestamp_lt?: Maybe<Scalars['BigInt']>;
    timestamp_gte?: Maybe<Scalars['BigInt']>;
    timestamp_lte?: Maybe<Scalars['BigInt']>;
    timestamp_in?: Maybe<Array<Scalars['BigInt']>>;
    timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;
    transaction?: Maybe<Scalars['String']>;
    transaction_not?: Maybe<Scalars['String']>;
    transaction_gt?: Maybe<Scalars['String']>;
    transaction_lt?: Maybe<Scalars['String']>;
    transaction_gte?: Maybe<Scalars['String']>;
    transaction_lte?: Maybe<Scalars['String']>;
    transaction_in?: Maybe<Array<Scalars['String']>>;
    transaction_not_in?: Maybe<Array<Scalars['String']>>;
    transaction_contains?: Maybe<Scalars['String']>;
    transaction_not_contains?: Maybe<Scalars['String']>;
    transaction_starts_with?: Maybe<Scalars['String']>;
    transaction_not_starts_with?: Maybe<Scalars['String']>;
    transaction_ends_with?: Maybe<Scalars['String']>;
    transaction_not_ends_with?: Maybe<Scalars['String']>;
    comptrollerProxy?: Maybe<Scalars['String']>;
    comptrollerProxy_not?: Maybe<Scalars['String']>;
    comptrollerProxy_gt?: Maybe<Scalars['String']>;
    comptrollerProxy_lt?: Maybe<Scalars['String']>;
    comptrollerProxy_gte?: Maybe<Scalars['String']>;
    comptrollerProxy_lte?: Maybe<Scalars['String']>;
    comptrollerProxy_in?: Maybe<Array<Scalars['String']>>;
    comptrollerProxy_not_in?: Maybe<Array<Scalars['String']>>;
    comptrollerProxy_contains?: Maybe<Scalars['String']>;
    comptrollerProxy_not_contains?: Maybe<Scalars['String']>;
    comptrollerProxy_starts_with?: Maybe<Scalars['String']>;
    comptrollerProxy_not_starts_with?: Maybe<Scalars['String']>;
    comptrollerProxy_ends_with?: Maybe<Scalars['String']>;
    comptrollerProxy_not_ends_with?: Maybe<Scalars['String']>;
    items?: Maybe<Array<Scalars['String']>>;
    items_not?: Maybe<Array<Scalars['String']>>;
    items_contains?: Maybe<Array<Scalars['String']>>;
    items_not_contains?: Maybe<Array<Scalars['String']>>;
};
export declare enum InvestorWhitelistAddressesAddedEvent_OrderBy {
    Id = "id",
    Fund = "fund",
    Timestamp = "timestamp",
    Transaction = "transaction",
    ComptrollerProxy = "comptrollerProxy",
    Items = "items"
}
export declare type InvestorWhitelistAddressesRemovedEvent = EventInterface & FundEventInterface & {
    __typename?: 'InvestorWhitelistAddressesRemovedEvent';
    id: Scalars['ID'];
    fund: Fund;
    timestamp: Scalars['BigInt'];
    transaction: Transaction;
    comptrollerProxy: Scalars['String'];
    items: Array<Account>;
};
export declare type InvestorWhitelistAddressesRemovedEventItemsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<Account_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<Account_Filter>;
};
export declare type InvestorWhitelistAddressesRemovedEvent_Filter = {
    id?: Maybe<Scalars['ID']>;
    id_not?: Maybe<Scalars['ID']>;
    id_gt?: Maybe<Scalars['ID']>;
    id_lt?: Maybe<Scalars['ID']>;
    id_gte?: Maybe<Scalars['ID']>;
    id_lte?: Maybe<Scalars['ID']>;
    id_in?: Maybe<Array<Scalars['ID']>>;
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    fund?: Maybe<Scalars['String']>;
    fund_not?: Maybe<Scalars['String']>;
    fund_gt?: Maybe<Scalars['String']>;
    fund_lt?: Maybe<Scalars['String']>;
    fund_gte?: Maybe<Scalars['String']>;
    fund_lte?: Maybe<Scalars['String']>;
    fund_in?: Maybe<Array<Scalars['String']>>;
    fund_not_in?: Maybe<Array<Scalars['String']>>;
    fund_contains?: Maybe<Scalars['String']>;
    fund_not_contains?: Maybe<Scalars['String']>;
    fund_starts_with?: Maybe<Scalars['String']>;
    fund_not_starts_with?: Maybe<Scalars['String']>;
    fund_ends_with?: Maybe<Scalars['String']>;
    fund_not_ends_with?: Maybe<Scalars['String']>;
    timestamp?: Maybe<Scalars['BigInt']>;
    timestamp_not?: Maybe<Scalars['BigInt']>;
    timestamp_gt?: Maybe<Scalars['BigInt']>;
    timestamp_lt?: Maybe<Scalars['BigInt']>;
    timestamp_gte?: Maybe<Scalars['BigInt']>;
    timestamp_lte?: Maybe<Scalars['BigInt']>;
    timestamp_in?: Maybe<Array<Scalars['BigInt']>>;
    timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;
    transaction?: Maybe<Scalars['String']>;
    transaction_not?: Maybe<Scalars['String']>;
    transaction_gt?: Maybe<Scalars['String']>;
    transaction_lt?: Maybe<Scalars['String']>;
    transaction_gte?: Maybe<Scalars['String']>;
    transaction_lte?: Maybe<Scalars['String']>;
    transaction_in?: Maybe<Array<Scalars['String']>>;
    transaction_not_in?: Maybe<Array<Scalars['String']>>;
    transaction_contains?: Maybe<Scalars['String']>;
    transaction_not_contains?: Maybe<Scalars['String']>;
    transaction_starts_with?: Maybe<Scalars['String']>;
    transaction_not_starts_with?: Maybe<Scalars['String']>;
    transaction_ends_with?: Maybe<Scalars['String']>;
    transaction_not_ends_with?: Maybe<Scalars['String']>;
    comptrollerProxy?: Maybe<Scalars['String']>;
    comptrollerProxy_not?: Maybe<Scalars['String']>;
    comptrollerProxy_gt?: Maybe<Scalars['String']>;
    comptrollerProxy_lt?: Maybe<Scalars['String']>;
    comptrollerProxy_gte?: Maybe<Scalars['String']>;
    comptrollerProxy_lte?: Maybe<Scalars['String']>;
    comptrollerProxy_in?: Maybe<Array<Scalars['String']>>;
    comptrollerProxy_not_in?: Maybe<Array<Scalars['String']>>;
    comptrollerProxy_contains?: Maybe<Scalars['String']>;
    comptrollerProxy_not_contains?: Maybe<Scalars['String']>;
    comptrollerProxy_starts_with?: Maybe<Scalars['String']>;
    comptrollerProxy_not_starts_with?: Maybe<Scalars['String']>;
    comptrollerProxy_ends_with?: Maybe<Scalars['String']>;
    comptrollerProxy_not_ends_with?: Maybe<Scalars['String']>;
    items?: Maybe<Array<Scalars['String']>>;
    items_not?: Maybe<Array<Scalars['String']>>;
    items_contains?: Maybe<Array<Scalars['String']>>;
    items_not_contains?: Maybe<Array<Scalars['String']>>;
};
export declare enum InvestorWhitelistAddressesRemovedEvent_OrderBy {
    Id = "id",
    Fund = "fund",
    Timestamp = "timestamp",
    Transaction = "transaction",
    ComptrollerProxy = "comptrollerProxy",
    Items = "items"
}
export declare type InvestorWhitelistSetting = PolicySettingInterface & {
    __typename?: 'InvestorWhitelistSetting';
    id: Scalars['ID'];
    policy: Policy;
    comptroller: ComptrollerProxy;
    listed: Array<Account>;
    timestamp: Scalars['BigInt'];
    enabled: Scalars['Boolean'];
    events: Array<FundEventInterface>;
};
export declare type InvestorWhitelistSettingListedArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<Account_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<Account_Filter>;
};
export declare type InvestorWhitelistSettingEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<FundEventInterface_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<FundEventInterface_Filter>;
};
export declare type InvestorWhitelistSetting_Filter = {
    id?: Maybe<Scalars['ID']>;
    id_not?: Maybe<Scalars['ID']>;
    id_gt?: Maybe<Scalars['ID']>;
    id_lt?: Maybe<Scalars['ID']>;
    id_gte?: Maybe<Scalars['ID']>;
    id_lte?: Maybe<Scalars['ID']>;
    id_in?: Maybe<Array<Scalars['ID']>>;
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    policy?: Maybe<Scalars['String']>;
    policy_not?: Maybe<Scalars['String']>;
    policy_gt?: Maybe<Scalars['String']>;
    policy_lt?: Maybe<Scalars['String']>;
    policy_gte?: Maybe<Scalars['String']>;
    policy_lte?: Maybe<Scalars['String']>;
    policy_in?: Maybe<Array<Scalars['String']>>;
    policy_not_in?: Maybe<Array<Scalars['String']>>;
    policy_contains?: Maybe<Scalars['String']>;
    policy_not_contains?: Maybe<Scalars['String']>;
    policy_starts_with?: Maybe<Scalars['String']>;
    policy_not_starts_with?: Maybe<Scalars['String']>;
    policy_ends_with?: Maybe<Scalars['String']>;
    policy_not_ends_with?: Maybe<Scalars['String']>;
    comptroller?: Maybe<Scalars['String']>;
    comptroller_not?: Maybe<Scalars['String']>;
    comptroller_gt?: Maybe<Scalars['String']>;
    comptroller_lt?: Maybe<Scalars['String']>;
    comptroller_gte?: Maybe<Scalars['String']>;
    comptroller_lte?: Maybe<Scalars['String']>;
    comptroller_in?: Maybe<Array<Scalars['String']>>;
    comptroller_not_in?: Maybe<Array<Scalars['String']>>;
    comptroller_contains?: Maybe<Scalars['String']>;
    comptroller_not_contains?: Maybe<Scalars['String']>;
    comptroller_starts_with?: Maybe<Scalars['String']>;
    comptroller_not_starts_with?: Maybe<Scalars['String']>;
    comptroller_ends_with?: Maybe<Scalars['String']>;
    comptroller_not_ends_with?: Maybe<Scalars['String']>;
    listed?: Maybe<Array<Scalars['String']>>;
    listed_not?: Maybe<Array<Scalars['String']>>;
    listed_contains?: Maybe<Array<Scalars['String']>>;
    listed_not_contains?: Maybe<Array<Scalars['String']>>;
    timestamp?: Maybe<Scalars['BigInt']>;
    timestamp_not?: Maybe<Scalars['BigInt']>;
    timestamp_gt?: Maybe<Scalars['BigInt']>;
    timestamp_lt?: Maybe<Scalars['BigInt']>;
    timestamp_gte?: Maybe<Scalars['BigInt']>;
    timestamp_lte?: Maybe<Scalars['BigInt']>;
    timestamp_in?: Maybe<Array<Scalars['BigInt']>>;
    timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;
    enabled?: Maybe<Scalars['Boolean']>;
    enabled_not?: Maybe<Scalars['Boolean']>;
    enabled_in?: Maybe<Array<Scalars['Boolean']>>;
    enabled_not_in?: Maybe<Array<Scalars['Boolean']>>;
    events?: Maybe<Array<Scalars['String']>>;
    events_not?: Maybe<Array<Scalars['String']>>;
    events_contains?: Maybe<Array<Scalars['String']>>;
    events_not_contains?: Maybe<Array<Scalars['String']>>;
};
export declare enum InvestorWhitelistSetting_OrderBy {
    Id = "id",
    Policy = "policy",
    Comptroller = "comptroller",
    Listed = "listed",
    Timestamp = "timestamp",
    Enabled = "enabled",
    Events = "events"
}
export declare type LendAndStakeTrade = Trade & {
    __typename?: 'LendAndStakeTrade';
    id: Scalars['ID'];
    fund: Fund;
    adapter: IntegrationAdapter;
    method: IntegrationMethod;
    incomingAssetAmount: AssetAmount;
    outgoingAssetAmounts: Array<AssetAmount>;
    timestamp: Scalars['BigInt'];
    fundState: FundState;
};
export declare type LendAndStakeTradeOutgoingAssetAmountsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<AssetAmount_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<AssetAmount_Filter>;
};
export declare type LendAndStakeTrade_Filter = {
    id?: Maybe<Scalars['ID']>;
    id_not?: Maybe<Scalars['ID']>;
    id_gt?: Maybe<Scalars['ID']>;
    id_lt?: Maybe<Scalars['ID']>;
    id_gte?: Maybe<Scalars['ID']>;
    id_lte?: Maybe<Scalars['ID']>;
    id_in?: Maybe<Array<Scalars['ID']>>;
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    fund?: Maybe<Scalars['String']>;
    fund_not?: Maybe<Scalars['String']>;
    fund_gt?: Maybe<Scalars['String']>;
    fund_lt?: Maybe<Scalars['String']>;
    fund_gte?: Maybe<Scalars['String']>;
    fund_lte?: Maybe<Scalars['String']>;
    fund_in?: Maybe<Array<Scalars['String']>>;
    fund_not_in?: Maybe<Array<Scalars['String']>>;
    fund_contains?: Maybe<Scalars['String']>;
    fund_not_contains?: Maybe<Scalars['String']>;
    fund_starts_with?: Maybe<Scalars['String']>;
    fund_not_starts_with?: Maybe<Scalars['String']>;
    fund_ends_with?: Maybe<Scalars['String']>;
    fund_not_ends_with?: Maybe<Scalars['String']>;
    adapter?: Maybe<Scalars['String']>;
    adapter_not?: Maybe<Scalars['String']>;
    adapter_gt?: Maybe<Scalars['String']>;
    adapter_lt?: Maybe<Scalars['String']>;
    adapter_gte?: Maybe<Scalars['String']>;
    adapter_lte?: Maybe<Scalars['String']>;
    adapter_in?: Maybe<Array<Scalars['String']>>;
    adapter_not_in?: Maybe<Array<Scalars['String']>>;
    adapter_contains?: Maybe<Scalars['String']>;
    adapter_not_contains?: Maybe<Scalars['String']>;
    adapter_starts_with?: Maybe<Scalars['String']>;
    adapter_not_starts_with?: Maybe<Scalars['String']>;
    adapter_ends_with?: Maybe<Scalars['String']>;
    adapter_not_ends_with?: Maybe<Scalars['String']>;
    method?: Maybe<IntegrationMethod>;
    method_not?: Maybe<IntegrationMethod>;
    incomingAssetAmount?: Maybe<Scalars['String']>;
    incomingAssetAmount_not?: Maybe<Scalars['String']>;
    incomingAssetAmount_gt?: Maybe<Scalars['String']>;
    incomingAssetAmount_lt?: Maybe<Scalars['String']>;
    incomingAssetAmount_gte?: Maybe<Scalars['String']>;
    incomingAssetAmount_lte?: Maybe<Scalars['String']>;
    incomingAssetAmount_in?: Maybe<Array<Scalars['String']>>;
    incomingAssetAmount_not_in?: Maybe<Array<Scalars['String']>>;
    incomingAssetAmount_contains?: Maybe<Scalars['String']>;
    incomingAssetAmount_not_contains?: Maybe<Scalars['String']>;
    incomingAssetAmount_starts_with?: Maybe<Scalars['String']>;
    incomingAssetAmount_not_starts_with?: Maybe<Scalars['String']>;
    incomingAssetAmount_ends_with?: Maybe<Scalars['String']>;
    incomingAssetAmount_not_ends_with?: Maybe<Scalars['String']>;
    outgoingAssetAmounts?: Maybe<Array<Scalars['String']>>;
    outgoingAssetAmounts_not?: Maybe<Array<Scalars['String']>>;
    outgoingAssetAmounts_contains?: Maybe<Array<Scalars['String']>>;
    outgoingAssetAmounts_not_contains?: Maybe<Array<Scalars['String']>>;
    timestamp?: Maybe<Scalars['BigInt']>;
    timestamp_not?: Maybe<Scalars['BigInt']>;
    timestamp_gt?: Maybe<Scalars['BigInt']>;
    timestamp_lt?: Maybe<Scalars['BigInt']>;
    timestamp_gte?: Maybe<Scalars['BigInt']>;
    timestamp_lte?: Maybe<Scalars['BigInt']>;
    timestamp_in?: Maybe<Array<Scalars['BigInt']>>;
    timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;
    fundState?: Maybe<Scalars['String']>;
    fundState_not?: Maybe<Scalars['String']>;
    fundState_gt?: Maybe<Scalars['String']>;
    fundState_lt?: Maybe<Scalars['String']>;
    fundState_gte?: Maybe<Scalars['String']>;
    fundState_lte?: Maybe<Scalars['String']>;
    fundState_in?: Maybe<Array<Scalars['String']>>;
    fundState_not_in?: Maybe<Array<Scalars['String']>>;
    fundState_contains?: Maybe<Scalars['String']>;
    fundState_not_contains?: Maybe<Scalars['String']>;
    fundState_starts_with?: Maybe<Scalars['String']>;
    fundState_not_starts_with?: Maybe<Scalars['String']>;
    fundState_ends_with?: Maybe<Scalars['String']>;
    fundState_not_ends_with?: Maybe<Scalars['String']>;
};
export declare enum LendAndStakeTrade_OrderBy {
    Id = "id",
    Fund = "fund",
    Adapter = "adapter",
    Method = "method",
    IncomingAssetAmount = "incomingAssetAmount",
    OutgoingAssetAmounts = "outgoingAssetAmounts",
    Timestamp = "timestamp",
    FundState = "fundState"
}
export declare type LendTrade = Trade & {
    __typename?: 'LendTrade';
    id: Scalars['ID'];
    fund: Fund;
    adapter: IntegrationAdapter;
    method: IntegrationMethod;
    incomingAssetAmount: AssetAmount;
    outgoingAssetAmount: AssetAmount;
    price: Scalars['BigDecimal'];
    timestamp: Scalars['BigInt'];
    fundState: FundState;
};
export declare type LendTrade_Filter = {
    id?: Maybe<Scalars['ID']>;
    id_not?: Maybe<Scalars['ID']>;
    id_gt?: Maybe<Scalars['ID']>;
    id_lt?: Maybe<Scalars['ID']>;
    id_gte?: Maybe<Scalars['ID']>;
    id_lte?: Maybe<Scalars['ID']>;
    id_in?: Maybe<Array<Scalars['ID']>>;
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    fund?: Maybe<Scalars['String']>;
    fund_not?: Maybe<Scalars['String']>;
    fund_gt?: Maybe<Scalars['String']>;
    fund_lt?: Maybe<Scalars['String']>;
    fund_gte?: Maybe<Scalars['String']>;
    fund_lte?: Maybe<Scalars['String']>;
    fund_in?: Maybe<Array<Scalars['String']>>;
    fund_not_in?: Maybe<Array<Scalars['String']>>;
    fund_contains?: Maybe<Scalars['String']>;
    fund_not_contains?: Maybe<Scalars['String']>;
    fund_starts_with?: Maybe<Scalars['String']>;
    fund_not_starts_with?: Maybe<Scalars['String']>;
    fund_ends_with?: Maybe<Scalars['String']>;
    fund_not_ends_with?: Maybe<Scalars['String']>;
    adapter?: Maybe<Scalars['String']>;
    adapter_not?: Maybe<Scalars['String']>;
    adapter_gt?: Maybe<Scalars['String']>;
    adapter_lt?: Maybe<Scalars['String']>;
    adapter_gte?: Maybe<Scalars['String']>;
    adapter_lte?: Maybe<Scalars['String']>;
    adapter_in?: Maybe<Array<Scalars['String']>>;
    adapter_not_in?: Maybe<Array<Scalars['String']>>;
    adapter_contains?: Maybe<Scalars['String']>;
    adapter_not_contains?: Maybe<Scalars['String']>;
    adapter_starts_with?: Maybe<Scalars['String']>;
    adapter_not_starts_with?: Maybe<Scalars['String']>;
    adapter_ends_with?: Maybe<Scalars['String']>;
    adapter_not_ends_with?: Maybe<Scalars['String']>;
    method?: Maybe<IntegrationMethod>;
    method_not?: Maybe<IntegrationMethod>;
    incomingAssetAmount?: Maybe<Scalars['String']>;
    incomingAssetAmount_not?: Maybe<Scalars['String']>;
    incomingAssetAmount_gt?: Maybe<Scalars['String']>;
    incomingAssetAmount_lt?: Maybe<Scalars['String']>;
    incomingAssetAmount_gte?: Maybe<Scalars['String']>;
    incomingAssetAmount_lte?: Maybe<Scalars['String']>;
    incomingAssetAmount_in?: Maybe<Array<Scalars['String']>>;
    incomingAssetAmount_not_in?: Maybe<Array<Scalars['String']>>;
    incomingAssetAmount_contains?: Maybe<Scalars['String']>;
    incomingAssetAmount_not_contains?: Maybe<Scalars['String']>;
    incomingAssetAmount_starts_with?: Maybe<Scalars['String']>;
    incomingAssetAmount_not_starts_with?: Maybe<Scalars['String']>;
    incomingAssetAmount_ends_with?: Maybe<Scalars['String']>;
    incomingAssetAmount_not_ends_with?: Maybe<Scalars['String']>;
    outgoingAssetAmount?: Maybe<Scalars['String']>;
    outgoingAssetAmount_not?: Maybe<Scalars['String']>;
    outgoingAssetAmount_gt?: Maybe<Scalars['String']>;
    outgoingAssetAmount_lt?: Maybe<Scalars['String']>;
    outgoingAssetAmount_gte?: Maybe<Scalars['String']>;
    outgoingAssetAmount_lte?: Maybe<Scalars['String']>;
    outgoingAssetAmount_in?: Maybe<Array<Scalars['String']>>;
    outgoingAssetAmount_not_in?: Maybe<Array<Scalars['String']>>;
    outgoingAssetAmount_contains?: Maybe<Scalars['String']>;
    outgoingAssetAmount_not_contains?: Maybe<Scalars['String']>;
    outgoingAssetAmount_starts_with?: Maybe<Scalars['String']>;
    outgoingAssetAmount_not_starts_with?: Maybe<Scalars['String']>;
    outgoingAssetAmount_ends_with?: Maybe<Scalars['String']>;
    outgoingAssetAmount_not_ends_with?: Maybe<Scalars['String']>;
    price?: Maybe<Scalars['BigDecimal']>;
    price_not?: Maybe<Scalars['BigDecimal']>;
    price_gt?: Maybe<Scalars['BigDecimal']>;
    price_lt?: Maybe<Scalars['BigDecimal']>;
    price_gte?: Maybe<Scalars['BigDecimal']>;
    price_lte?: Maybe<Scalars['BigDecimal']>;
    price_in?: Maybe<Array<Scalars['BigDecimal']>>;
    price_not_in?: Maybe<Array<Scalars['BigDecimal']>>;
    timestamp?: Maybe<Scalars['BigInt']>;
    timestamp_not?: Maybe<Scalars['BigInt']>;
    timestamp_gt?: Maybe<Scalars['BigInt']>;
    timestamp_lt?: Maybe<Scalars['BigInt']>;
    timestamp_gte?: Maybe<Scalars['BigInt']>;
    timestamp_lte?: Maybe<Scalars['BigInt']>;
    timestamp_in?: Maybe<Array<Scalars['BigInt']>>;
    timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;
    fundState?: Maybe<Scalars['String']>;
    fundState_not?: Maybe<Scalars['String']>;
    fundState_gt?: Maybe<Scalars['String']>;
    fundState_lt?: Maybe<Scalars['String']>;
    fundState_gte?: Maybe<Scalars['String']>;
    fundState_lte?: Maybe<Scalars['String']>;
    fundState_in?: Maybe<Array<Scalars['String']>>;
    fundState_not_in?: Maybe<Array<Scalars['String']>>;
    fundState_contains?: Maybe<Scalars['String']>;
    fundState_not_contains?: Maybe<Scalars['String']>;
    fundState_starts_with?: Maybe<Scalars['String']>;
    fundState_not_starts_with?: Maybe<Scalars['String']>;
    fundState_ends_with?: Maybe<Scalars['String']>;
    fundState_not_ends_with?: Maybe<Scalars['String']>;
};
export declare enum LendTrade_OrderBy {
    Id = "id",
    Fund = "fund",
    Adapter = "adapter",
    Method = "method",
    IncomingAssetAmount = "incomingAssetAmount",
    OutgoingAssetAmount = "outgoingAssetAmount",
    Price = "price",
    Timestamp = "timestamp",
    FundState = "fundState"
}
export declare type ManagementFeeActivatedForMigratedFundEvent = EventInterface & FundEventInterface & {
    __typename?: 'ManagementFeeActivatedForMigratedFundEvent';
    id: Scalars['ID'];
    fund: Fund;
    timestamp: Scalars['BigInt'];
    transaction: Transaction;
    comptroller: ComptrollerProxy;
};
export declare type ManagementFeeActivatedForMigratedFundEvent_Filter = {
    id?: Maybe<Scalars['ID']>;
    id_not?: Maybe<Scalars['ID']>;
    id_gt?: Maybe<Scalars['ID']>;
    id_lt?: Maybe<Scalars['ID']>;
    id_gte?: Maybe<Scalars['ID']>;
    id_lte?: Maybe<Scalars['ID']>;
    id_in?: Maybe<Array<Scalars['ID']>>;
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    fund?: Maybe<Scalars['String']>;
    fund_not?: Maybe<Scalars['String']>;
    fund_gt?: Maybe<Scalars['String']>;
    fund_lt?: Maybe<Scalars['String']>;
    fund_gte?: Maybe<Scalars['String']>;
    fund_lte?: Maybe<Scalars['String']>;
    fund_in?: Maybe<Array<Scalars['String']>>;
    fund_not_in?: Maybe<Array<Scalars['String']>>;
    fund_contains?: Maybe<Scalars['String']>;
    fund_not_contains?: Maybe<Scalars['String']>;
    fund_starts_with?: Maybe<Scalars['String']>;
    fund_not_starts_with?: Maybe<Scalars['String']>;
    fund_ends_with?: Maybe<Scalars['String']>;
    fund_not_ends_with?: Maybe<Scalars['String']>;
    timestamp?: Maybe<Scalars['BigInt']>;
    timestamp_not?: Maybe<Scalars['BigInt']>;
    timestamp_gt?: Maybe<Scalars['BigInt']>;
    timestamp_lt?: Maybe<Scalars['BigInt']>;
    timestamp_gte?: Maybe<Scalars['BigInt']>;
    timestamp_lte?: Maybe<Scalars['BigInt']>;
    timestamp_in?: Maybe<Array<Scalars['BigInt']>>;
    timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;
    transaction?: Maybe<Scalars['String']>;
    transaction_not?: Maybe<Scalars['String']>;
    transaction_gt?: Maybe<Scalars['String']>;
    transaction_lt?: Maybe<Scalars['String']>;
    transaction_gte?: Maybe<Scalars['String']>;
    transaction_lte?: Maybe<Scalars['String']>;
    transaction_in?: Maybe<Array<Scalars['String']>>;
    transaction_not_in?: Maybe<Array<Scalars['String']>>;
    transaction_contains?: Maybe<Scalars['String']>;
    transaction_not_contains?: Maybe<Scalars['String']>;
    transaction_starts_with?: Maybe<Scalars['String']>;
    transaction_not_starts_with?: Maybe<Scalars['String']>;
    transaction_ends_with?: Maybe<Scalars['String']>;
    transaction_not_ends_with?: Maybe<Scalars['String']>;
    comptroller?: Maybe<Scalars['String']>;
    comptroller_not?: Maybe<Scalars['String']>;
    comptroller_gt?: Maybe<Scalars['String']>;
    comptroller_lt?: Maybe<Scalars['String']>;
    comptroller_gte?: Maybe<Scalars['String']>;
    comptroller_lte?: Maybe<Scalars['String']>;
    comptroller_in?: Maybe<Array<Scalars['String']>>;
    comptroller_not_in?: Maybe<Array<Scalars['String']>>;
    comptroller_contains?: Maybe<Scalars['String']>;
    comptroller_not_contains?: Maybe<Scalars['String']>;
    comptroller_starts_with?: Maybe<Scalars['String']>;
    comptroller_not_starts_with?: Maybe<Scalars['String']>;
    comptroller_ends_with?: Maybe<Scalars['String']>;
    comptroller_not_ends_with?: Maybe<Scalars['String']>;
};
export declare enum ManagementFeeActivatedForMigratedFundEvent_OrderBy {
    Id = "id",
    Fund = "fund",
    Timestamp = "timestamp",
    Transaction = "transaction",
    Comptroller = "comptroller"
}
export declare type ManagementFeeSetting = FeeSettingInterface & {
    __typename?: 'ManagementFeeSetting';
    id: Scalars['ID'];
    fee: Fee;
    comptroller: ComptrollerProxy;
    scaledPerSecondRate: Scalars['BigInt'];
    timestamp: Scalars['BigInt'];
    events: Array<FundEventInterface>;
};
export declare type ManagementFeeSettingEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<FundEventInterface_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<FundEventInterface_Filter>;
};
export declare type ManagementFeeSetting_Filter = {
    id?: Maybe<Scalars['ID']>;
    id_not?: Maybe<Scalars['ID']>;
    id_gt?: Maybe<Scalars['ID']>;
    id_lt?: Maybe<Scalars['ID']>;
    id_gte?: Maybe<Scalars['ID']>;
    id_lte?: Maybe<Scalars['ID']>;
    id_in?: Maybe<Array<Scalars['ID']>>;
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    fee?: Maybe<Scalars['String']>;
    fee_not?: Maybe<Scalars['String']>;
    fee_gt?: Maybe<Scalars['String']>;
    fee_lt?: Maybe<Scalars['String']>;
    fee_gte?: Maybe<Scalars['String']>;
    fee_lte?: Maybe<Scalars['String']>;
    fee_in?: Maybe<Array<Scalars['String']>>;
    fee_not_in?: Maybe<Array<Scalars['String']>>;
    fee_contains?: Maybe<Scalars['String']>;
    fee_not_contains?: Maybe<Scalars['String']>;
    fee_starts_with?: Maybe<Scalars['String']>;
    fee_not_starts_with?: Maybe<Scalars['String']>;
    fee_ends_with?: Maybe<Scalars['String']>;
    fee_not_ends_with?: Maybe<Scalars['String']>;
    comptroller?: Maybe<Scalars['String']>;
    comptroller_not?: Maybe<Scalars['String']>;
    comptroller_gt?: Maybe<Scalars['String']>;
    comptroller_lt?: Maybe<Scalars['String']>;
    comptroller_gte?: Maybe<Scalars['String']>;
    comptroller_lte?: Maybe<Scalars['String']>;
    comptroller_in?: Maybe<Array<Scalars['String']>>;
    comptroller_not_in?: Maybe<Array<Scalars['String']>>;
    comptroller_contains?: Maybe<Scalars['String']>;
    comptroller_not_contains?: Maybe<Scalars['String']>;
    comptroller_starts_with?: Maybe<Scalars['String']>;
    comptroller_not_starts_with?: Maybe<Scalars['String']>;
    comptroller_ends_with?: Maybe<Scalars['String']>;
    comptroller_not_ends_with?: Maybe<Scalars['String']>;
    scaledPerSecondRate?: Maybe<Scalars['BigInt']>;
    scaledPerSecondRate_not?: Maybe<Scalars['BigInt']>;
    scaledPerSecondRate_gt?: Maybe<Scalars['BigInt']>;
    scaledPerSecondRate_lt?: Maybe<Scalars['BigInt']>;
    scaledPerSecondRate_gte?: Maybe<Scalars['BigInt']>;
    scaledPerSecondRate_lte?: Maybe<Scalars['BigInt']>;
    scaledPerSecondRate_in?: Maybe<Array<Scalars['BigInt']>>;
    scaledPerSecondRate_not_in?: Maybe<Array<Scalars['BigInt']>>;
    timestamp?: Maybe<Scalars['BigInt']>;
    timestamp_not?: Maybe<Scalars['BigInt']>;
    timestamp_gt?: Maybe<Scalars['BigInt']>;
    timestamp_lt?: Maybe<Scalars['BigInt']>;
    timestamp_gte?: Maybe<Scalars['BigInt']>;
    timestamp_lte?: Maybe<Scalars['BigInt']>;
    timestamp_in?: Maybe<Array<Scalars['BigInt']>>;
    timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;
    events?: Maybe<Array<Scalars['String']>>;
    events_not?: Maybe<Array<Scalars['String']>>;
    events_contains?: Maybe<Array<Scalars['String']>>;
    events_not_contains?: Maybe<Array<Scalars['String']>>;
};
export declare enum ManagementFeeSetting_OrderBy {
    Id = "id",
    Fee = "fee",
    Comptroller = "comptroller",
    ScaledPerSecondRate = "scaledPerSecondRate",
    Timestamp = "timestamp",
    Events = "events"
}
export declare type ManagementFeeSettingsAddedEvent = EventInterface & ComptrollerEventInterface & {
    __typename?: 'ManagementFeeSettingsAddedEvent';
    id: Scalars['ID'];
    timestamp: Scalars['BigInt'];
    transaction: Transaction;
    comptroller: ComptrollerProxy;
    scaledPerSecondRate: Scalars['BigInt'];
};
export declare type ManagementFeeSettingsAddedEvent_Filter = {
    id?: Maybe<Scalars['ID']>;
    id_not?: Maybe<Scalars['ID']>;
    id_gt?: Maybe<Scalars['ID']>;
    id_lt?: Maybe<Scalars['ID']>;
    id_gte?: Maybe<Scalars['ID']>;
    id_lte?: Maybe<Scalars['ID']>;
    id_in?: Maybe<Array<Scalars['ID']>>;
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    timestamp?: Maybe<Scalars['BigInt']>;
    timestamp_not?: Maybe<Scalars['BigInt']>;
    timestamp_gt?: Maybe<Scalars['BigInt']>;
    timestamp_lt?: Maybe<Scalars['BigInt']>;
    timestamp_gte?: Maybe<Scalars['BigInt']>;
    timestamp_lte?: Maybe<Scalars['BigInt']>;
    timestamp_in?: Maybe<Array<Scalars['BigInt']>>;
    timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;
    transaction?: Maybe<Scalars['String']>;
    transaction_not?: Maybe<Scalars['String']>;
    transaction_gt?: Maybe<Scalars['String']>;
    transaction_lt?: Maybe<Scalars['String']>;
    transaction_gte?: Maybe<Scalars['String']>;
    transaction_lte?: Maybe<Scalars['String']>;
    transaction_in?: Maybe<Array<Scalars['String']>>;
    transaction_not_in?: Maybe<Array<Scalars['String']>>;
    transaction_contains?: Maybe<Scalars['String']>;
    transaction_not_contains?: Maybe<Scalars['String']>;
    transaction_starts_with?: Maybe<Scalars['String']>;
    transaction_not_starts_with?: Maybe<Scalars['String']>;
    transaction_ends_with?: Maybe<Scalars['String']>;
    transaction_not_ends_with?: Maybe<Scalars['String']>;
    comptroller?: Maybe<Scalars['String']>;
    comptroller_not?: Maybe<Scalars['String']>;
    comptroller_gt?: Maybe<Scalars['String']>;
    comptroller_lt?: Maybe<Scalars['String']>;
    comptroller_gte?: Maybe<Scalars['String']>;
    comptroller_lte?: Maybe<Scalars['String']>;
    comptroller_in?: Maybe<Array<Scalars['String']>>;
    comptroller_not_in?: Maybe<Array<Scalars['String']>>;
    comptroller_contains?: Maybe<Scalars['String']>;
    comptroller_not_contains?: Maybe<Scalars['String']>;
    comptroller_starts_with?: Maybe<Scalars['String']>;
    comptroller_not_starts_with?: Maybe<Scalars['String']>;
    comptroller_ends_with?: Maybe<Scalars['String']>;
    comptroller_not_ends_with?: Maybe<Scalars['String']>;
    scaledPerSecondRate?: Maybe<Scalars['BigInt']>;
    scaledPerSecondRate_not?: Maybe<Scalars['BigInt']>;
    scaledPerSecondRate_gt?: Maybe<Scalars['BigInt']>;
    scaledPerSecondRate_lt?: Maybe<Scalars['BigInt']>;
    scaledPerSecondRate_gte?: Maybe<Scalars['BigInt']>;
    scaledPerSecondRate_lte?: Maybe<Scalars['BigInt']>;
    scaledPerSecondRate_in?: Maybe<Array<Scalars['BigInt']>>;
    scaledPerSecondRate_not_in?: Maybe<Array<Scalars['BigInt']>>;
};
export declare enum ManagementFeeSettingsAddedEvent_OrderBy {
    Id = "id",
    Timestamp = "timestamp",
    Transaction = "transaction",
    Comptroller = "comptroller",
    ScaledPerSecondRate = "scaledPerSecondRate"
}
export declare type ManagementFeeSettledEvent = EventInterface & FundEventInterface & {
    __typename?: 'ManagementFeeSettledEvent';
    id: Scalars['ID'];
    fund: Fund;
    timestamp: Scalars['BigInt'];
    transaction: Transaction;
    comptroller: ComptrollerProxy;
    sharesDue: Scalars['BigDecimal'];
    secondsSinceSettlement: Scalars['BigInt'];
};
export declare type ManagementFeeSettledEvent_Filter = {
    id?: Maybe<Scalars['ID']>;
    id_not?: Maybe<Scalars['ID']>;
    id_gt?: Maybe<Scalars['ID']>;
    id_lt?: Maybe<Scalars['ID']>;
    id_gte?: Maybe<Scalars['ID']>;
    id_lte?: Maybe<Scalars['ID']>;
    id_in?: Maybe<Array<Scalars['ID']>>;
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    fund?: Maybe<Scalars['String']>;
    fund_not?: Maybe<Scalars['String']>;
    fund_gt?: Maybe<Scalars['String']>;
    fund_lt?: Maybe<Scalars['String']>;
    fund_gte?: Maybe<Scalars['String']>;
    fund_lte?: Maybe<Scalars['String']>;
    fund_in?: Maybe<Array<Scalars['String']>>;
    fund_not_in?: Maybe<Array<Scalars['String']>>;
    fund_contains?: Maybe<Scalars['String']>;
    fund_not_contains?: Maybe<Scalars['String']>;
    fund_starts_with?: Maybe<Scalars['String']>;
    fund_not_starts_with?: Maybe<Scalars['String']>;
    fund_ends_with?: Maybe<Scalars['String']>;
    fund_not_ends_with?: Maybe<Scalars['String']>;
    timestamp?: Maybe<Scalars['BigInt']>;
    timestamp_not?: Maybe<Scalars['BigInt']>;
    timestamp_gt?: Maybe<Scalars['BigInt']>;
    timestamp_lt?: Maybe<Scalars['BigInt']>;
    timestamp_gte?: Maybe<Scalars['BigInt']>;
    timestamp_lte?: Maybe<Scalars['BigInt']>;
    timestamp_in?: Maybe<Array<Scalars['BigInt']>>;
    timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;
    transaction?: Maybe<Scalars['String']>;
    transaction_not?: Maybe<Scalars['String']>;
    transaction_gt?: Maybe<Scalars['String']>;
    transaction_lt?: Maybe<Scalars['String']>;
    transaction_gte?: Maybe<Scalars['String']>;
    transaction_lte?: Maybe<Scalars['String']>;
    transaction_in?: Maybe<Array<Scalars['String']>>;
    transaction_not_in?: Maybe<Array<Scalars['String']>>;
    transaction_contains?: Maybe<Scalars['String']>;
    transaction_not_contains?: Maybe<Scalars['String']>;
    transaction_starts_with?: Maybe<Scalars['String']>;
    transaction_not_starts_with?: Maybe<Scalars['String']>;
    transaction_ends_with?: Maybe<Scalars['String']>;
    transaction_not_ends_with?: Maybe<Scalars['String']>;
    comptroller?: Maybe<Scalars['String']>;
    comptroller_not?: Maybe<Scalars['String']>;
    comptroller_gt?: Maybe<Scalars['String']>;
    comptroller_lt?: Maybe<Scalars['String']>;
    comptroller_gte?: Maybe<Scalars['String']>;
    comptroller_lte?: Maybe<Scalars['String']>;
    comptroller_in?: Maybe<Array<Scalars['String']>>;
    comptroller_not_in?: Maybe<Array<Scalars['String']>>;
    comptroller_contains?: Maybe<Scalars['String']>;
    comptroller_not_contains?: Maybe<Scalars['String']>;
    comptroller_starts_with?: Maybe<Scalars['String']>;
    comptroller_not_starts_with?: Maybe<Scalars['String']>;
    comptroller_ends_with?: Maybe<Scalars['String']>;
    comptroller_not_ends_with?: Maybe<Scalars['String']>;
    sharesDue?: Maybe<Scalars['BigDecimal']>;
    sharesDue_not?: Maybe<Scalars['BigDecimal']>;
    sharesDue_gt?: Maybe<Scalars['BigDecimal']>;
    sharesDue_lt?: Maybe<Scalars['BigDecimal']>;
    sharesDue_gte?: Maybe<Scalars['BigDecimal']>;
    sharesDue_lte?: Maybe<Scalars['BigDecimal']>;
    sharesDue_in?: Maybe<Array<Scalars['BigDecimal']>>;
    sharesDue_not_in?: Maybe<Array<Scalars['BigDecimal']>>;
    secondsSinceSettlement?: Maybe<Scalars['BigInt']>;
    secondsSinceSettlement_not?: Maybe<Scalars['BigInt']>;
    secondsSinceSettlement_gt?: Maybe<Scalars['BigInt']>;
    secondsSinceSettlement_lt?: Maybe<Scalars['BigInt']>;
    secondsSinceSettlement_gte?: Maybe<Scalars['BigInt']>;
    secondsSinceSettlement_lte?: Maybe<Scalars['BigInt']>;
    secondsSinceSettlement_in?: Maybe<Array<Scalars['BigInt']>>;
    secondsSinceSettlement_not_in?: Maybe<Array<Scalars['BigInt']>>;
};
export declare enum ManagementFeeSettledEvent_OrderBy {
    Id = "id",
    Fund = "fund",
    Timestamp = "timestamp",
    Transaction = "transaction",
    Comptroller = "comptroller",
    SharesDue = "sharesDue",
    SecondsSinceSettlement = "secondsSinceSettlement"
}
export declare type ManagementFeeState = FundStateInterface & IndividualFeeStateInterface & {
    __typename?: 'ManagementFeeState';
    id: Scalars['ID'];
    fund: Fund;
    timestamp: Scalars['BigInt'];
    fee: Fee;
    lastSettled: Scalars['BigInt'];
    totalSharesPaidOut: Scalars['BigDecimal'];
    events: Array<FundEventInterface>;
};
export declare type ManagementFeeStateEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<FundEventInterface_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<FundEventInterface_Filter>;
};
export declare type ManagementFeeState_Filter = {
    id?: Maybe<Scalars['ID']>;
    id_not?: Maybe<Scalars['ID']>;
    id_gt?: Maybe<Scalars['ID']>;
    id_lt?: Maybe<Scalars['ID']>;
    id_gte?: Maybe<Scalars['ID']>;
    id_lte?: Maybe<Scalars['ID']>;
    id_in?: Maybe<Array<Scalars['ID']>>;
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    fund?: Maybe<Scalars['String']>;
    fund_not?: Maybe<Scalars['String']>;
    fund_gt?: Maybe<Scalars['String']>;
    fund_lt?: Maybe<Scalars['String']>;
    fund_gte?: Maybe<Scalars['String']>;
    fund_lte?: Maybe<Scalars['String']>;
    fund_in?: Maybe<Array<Scalars['String']>>;
    fund_not_in?: Maybe<Array<Scalars['String']>>;
    fund_contains?: Maybe<Scalars['String']>;
    fund_not_contains?: Maybe<Scalars['String']>;
    fund_starts_with?: Maybe<Scalars['String']>;
    fund_not_starts_with?: Maybe<Scalars['String']>;
    fund_ends_with?: Maybe<Scalars['String']>;
    fund_not_ends_with?: Maybe<Scalars['String']>;
    timestamp?: Maybe<Scalars['BigInt']>;
    timestamp_not?: Maybe<Scalars['BigInt']>;
    timestamp_gt?: Maybe<Scalars['BigInt']>;
    timestamp_lt?: Maybe<Scalars['BigInt']>;
    timestamp_gte?: Maybe<Scalars['BigInt']>;
    timestamp_lte?: Maybe<Scalars['BigInt']>;
    timestamp_in?: Maybe<Array<Scalars['BigInt']>>;
    timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;
    fee?: Maybe<Scalars['String']>;
    fee_not?: Maybe<Scalars['String']>;
    fee_gt?: Maybe<Scalars['String']>;
    fee_lt?: Maybe<Scalars['String']>;
    fee_gte?: Maybe<Scalars['String']>;
    fee_lte?: Maybe<Scalars['String']>;
    fee_in?: Maybe<Array<Scalars['String']>>;
    fee_not_in?: Maybe<Array<Scalars['String']>>;
    fee_contains?: Maybe<Scalars['String']>;
    fee_not_contains?: Maybe<Scalars['String']>;
    fee_starts_with?: Maybe<Scalars['String']>;
    fee_not_starts_with?: Maybe<Scalars['String']>;
    fee_ends_with?: Maybe<Scalars['String']>;
    fee_not_ends_with?: Maybe<Scalars['String']>;
    lastSettled?: Maybe<Scalars['BigInt']>;
    lastSettled_not?: Maybe<Scalars['BigInt']>;
    lastSettled_gt?: Maybe<Scalars['BigInt']>;
    lastSettled_lt?: Maybe<Scalars['BigInt']>;
    lastSettled_gte?: Maybe<Scalars['BigInt']>;
    lastSettled_lte?: Maybe<Scalars['BigInt']>;
    lastSettled_in?: Maybe<Array<Scalars['BigInt']>>;
    lastSettled_not_in?: Maybe<Array<Scalars['BigInt']>>;
    totalSharesPaidOut?: Maybe<Scalars['BigDecimal']>;
    totalSharesPaidOut_not?: Maybe<Scalars['BigDecimal']>;
    totalSharesPaidOut_gt?: Maybe<Scalars['BigDecimal']>;
    totalSharesPaidOut_lt?: Maybe<Scalars['BigDecimal']>;
    totalSharesPaidOut_gte?: Maybe<Scalars['BigDecimal']>;
    totalSharesPaidOut_lte?: Maybe<Scalars['BigDecimal']>;
    totalSharesPaidOut_in?: Maybe<Array<Scalars['BigDecimal']>>;
    totalSharesPaidOut_not_in?: Maybe<Array<Scalars['BigDecimal']>>;
    events?: Maybe<Array<Scalars['String']>>;
    events_not?: Maybe<Array<Scalars['String']>>;
    events_contains?: Maybe<Array<Scalars['String']>>;
    events_not_contains?: Maybe<Array<Scalars['String']>>;
};
export declare enum ManagementFeeState_OrderBy {
    Id = "id",
    Fund = "fund",
    Timestamp = "timestamp",
    Fee = "fee",
    LastSettled = "lastSettled",
    TotalSharesPaidOut = "totalSharesPaidOut",
    Events = "events"
}
export declare type MaxConcentrationSetEvent = EventInterface & FundEventInterface & {
    __typename?: 'MaxConcentrationSetEvent';
    id: Scalars['ID'];
    fund: Fund;
    timestamp: Scalars['BigInt'];
    transaction: Transaction;
    comptrollerProxy: Scalars['String'];
    value: Scalars['BigDecimal'];
};
export declare type MaxConcentrationSetEvent_Filter = {
    id?: Maybe<Scalars['ID']>;
    id_not?: Maybe<Scalars['ID']>;
    id_gt?: Maybe<Scalars['ID']>;
    id_lt?: Maybe<Scalars['ID']>;
    id_gte?: Maybe<Scalars['ID']>;
    id_lte?: Maybe<Scalars['ID']>;
    id_in?: Maybe<Array<Scalars['ID']>>;
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    fund?: Maybe<Scalars['String']>;
    fund_not?: Maybe<Scalars['String']>;
    fund_gt?: Maybe<Scalars['String']>;
    fund_lt?: Maybe<Scalars['String']>;
    fund_gte?: Maybe<Scalars['String']>;
    fund_lte?: Maybe<Scalars['String']>;
    fund_in?: Maybe<Array<Scalars['String']>>;
    fund_not_in?: Maybe<Array<Scalars['String']>>;
    fund_contains?: Maybe<Scalars['String']>;
    fund_not_contains?: Maybe<Scalars['String']>;
    fund_starts_with?: Maybe<Scalars['String']>;
    fund_not_starts_with?: Maybe<Scalars['String']>;
    fund_ends_with?: Maybe<Scalars['String']>;
    fund_not_ends_with?: Maybe<Scalars['String']>;
    timestamp?: Maybe<Scalars['BigInt']>;
    timestamp_not?: Maybe<Scalars['BigInt']>;
    timestamp_gt?: Maybe<Scalars['BigInt']>;
    timestamp_lt?: Maybe<Scalars['BigInt']>;
    timestamp_gte?: Maybe<Scalars['BigInt']>;
    timestamp_lte?: Maybe<Scalars['BigInt']>;
    timestamp_in?: Maybe<Array<Scalars['BigInt']>>;
    timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;
    transaction?: Maybe<Scalars['String']>;
    transaction_not?: Maybe<Scalars['String']>;
    transaction_gt?: Maybe<Scalars['String']>;
    transaction_lt?: Maybe<Scalars['String']>;
    transaction_gte?: Maybe<Scalars['String']>;
    transaction_lte?: Maybe<Scalars['String']>;
    transaction_in?: Maybe<Array<Scalars['String']>>;
    transaction_not_in?: Maybe<Array<Scalars['String']>>;
    transaction_contains?: Maybe<Scalars['String']>;
    transaction_not_contains?: Maybe<Scalars['String']>;
    transaction_starts_with?: Maybe<Scalars['String']>;
    transaction_not_starts_with?: Maybe<Scalars['String']>;
    transaction_ends_with?: Maybe<Scalars['String']>;
    transaction_not_ends_with?: Maybe<Scalars['String']>;
    comptrollerProxy?: Maybe<Scalars['String']>;
    comptrollerProxy_not?: Maybe<Scalars['String']>;
    comptrollerProxy_gt?: Maybe<Scalars['String']>;
    comptrollerProxy_lt?: Maybe<Scalars['String']>;
    comptrollerProxy_gte?: Maybe<Scalars['String']>;
    comptrollerProxy_lte?: Maybe<Scalars['String']>;
    comptrollerProxy_in?: Maybe<Array<Scalars['String']>>;
    comptrollerProxy_not_in?: Maybe<Array<Scalars['String']>>;
    comptrollerProxy_contains?: Maybe<Scalars['String']>;
    comptrollerProxy_not_contains?: Maybe<Scalars['String']>;
    comptrollerProxy_starts_with?: Maybe<Scalars['String']>;
    comptrollerProxy_not_starts_with?: Maybe<Scalars['String']>;
    comptrollerProxy_ends_with?: Maybe<Scalars['String']>;
    comptrollerProxy_not_ends_with?: Maybe<Scalars['String']>;
    value?: Maybe<Scalars['BigDecimal']>;
    value_not?: Maybe<Scalars['BigDecimal']>;
    value_gt?: Maybe<Scalars['BigDecimal']>;
    value_lt?: Maybe<Scalars['BigDecimal']>;
    value_gte?: Maybe<Scalars['BigDecimal']>;
    value_lte?: Maybe<Scalars['BigDecimal']>;
    value_in?: Maybe<Array<Scalars['BigDecimal']>>;
    value_not_in?: Maybe<Array<Scalars['BigDecimal']>>;
};
export declare enum MaxConcentrationSetEvent_OrderBy {
    Id = "id",
    Fund = "fund",
    Timestamp = "timestamp",
    Transaction = "transaction",
    ComptrollerProxy = "comptrollerProxy",
    Value = "value"
}
export declare type MaxConcentrationSetting = PolicySettingInterface & {
    __typename?: 'MaxConcentrationSetting';
    id: Scalars['ID'];
    policy: Policy;
    comptroller: ComptrollerProxy;
    maxConcentration: Scalars['BigDecimal'];
    timestamp: Scalars['BigInt'];
    enabled: Scalars['Boolean'];
    events: Array<FundEventInterface>;
};
export declare type MaxConcentrationSettingEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<FundEventInterface_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<FundEventInterface_Filter>;
};
export declare type MaxConcentrationSetting_Filter = {
    id?: Maybe<Scalars['ID']>;
    id_not?: Maybe<Scalars['ID']>;
    id_gt?: Maybe<Scalars['ID']>;
    id_lt?: Maybe<Scalars['ID']>;
    id_gte?: Maybe<Scalars['ID']>;
    id_lte?: Maybe<Scalars['ID']>;
    id_in?: Maybe<Array<Scalars['ID']>>;
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    policy?: Maybe<Scalars['String']>;
    policy_not?: Maybe<Scalars['String']>;
    policy_gt?: Maybe<Scalars['String']>;
    policy_lt?: Maybe<Scalars['String']>;
    policy_gte?: Maybe<Scalars['String']>;
    policy_lte?: Maybe<Scalars['String']>;
    policy_in?: Maybe<Array<Scalars['String']>>;
    policy_not_in?: Maybe<Array<Scalars['String']>>;
    policy_contains?: Maybe<Scalars['String']>;
    policy_not_contains?: Maybe<Scalars['String']>;
    policy_starts_with?: Maybe<Scalars['String']>;
    policy_not_starts_with?: Maybe<Scalars['String']>;
    policy_ends_with?: Maybe<Scalars['String']>;
    policy_not_ends_with?: Maybe<Scalars['String']>;
    comptroller?: Maybe<Scalars['String']>;
    comptroller_not?: Maybe<Scalars['String']>;
    comptroller_gt?: Maybe<Scalars['String']>;
    comptroller_lt?: Maybe<Scalars['String']>;
    comptroller_gte?: Maybe<Scalars['String']>;
    comptroller_lte?: Maybe<Scalars['String']>;
    comptroller_in?: Maybe<Array<Scalars['String']>>;
    comptroller_not_in?: Maybe<Array<Scalars['String']>>;
    comptroller_contains?: Maybe<Scalars['String']>;
    comptroller_not_contains?: Maybe<Scalars['String']>;
    comptroller_starts_with?: Maybe<Scalars['String']>;
    comptroller_not_starts_with?: Maybe<Scalars['String']>;
    comptroller_ends_with?: Maybe<Scalars['String']>;
    comptroller_not_ends_with?: Maybe<Scalars['String']>;
    maxConcentration?: Maybe<Scalars['BigDecimal']>;
    maxConcentration_not?: Maybe<Scalars['BigDecimal']>;
    maxConcentration_gt?: Maybe<Scalars['BigDecimal']>;
    maxConcentration_lt?: Maybe<Scalars['BigDecimal']>;
    maxConcentration_gte?: Maybe<Scalars['BigDecimal']>;
    maxConcentration_lte?: Maybe<Scalars['BigDecimal']>;
    maxConcentration_in?: Maybe<Array<Scalars['BigDecimal']>>;
    maxConcentration_not_in?: Maybe<Array<Scalars['BigDecimal']>>;
    timestamp?: Maybe<Scalars['BigInt']>;
    timestamp_not?: Maybe<Scalars['BigInt']>;
    timestamp_gt?: Maybe<Scalars['BigInt']>;
    timestamp_lt?: Maybe<Scalars['BigInt']>;
    timestamp_gte?: Maybe<Scalars['BigInt']>;
    timestamp_lte?: Maybe<Scalars['BigInt']>;
    timestamp_in?: Maybe<Array<Scalars['BigInt']>>;
    timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;
    enabled?: Maybe<Scalars['Boolean']>;
    enabled_not?: Maybe<Scalars['Boolean']>;
    enabled_in?: Maybe<Array<Scalars['Boolean']>>;
    enabled_not_in?: Maybe<Array<Scalars['Boolean']>>;
    events?: Maybe<Array<Scalars['String']>>;
    events_not?: Maybe<Array<Scalars['String']>>;
    events_contains?: Maybe<Array<Scalars['String']>>;
    events_not_contains?: Maybe<Array<Scalars['String']>>;
};
export declare enum MaxConcentrationSetting_OrderBy {
    Id = "id",
    Policy = "policy",
    Comptroller = "comptroller",
    MaxConcentration = "maxConcentration",
    Timestamp = "timestamp",
    Enabled = "enabled",
    Events = "events"
}
export declare type MigratedSharesDuePaidEvent = EventInterface & FundEventInterface & SharesChangeInterface & FeeSharesChangeInterface & {
    __typename?: 'MigratedSharesDuePaidEvent';
    id: Scalars['ID'];
    fund: Fund;
    type: ShareChangeType;
    investor: Account;
    timestamp: Scalars['BigInt'];
    transaction: Transaction;
    investmentState: InvestmentState;
    shares: Scalars['BigDecimal'];
    comptrollerProxy: ComptrollerProxy;
    fundState: FundState;
};
export declare type MigratedSharesDuePaidEvent_Filter = {
    id?: Maybe<Scalars['ID']>;
    id_not?: Maybe<Scalars['ID']>;
    id_gt?: Maybe<Scalars['ID']>;
    id_lt?: Maybe<Scalars['ID']>;
    id_gte?: Maybe<Scalars['ID']>;
    id_lte?: Maybe<Scalars['ID']>;
    id_in?: Maybe<Array<Scalars['ID']>>;
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    fund?: Maybe<Scalars['String']>;
    fund_not?: Maybe<Scalars['String']>;
    fund_gt?: Maybe<Scalars['String']>;
    fund_lt?: Maybe<Scalars['String']>;
    fund_gte?: Maybe<Scalars['String']>;
    fund_lte?: Maybe<Scalars['String']>;
    fund_in?: Maybe<Array<Scalars['String']>>;
    fund_not_in?: Maybe<Array<Scalars['String']>>;
    fund_contains?: Maybe<Scalars['String']>;
    fund_not_contains?: Maybe<Scalars['String']>;
    fund_starts_with?: Maybe<Scalars['String']>;
    fund_not_starts_with?: Maybe<Scalars['String']>;
    fund_ends_with?: Maybe<Scalars['String']>;
    fund_not_ends_with?: Maybe<Scalars['String']>;
    type?: Maybe<ShareChangeType>;
    type_not?: Maybe<ShareChangeType>;
    investor?: Maybe<Scalars['String']>;
    investor_not?: Maybe<Scalars['String']>;
    investor_gt?: Maybe<Scalars['String']>;
    investor_lt?: Maybe<Scalars['String']>;
    investor_gte?: Maybe<Scalars['String']>;
    investor_lte?: Maybe<Scalars['String']>;
    investor_in?: Maybe<Array<Scalars['String']>>;
    investor_not_in?: Maybe<Array<Scalars['String']>>;
    investor_contains?: Maybe<Scalars['String']>;
    investor_not_contains?: Maybe<Scalars['String']>;
    investor_starts_with?: Maybe<Scalars['String']>;
    investor_not_starts_with?: Maybe<Scalars['String']>;
    investor_ends_with?: Maybe<Scalars['String']>;
    investor_not_ends_with?: Maybe<Scalars['String']>;
    timestamp?: Maybe<Scalars['BigInt']>;
    timestamp_not?: Maybe<Scalars['BigInt']>;
    timestamp_gt?: Maybe<Scalars['BigInt']>;
    timestamp_lt?: Maybe<Scalars['BigInt']>;
    timestamp_gte?: Maybe<Scalars['BigInt']>;
    timestamp_lte?: Maybe<Scalars['BigInt']>;
    timestamp_in?: Maybe<Array<Scalars['BigInt']>>;
    timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;
    transaction?: Maybe<Scalars['String']>;
    transaction_not?: Maybe<Scalars['String']>;
    transaction_gt?: Maybe<Scalars['String']>;
    transaction_lt?: Maybe<Scalars['String']>;
    transaction_gte?: Maybe<Scalars['String']>;
    transaction_lte?: Maybe<Scalars['String']>;
    transaction_in?: Maybe<Array<Scalars['String']>>;
    transaction_not_in?: Maybe<Array<Scalars['String']>>;
    transaction_contains?: Maybe<Scalars['String']>;
    transaction_not_contains?: Maybe<Scalars['String']>;
    transaction_starts_with?: Maybe<Scalars['String']>;
    transaction_not_starts_with?: Maybe<Scalars['String']>;
    transaction_ends_with?: Maybe<Scalars['String']>;
    transaction_not_ends_with?: Maybe<Scalars['String']>;
    investmentState?: Maybe<Scalars['String']>;
    investmentState_not?: Maybe<Scalars['String']>;
    investmentState_gt?: Maybe<Scalars['String']>;
    investmentState_lt?: Maybe<Scalars['String']>;
    investmentState_gte?: Maybe<Scalars['String']>;
    investmentState_lte?: Maybe<Scalars['String']>;
    investmentState_in?: Maybe<Array<Scalars['String']>>;
    investmentState_not_in?: Maybe<Array<Scalars['String']>>;
    investmentState_contains?: Maybe<Scalars['String']>;
    investmentState_not_contains?: Maybe<Scalars['String']>;
    investmentState_starts_with?: Maybe<Scalars['String']>;
    investmentState_not_starts_with?: Maybe<Scalars['String']>;
    investmentState_ends_with?: Maybe<Scalars['String']>;
    investmentState_not_ends_with?: Maybe<Scalars['String']>;
    shares?: Maybe<Scalars['BigDecimal']>;
    shares_not?: Maybe<Scalars['BigDecimal']>;
    shares_gt?: Maybe<Scalars['BigDecimal']>;
    shares_lt?: Maybe<Scalars['BigDecimal']>;
    shares_gte?: Maybe<Scalars['BigDecimal']>;
    shares_lte?: Maybe<Scalars['BigDecimal']>;
    shares_in?: Maybe<Array<Scalars['BigDecimal']>>;
    shares_not_in?: Maybe<Array<Scalars['BigDecimal']>>;
    comptrollerProxy?: Maybe<Scalars['String']>;
    comptrollerProxy_not?: Maybe<Scalars['String']>;
    comptrollerProxy_gt?: Maybe<Scalars['String']>;
    comptrollerProxy_lt?: Maybe<Scalars['String']>;
    comptrollerProxy_gte?: Maybe<Scalars['String']>;
    comptrollerProxy_lte?: Maybe<Scalars['String']>;
    comptrollerProxy_in?: Maybe<Array<Scalars['String']>>;
    comptrollerProxy_not_in?: Maybe<Array<Scalars['String']>>;
    comptrollerProxy_contains?: Maybe<Scalars['String']>;
    comptrollerProxy_not_contains?: Maybe<Scalars['String']>;
    comptrollerProxy_starts_with?: Maybe<Scalars['String']>;
    comptrollerProxy_not_starts_with?: Maybe<Scalars['String']>;
    comptrollerProxy_ends_with?: Maybe<Scalars['String']>;
    comptrollerProxy_not_ends_with?: Maybe<Scalars['String']>;
    fundState?: Maybe<Scalars['String']>;
    fundState_not?: Maybe<Scalars['String']>;
    fundState_gt?: Maybe<Scalars['String']>;
    fundState_lt?: Maybe<Scalars['String']>;
    fundState_gte?: Maybe<Scalars['String']>;
    fundState_lte?: Maybe<Scalars['String']>;
    fundState_in?: Maybe<Array<Scalars['String']>>;
    fundState_not_in?: Maybe<Array<Scalars['String']>>;
    fundState_contains?: Maybe<Scalars['String']>;
    fundState_not_contains?: Maybe<Scalars['String']>;
    fundState_starts_with?: Maybe<Scalars['String']>;
    fundState_not_starts_with?: Maybe<Scalars['String']>;
    fundState_ends_with?: Maybe<Scalars['String']>;
    fundState_not_ends_with?: Maybe<Scalars['String']>;
};
export declare enum MigratedSharesDuePaidEvent_OrderBy {
    Id = "id",
    Fund = "fund",
    Type = "type",
    Investor = "investor",
    Timestamp = "timestamp",
    Transaction = "transaction",
    InvestmentState = "investmentState",
    Shares = "shares",
    ComptrollerProxy = "comptrollerProxy",
    FundState = "fundState"
}
export declare type Migration = {
    __typename?: 'Migration';
    id: Scalars['ID'];
    prevRelease: Release;
    nextRelease: Release;
    fund: Fund;
    executableTimestamp: Scalars['BigInt'];
    executed: Scalars['Boolean'];
    cancelled: Scalars['Boolean'];
    nextAccessor: ComptrollerProxy;
};
export declare type MigrationCancelledEvent = EventInterface & FundEventInterface & {
    __typename?: 'MigrationCancelledEvent';
    id: Scalars['ID'];
    fund: Fund;
    timestamp: Scalars['BigInt'];
    transaction: Transaction;
    migration: Migration;
    executableTimestamp: Scalars['BigInt'];
};
export declare type MigrationCancelledEvent_Filter = {
    id?: Maybe<Scalars['ID']>;
    id_not?: Maybe<Scalars['ID']>;
    id_gt?: Maybe<Scalars['ID']>;
    id_lt?: Maybe<Scalars['ID']>;
    id_gte?: Maybe<Scalars['ID']>;
    id_lte?: Maybe<Scalars['ID']>;
    id_in?: Maybe<Array<Scalars['ID']>>;
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    fund?: Maybe<Scalars['String']>;
    fund_not?: Maybe<Scalars['String']>;
    fund_gt?: Maybe<Scalars['String']>;
    fund_lt?: Maybe<Scalars['String']>;
    fund_gte?: Maybe<Scalars['String']>;
    fund_lte?: Maybe<Scalars['String']>;
    fund_in?: Maybe<Array<Scalars['String']>>;
    fund_not_in?: Maybe<Array<Scalars['String']>>;
    fund_contains?: Maybe<Scalars['String']>;
    fund_not_contains?: Maybe<Scalars['String']>;
    fund_starts_with?: Maybe<Scalars['String']>;
    fund_not_starts_with?: Maybe<Scalars['String']>;
    fund_ends_with?: Maybe<Scalars['String']>;
    fund_not_ends_with?: Maybe<Scalars['String']>;
    timestamp?: Maybe<Scalars['BigInt']>;
    timestamp_not?: Maybe<Scalars['BigInt']>;
    timestamp_gt?: Maybe<Scalars['BigInt']>;
    timestamp_lt?: Maybe<Scalars['BigInt']>;
    timestamp_gte?: Maybe<Scalars['BigInt']>;
    timestamp_lte?: Maybe<Scalars['BigInt']>;
    timestamp_in?: Maybe<Array<Scalars['BigInt']>>;
    timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;
    transaction?: Maybe<Scalars['String']>;
    transaction_not?: Maybe<Scalars['String']>;
    transaction_gt?: Maybe<Scalars['String']>;
    transaction_lt?: Maybe<Scalars['String']>;
    transaction_gte?: Maybe<Scalars['String']>;
    transaction_lte?: Maybe<Scalars['String']>;
    transaction_in?: Maybe<Array<Scalars['String']>>;
    transaction_not_in?: Maybe<Array<Scalars['String']>>;
    transaction_contains?: Maybe<Scalars['String']>;
    transaction_not_contains?: Maybe<Scalars['String']>;
    transaction_starts_with?: Maybe<Scalars['String']>;
    transaction_not_starts_with?: Maybe<Scalars['String']>;
    transaction_ends_with?: Maybe<Scalars['String']>;
    transaction_not_ends_with?: Maybe<Scalars['String']>;
    migration?: Maybe<Scalars['String']>;
    migration_not?: Maybe<Scalars['String']>;
    migration_gt?: Maybe<Scalars['String']>;
    migration_lt?: Maybe<Scalars['String']>;
    migration_gte?: Maybe<Scalars['String']>;
    migration_lte?: Maybe<Scalars['String']>;
    migration_in?: Maybe<Array<Scalars['String']>>;
    migration_not_in?: Maybe<Array<Scalars['String']>>;
    migration_contains?: Maybe<Scalars['String']>;
    migration_not_contains?: Maybe<Scalars['String']>;
    migration_starts_with?: Maybe<Scalars['String']>;
    migration_not_starts_with?: Maybe<Scalars['String']>;
    migration_ends_with?: Maybe<Scalars['String']>;
    migration_not_ends_with?: Maybe<Scalars['String']>;
    executableTimestamp?: Maybe<Scalars['BigInt']>;
    executableTimestamp_not?: Maybe<Scalars['BigInt']>;
    executableTimestamp_gt?: Maybe<Scalars['BigInt']>;
    executableTimestamp_lt?: Maybe<Scalars['BigInt']>;
    executableTimestamp_gte?: Maybe<Scalars['BigInt']>;
    executableTimestamp_lte?: Maybe<Scalars['BigInt']>;
    executableTimestamp_in?: Maybe<Array<Scalars['BigInt']>>;
    executableTimestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;
};
export declare enum MigrationCancelledEvent_OrderBy {
    Id = "id",
    Fund = "fund",
    Timestamp = "timestamp",
    Transaction = "transaction",
    Migration = "migration",
    ExecutableTimestamp = "executableTimestamp"
}
export declare type MigrationExecutedEvent = EventInterface & FundEventInterface & {
    __typename?: 'MigrationExecutedEvent';
    id: Scalars['ID'];
    fund: Fund;
    timestamp: Scalars['BigInt'];
    transaction: Transaction;
    migration: Migration;
    executableTimestamp: Scalars['BigInt'];
};
export declare type MigrationExecutedEvent_Filter = {
    id?: Maybe<Scalars['ID']>;
    id_not?: Maybe<Scalars['ID']>;
    id_gt?: Maybe<Scalars['ID']>;
    id_lt?: Maybe<Scalars['ID']>;
    id_gte?: Maybe<Scalars['ID']>;
    id_lte?: Maybe<Scalars['ID']>;
    id_in?: Maybe<Array<Scalars['ID']>>;
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    fund?: Maybe<Scalars['String']>;
    fund_not?: Maybe<Scalars['String']>;
    fund_gt?: Maybe<Scalars['String']>;
    fund_lt?: Maybe<Scalars['String']>;
    fund_gte?: Maybe<Scalars['String']>;
    fund_lte?: Maybe<Scalars['String']>;
    fund_in?: Maybe<Array<Scalars['String']>>;
    fund_not_in?: Maybe<Array<Scalars['String']>>;
    fund_contains?: Maybe<Scalars['String']>;
    fund_not_contains?: Maybe<Scalars['String']>;
    fund_starts_with?: Maybe<Scalars['String']>;
    fund_not_starts_with?: Maybe<Scalars['String']>;
    fund_ends_with?: Maybe<Scalars['String']>;
    fund_not_ends_with?: Maybe<Scalars['String']>;
    timestamp?: Maybe<Scalars['BigInt']>;
    timestamp_not?: Maybe<Scalars['BigInt']>;
    timestamp_gt?: Maybe<Scalars['BigInt']>;
    timestamp_lt?: Maybe<Scalars['BigInt']>;
    timestamp_gte?: Maybe<Scalars['BigInt']>;
    timestamp_lte?: Maybe<Scalars['BigInt']>;
    timestamp_in?: Maybe<Array<Scalars['BigInt']>>;
    timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;
    transaction?: Maybe<Scalars['String']>;
    transaction_not?: Maybe<Scalars['String']>;
    transaction_gt?: Maybe<Scalars['String']>;
    transaction_lt?: Maybe<Scalars['String']>;
    transaction_gte?: Maybe<Scalars['String']>;
    transaction_lte?: Maybe<Scalars['String']>;
    transaction_in?: Maybe<Array<Scalars['String']>>;
    transaction_not_in?: Maybe<Array<Scalars['String']>>;
    transaction_contains?: Maybe<Scalars['String']>;
    transaction_not_contains?: Maybe<Scalars['String']>;
    transaction_starts_with?: Maybe<Scalars['String']>;
    transaction_not_starts_with?: Maybe<Scalars['String']>;
    transaction_ends_with?: Maybe<Scalars['String']>;
    transaction_not_ends_with?: Maybe<Scalars['String']>;
    migration?: Maybe<Scalars['String']>;
    migration_not?: Maybe<Scalars['String']>;
    migration_gt?: Maybe<Scalars['String']>;
    migration_lt?: Maybe<Scalars['String']>;
    migration_gte?: Maybe<Scalars['String']>;
    migration_lte?: Maybe<Scalars['String']>;
    migration_in?: Maybe<Array<Scalars['String']>>;
    migration_not_in?: Maybe<Array<Scalars['String']>>;
    migration_contains?: Maybe<Scalars['String']>;
    migration_not_contains?: Maybe<Scalars['String']>;
    migration_starts_with?: Maybe<Scalars['String']>;
    migration_not_starts_with?: Maybe<Scalars['String']>;
    migration_ends_with?: Maybe<Scalars['String']>;
    migration_not_ends_with?: Maybe<Scalars['String']>;
    executableTimestamp?: Maybe<Scalars['BigInt']>;
    executableTimestamp_not?: Maybe<Scalars['BigInt']>;
    executableTimestamp_gt?: Maybe<Scalars['BigInt']>;
    executableTimestamp_lt?: Maybe<Scalars['BigInt']>;
    executableTimestamp_gte?: Maybe<Scalars['BigInt']>;
    executableTimestamp_lte?: Maybe<Scalars['BigInt']>;
    executableTimestamp_in?: Maybe<Array<Scalars['BigInt']>>;
    executableTimestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;
};
export declare enum MigrationExecutedEvent_OrderBy {
    Id = "id",
    Fund = "fund",
    Timestamp = "timestamp",
    Transaction = "transaction",
    Migration = "migration",
    ExecutableTimestamp = "executableTimestamp"
}
export declare type MigrationInCancelHookFailedEvent = EventInterface & FundEventInterface & {
    __typename?: 'MigrationInCancelHookFailedEvent';
    id: Scalars['ID'];
    fund: Fund;
    timestamp: Scalars['BigInt'];
    transaction: Transaction;
    vaultProxy: Scalars['String'];
    prevFundDeployer: Scalars['String'];
    nextFundDeployer: Scalars['String'];
    nextVaultLib: Scalars['String'];
    nextVaultAccessor: Scalars['String'];
    failureReturnData: Scalars['String'];
};
export declare type MigrationInCancelHookFailedEvent_Filter = {
    id?: Maybe<Scalars['ID']>;
    id_not?: Maybe<Scalars['ID']>;
    id_gt?: Maybe<Scalars['ID']>;
    id_lt?: Maybe<Scalars['ID']>;
    id_gte?: Maybe<Scalars['ID']>;
    id_lte?: Maybe<Scalars['ID']>;
    id_in?: Maybe<Array<Scalars['ID']>>;
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    fund?: Maybe<Scalars['String']>;
    fund_not?: Maybe<Scalars['String']>;
    fund_gt?: Maybe<Scalars['String']>;
    fund_lt?: Maybe<Scalars['String']>;
    fund_gte?: Maybe<Scalars['String']>;
    fund_lte?: Maybe<Scalars['String']>;
    fund_in?: Maybe<Array<Scalars['String']>>;
    fund_not_in?: Maybe<Array<Scalars['String']>>;
    fund_contains?: Maybe<Scalars['String']>;
    fund_not_contains?: Maybe<Scalars['String']>;
    fund_starts_with?: Maybe<Scalars['String']>;
    fund_not_starts_with?: Maybe<Scalars['String']>;
    fund_ends_with?: Maybe<Scalars['String']>;
    fund_not_ends_with?: Maybe<Scalars['String']>;
    timestamp?: Maybe<Scalars['BigInt']>;
    timestamp_not?: Maybe<Scalars['BigInt']>;
    timestamp_gt?: Maybe<Scalars['BigInt']>;
    timestamp_lt?: Maybe<Scalars['BigInt']>;
    timestamp_gte?: Maybe<Scalars['BigInt']>;
    timestamp_lte?: Maybe<Scalars['BigInt']>;
    timestamp_in?: Maybe<Array<Scalars['BigInt']>>;
    timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;
    transaction?: Maybe<Scalars['String']>;
    transaction_not?: Maybe<Scalars['String']>;
    transaction_gt?: Maybe<Scalars['String']>;
    transaction_lt?: Maybe<Scalars['String']>;
    transaction_gte?: Maybe<Scalars['String']>;
    transaction_lte?: Maybe<Scalars['String']>;
    transaction_in?: Maybe<Array<Scalars['String']>>;
    transaction_not_in?: Maybe<Array<Scalars['String']>>;
    transaction_contains?: Maybe<Scalars['String']>;
    transaction_not_contains?: Maybe<Scalars['String']>;
    transaction_starts_with?: Maybe<Scalars['String']>;
    transaction_not_starts_with?: Maybe<Scalars['String']>;
    transaction_ends_with?: Maybe<Scalars['String']>;
    transaction_not_ends_with?: Maybe<Scalars['String']>;
    vaultProxy?: Maybe<Scalars['String']>;
    vaultProxy_not?: Maybe<Scalars['String']>;
    vaultProxy_gt?: Maybe<Scalars['String']>;
    vaultProxy_lt?: Maybe<Scalars['String']>;
    vaultProxy_gte?: Maybe<Scalars['String']>;
    vaultProxy_lte?: Maybe<Scalars['String']>;
    vaultProxy_in?: Maybe<Array<Scalars['String']>>;
    vaultProxy_not_in?: Maybe<Array<Scalars['String']>>;
    vaultProxy_contains?: Maybe<Scalars['String']>;
    vaultProxy_not_contains?: Maybe<Scalars['String']>;
    vaultProxy_starts_with?: Maybe<Scalars['String']>;
    vaultProxy_not_starts_with?: Maybe<Scalars['String']>;
    vaultProxy_ends_with?: Maybe<Scalars['String']>;
    vaultProxy_not_ends_with?: Maybe<Scalars['String']>;
    prevFundDeployer?: Maybe<Scalars['String']>;
    prevFundDeployer_not?: Maybe<Scalars['String']>;
    prevFundDeployer_gt?: Maybe<Scalars['String']>;
    prevFundDeployer_lt?: Maybe<Scalars['String']>;
    prevFundDeployer_gte?: Maybe<Scalars['String']>;
    prevFundDeployer_lte?: Maybe<Scalars['String']>;
    prevFundDeployer_in?: Maybe<Array<Scalars['String']>>;
    prevFundDeployer_not_in?: Maybe<Array<Scalars['String']>>;
    prevFundDeployer_contains?: Maybe<Scalars['String']>;
    prevFundDeployer_not_contains?: Maybe<Scalars['String']>;
    prevFundDeployer_starts_with?: Maybe<Scalars['String']>;
    prevFundDeployer_not_starts_with?: Maybe<Scalars['String']>;
    prevFundDeployer_ends_with?: Maybe<Scalars['String']>;
    prevFundDeployer_not_ends_with?: Maybe<Scalars['String']>;
    nextFundDeployer?: Maybe<Scalars['String']>;
    nextFundDeployer_not?: Maybe<Scalars['String']>;
    nextFundDeployer_gt?: Maybe<Scalars['String']>;
    nextFundDeployer_lt?: Maybe<Scalars['String']>;
    nextFundDeployer_gte?: Maybe<Scalars['String']>;
    nextFundDeployer_lte?: Maybe<Scalars['String']>;
    nextFundDeployer_in?: Maybe<Array<Scalars['String']>>;
    nextFundDeployer_not_in?: Maybe<Array<Scalars['String']>>;
    nextFundDeployer_contains?: Maybe<Scalars['String']>;
    nextFundDeployer_not_contains?: Maybe<Scalars['String']>;
    nextFundDeployer_starts_with?: Maybe<Scalars['String']>;
    nextFundDeployer_not_starts_with?: Maybe<Scalars['String']>;
    nextFundDeployer_ends_with?: Maybe<Scalars['String']>;
    nextFundDeployer_not_ends_with?: Maybe<Scalars['String']>;
    nextVaultLib?: Maybe<Scalars['String']>;
    nextVaultLib_not?: Maybe<Scalars['String']>;
    nextVaultLib_gt?: Maybe<Scalars['String']>;
    nextVaultLib_lt?: Maybe<Scalars['String']>;
    nextVaultLib_gte?: Maybe<Scalars['String']>;
    nextVaultLib_lte?: Maybe<Scalars['String']>;
    nextVaultLib_in?: Maybe<Array<Scalars['String']>>;
    nextVaultLib_not_in?: Maybe<Array<Scalars['String']>>;
    nextVaultLib_contains?: Maybe<Scalars['String']>;
    nextVaultLib_not_contains?: Maybe<Scalars['String']>;
    nextVaultLib_starts_with?: Maybe<Scalars['String']>;
    nextVaultLib_not_starts_with?: Maybe<Scalars['String']>;
    nextVaultLib_ends_with?: Maybe<Scalars['String']>;
    nextVaultLib_not_ends_with?: Maybe<Scalars['String']>;
    nextVaultAccessor?: Maybe<Scalars['String']>;
    nextVaultAccessor_not?: Maybe<Scalars['String']>;
    nextVaultAccessor_gt?: Maybe<Scalars['String']>;
    nextVaultAccessor_lt?: Maybe<Scalars['String']>;
    nextVaultAccessor_gte?: Maybe<Scalars['String']>;
    nextVaultAccessor_lte?: Maybe<Scalars['String']>;
    nextVaultAccessor_in?: Maybe<Array<Scalars['String']>>;
    nextVaultAccessor_not_in?: Maybe<Array<Scalars['String']>>;
    nextVaultAccessor_contains?: Maybe<Scalars['String']>;
    nextVaultAccessor_not_contains?: Maybe<Scalars['String']>;
    nextVaultAccessor_starts_with?: Maybe<Scalars['String']>;
    nextVaultAccessor_not_starts_with?: Maybe<Scalars['String']>;
    nextVaultAccessor_ends_with?: Maybe<Scalars['String']>;
    nextVaultAccessor_not_ends_with?: Maybe<Scalars['String']>;
    failureReturnData?: Maybe<Scalars['String']>;
    failureReturnData_not?: Maybe<Scalars['String']>;
    failureReturnData_gt?: Maybe<Scalars['String']>;
    failureReturnData_lt?: Maybe<Scalars['String']>;
    failureReturnData_gte?: Maybe<Scalars['String']>;
    failureReturnData_lte?: Maybe<Scalars['String']>;
    failureReturnData_in?: Maybe<Array<Scalars['String']>>;
    failureReturnData_not_in?: Maybe<Array<Scalars['String']>>;
    failureReturnData_contains?: Maybe<Scalars['String']>;
    failureReturnData_not_contains?: Maybe<Scalars['String']>;
    failureReturnData_starts_with?: Maybe<Scalars['String']>;
    failureReturnData_not_starts_with?: Maybe<Scalars['String']>;
    failureReturnData_ends_with?: Maybe<Scalars['String']>;
    failureReturnData_not_ends_with?: Maybe<Scalars['String']>;
};
export declare enum MigrationInCancelHookFailedEvent_OrderBy {
    Id = "id",
    Fund = "fund",
    Timestamp = "timestamp",
    Transaction = "transaction",
    VaultProxy = "vaultProxy",
    PrevFundDeployer = "prevFundDeployer",
    NextFundDeployer = "nextFundDeployer",
    NextVaultLib = "nextVaultLib",
    NextVaultAccessor = "nextVaultAccessor",
    FailureReturnData = "failureReturnData"
}
export declare type MigrationOutHookFailedEvent = EventInterface & FundEventInterface & {
    __typename?: 'MigrationOutHookFailedEvent';
    id: Scalars['ID'];
    fund: Fund;
    timestamp: Scalars['BigInt'];
    transaction: Transaction;
    vaultProxy: Scalars['String'];
    prevFundDeployer: Scalars['String'];
    nextFundDeployer: Scalars['String'];
    nextVaultLib: Scalars['String'];
    nextVaultAccessor: Scalars['String'];
    failureReturnData: Scalars['String'];
};
export declare type MigrationOutHookFailedEvent_Filter = {
    id?: Maybe<Scalars['ID']>;
    id_not?: Maybe<Scalars['ID']>;
    id_gt?: Maybe<Scalars['ID']>;
    id_lt?: Maybe<Scalars['ID']>;
    id_gte?: Maybe<Scalars['ID']>;
    id_lte?: Maybe<Scalars['ID']>;
    id_in?: Maybe<Array<Scalars['ID']>>;
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    fund?: Maybe<Scalars['String']>;
    fund_not?: Maybe<Scalars['String']>;
    fund_gt?: Maybe<Scalars['String']>;
    fund_lt?: Maybe<Scalars['String']>;
    fund_gte?: Maybe<Scalars['String']>;
    fund_lte?: Maybe<Scalars['String']>;
    fund_in?: Maybe<Array<Scalars['String']>>;
    fund_not_in?: Maybe<Array<Scalars['String']>>;
    fund_contains?: Maybe<Scalars['String']>;
    fund_not_contains?: Maybe<Scalars['String']>;
    fund_starts_with?: Maybe<Scalars['String']>;
    fund_not_starts_with?: Maybe<Scalars['String']>;
    fund_ends_with?: Maybe<Scalars['String']>;
    fund_not_ends_with?: Maybe<Scalars['String']>;
    timestamp?: Maybe<Scalars['BigInt']>;
    timestamp_not?: Maybe<Scalars['BigInt']>;
    timestamp_gt?: Maybe<Scalars['BigInt']>;
    timestamp_lt?: Maybe<Scalars['BigInt']>;
    timestamp_gte?: Maybe<Scalars['BigInt']>;
    timestamp_lte?: Maybe<Scalars['BigInt']>;
    timestamp_in?: Maybe<Array<Scalars['BigInt']>>;
    timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;
    transaction?: Maybe<Scalars['String']>;
    transaction_not?: Maybe<Scalars['String']>;
    transaction_gt?: Maybe<Scalars['String']>;
    transaction_lt?: Maybe<Scalars['String']>;
    transaction_gte?: Maybe<Scalars['String']>;
    transaction_lte?: Maybe<Scalars['String']>;
    transaction_in?: Maybe<Array<Scalars['String']>>;
    transaction_not_in?: Maybe<Array<Scalars['String']>>;
    transaction_contains?: Maybe<Scalars['String']>;
    transaction_not_contains?: Maybe<Scalars['String']>;
    transaction_starts_with?: Maybe<Scalars['String']>;
    transaction_not_starts_with?: Maybe<Scalars['String']>;
    transaction_ends_with?: Maybe<Scalars['String']>;
    transaction_not_ends_with?: Maybe<Scalars['String']>;
    vaultProxy?: Maybe<Scalars['String']>;
    vaultProxy_not?: Maybe<Scalars['String']>;
    vaultProxy_gt?: Maybe<Scalars['String']>;
    vaultProxy_lt?: Maybe<Scalars['String']>;
    vaultProxy_gte?: Maybe<Scalars['String']>;
    vaultProxy_lte?: Maybe<Scalars['String']>;
    vaultProxy_in?: Maybe<Array<Scalars['String']>>;
    vaultProxy_not_in?: Maybe<Array<Scalars['String']>>;
    vaultProxy_contains?: Maybe<Scalars['String']>;
    vaultProxy_not_contains?: Maybe<Scalars['String']>;
    vaultProxy_starts_with?: Maybe<Scalars['String']>;
    vaultProxy_not_starts_with?: Maybe<Scalars['String']>;
    vaultProxy_ends_with?: Maybe<Scalars['String']>;
    vaultProxy_not_ends_with?: Maybe<Scalars['String']>;
    prevFundDeployer?: Maybe<Scalars['String']>;
    prevFundDeployer_not?: Maybe<Scalars['String']>;
    prevFundDeployer_gt?: Maybe<Scalars['String']>;
    prevFundDeployer_lt?: Maybe<Scalars['String']>;
    prevFundDeployer_gte?: Maybe<Scalars['String']>;
    prevFundDeployer_lte?: Maybe<Scalars['String']>;
    prevFundDeployer_in?: Maybe<Array<Scalars['String']>>;
    prevFundDeployer_not_in?: Maybe<Array<Scalars['String']>>;
    prevFundDeployer_contains?: Maybe<Scalars['String']>;
    prevFundDeployer_not_contains?: Maybe<Scalars['String']>;
    prevFundDeployer_starts_with?: Maybe<Scalars['String']>;
    prevFundDeployer_not_starts_with?: Maybe<Scalars['String']>;
    prevFundDeployer_ends_with?: Maybe<Scalars['String']>;
    prevFundDeployer_not_ends_with?: Maybe<Scalars['String']>;
    nextFundDeployer?: Maybe<Scalars['String']>;
    nextFundDeployer_not?: Maybe<Scalars['String']>;
    nextFundDeployer_gt?: Maybe<Scalars['String']>;
    nextFundDeployer_lt?: Maybe<Scalars['String']>;
    nextFundDeployer_gte?: Maybe<Scalars['String']>;
    nextFundDeployer_lte?: Maybe<Scalars['String']>;
    nextFundDeployer_in?: Maybe<Array<Scalars['String']>>;
    nextFundDeployer_not_in?: Maybe<Array<Scalars['String']>>;
    nextFundDeployer_contains?: Maybe<Scalars['String']>;
    nextFundDeployer_not_contains?: Maybe<Scalars['String']>;
    nextFundDeployer_starts_with?: Maybe<Scalars['String']>;
    nextFundDeployer_not_starts_with?: Maybe<Scalars['String']>;
    nextFundDeployer_ends_with?: Maybe<Scalars['String']>;
    nextFundDeployer_not_ends_with?: Maybe<Scalars['String']>;
    nextVaultLib?: Maybe<Scalars['String']>;
    nextVaultLib_not?: Maybe<Scalars['String']>;
    nextVaultLib_gt?: Maybe<Scalars['String']>;
    nextVaultLib_lt?: Maybe<Scalars['String']>;
    nextVaultLib_gte?: Maybe<Scalars['String']>;
    nextVaultLib_lte?: Maybe<Scalars['String']>;
    nextVaultLib_in?: Maybe<Array<Scalars['String']>>;
    nextVaultLib_not_in?: Maybe<Array<Scalars['String']>>;
    nextVaultLib_contains?: Maybe<Scalars['String']>;
    nextVaultLib_not_contains?: Maybe<Scalars['String']>;
    nextVaultLib_starts_with?: Maybe<Scalars['String']>;
    nextVaultLib_not_starts_with?: Maybe<Scalars['String']>;
    nextVaultLib_ends_with?: Maybe<Scalars['String']>;
    nextVaultLib_not_ends_with?: Maybe<Scalars['String']>;
    nextVaultAccessor?: Maybe<Scalars['String']>;
    nextVaultAccessor_not?: Maybe<Scalars['String']>;
    nextVaultAccessor_gt?: Maybe<Scalars['String']>;
    nextVaultAccessor_lt?: Maybe<Scalars['String']>;
    nextVaultAccessor_gte?: Maybe<Scalars['String']>;
    nextVaultAccessor_lte?: Maybe<Scalars['String']>;
    nextVaultAccessor_in?: Maybe<Array<Scalars['String']>>;
    nextVaultAccessor_not_in?: Maybe<Array<Scalars['String']>>;
    nextVaultAccessor_contains?: Maybe<Scalars['String']>;
    nextVaultAccessor_not_contains?: Maybe<Scalars['String']>;
    nextVaultAccessor_starts_with?: Maybe<Scalars['String']>;
    nextVaultAccessor_not_starts_with?: Maybe<Scalars['String']>;
    nextVaultAccessor_ends_with?: Maybe<Scalars['String']>;
    nextVaultAccessor_not_ends_with?: Maybe<Scalars['String']>;
    failureReturnData?: Maybe<Scalars['String']>;
    failureReturnData_not?: Maybe<Scalars['String']>;
    failureReturnData_gt?: Maybe<Scalars['String']>;
    failureReturnData_lt?: Maybe<Scalars['String']>;
    failureReturnData_gte?: Maybe<Scalars['String']>;
    failureReturnData_lte?: Maybe<Scalars['String']>;
    failureReturnData_in?: Maybe<Array<Scalars['String']>>;
    failureReturnData_not_in?: Maybe<Array<Scalars['String']>>;
    failureReturnData_contains?: Maybe<Scalars['String']>;
    failureReturnData_not_contains?: Maybe<Scalars['String']>;
    failureReturnData_starts_with?: Maybe<Scalars['String']>;
    failureReturnData_not_starts_with?: Maybe<Scalars['String']>;
    failureReturnData_ends_with?: Maybe<Scalars['String']>;
    failureReturnData_not_ends_with?: Maybe<Scalars['String']>;
};
export declare enum MigrationOutHookFailedEvent_OrderBy {
    Id = "id",
    Fund = "fund",
    Timestamp = "timestamp",
    Transaction = "transaction",
    VaultProxy = "vaultProxy",
    PrevFundDeployer = "prevFundDeployer",
    NextFundDeployer = "nextFundDeployer",
    NextVaultLib = "nextVaultLib",
    NextVaultAccessor = "nextVaultAccessor",
    FailureReturnData = "failureReturnData"
}
export declare type MigrationSignaledEvent = EventInterface & FundEventInterface & {
    __typename?: 'MigrationSignaledEvent';
    id: Scalars['ID'];
    fund: Fund;
    timestamp: Scalars['BigInt'];
    transaction: Transaction;
    migration: Migration;
};
export declare type MigrationSignaledEvent_Filter = {
    id?: Maybe<Scalars['ID']>;
    id_not?: Maybe<Scalars['ID']>;
    id_gt?: Maybe<Scalars['ID']>;
    id_lt?: Maybe<Scalars['ID']>;
    id_gte?: Maybe<Scalars['ID']>;
    id_lte?: Maybe<Scalars['ID']>;
    id_in?: Maybe<Array<Scalars['ID']>>;
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    fund?: Maybe<Scalars['String']>;
    fund_not?: Maybe<Scalars['String']>;
    fund_gt?: Maybe<Scalars['String']>;
    fund_lt?: Maybe<Scalars['String']>;
    fund_gte?: Maybe<Scalars['String']>;
    fund_lte?: Maybe<Scalars['String']>;
    fund_in?: Maybe<Array<Scalars['String']>>;
    fund_not_in?: Maybe<Array<Scalars['String']>>;
    fund_contains?: Maybe<Scalars['String']>;
    fund_not_contains?: Maybe<Scalars['String']>;
    fund_starts_with?: Maybe<Scalars['String']>;
    fund_not_starts_with?: Maybe<Scalars['String']>;
    fund_ends_with?: Maybe<Scalars['String']>;
    fund_not_ends_with?: Maybe<Scalars['String']>;
    timestamp?: Maybe<Scalars['BigInt']>;
    timestamp_not?: Maybe<Scalars['BigInt']>;
    timestamp_gt?: Maybe<Scalars['BigInt']>;
    timestamp_lt?: Maybe<Scalars['BigInt']>;
    timestamp_gte?: Maybe<Scalars['BigInt']>;
    timestamp_lte?: Maybe<Scalars['BigInt']>;
    timestamp_in?: Maybe<Array<Scalars['BigInt']>>;
    timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;
    transaction?: Maybe<Scalars['String']>;
    transaction_not?: Maybe<Scalars['String']>;
    transaction_gt?: Maybe<Scalars['String']>;
    transaction_lt?: Maybe<Scalars['String']>;
    transaction_gte?: Maybe<Scalars['String']>;
    transaction_lte?: Maybe<Scalars['String']>;
    transaction_in?: Maybe<Array<Scalars['String']>>;
    transaction_not_in?: Maybe<Array<Scalars['String']>>;
    transaction_contains?: Maybe<Scalars['String']>;
    transaction_not_contains?: Maybe<Scalars['String']>;
    transaction_starts_with?: Maybe<Scalars['String']>;
    transaction_not_starts_with?: Maybe<Scalars['String']>;
    transaction_ends_with?: Maybe<Scalars['String']>;
    transaction_not_ends_with?: Maybe<Scalars['String']>;
    migration?: Maybe<Scalars['String']>;
    migration_not?: Maybe<Scalars['String']>;
    migration_gt?: Maybe<Scalars['String']>;
    migration_lt?: Maybe<Scalars['String']>;
    migration_gte?: Maybe<Scalars['String']>;
    migration_lte?: Maybe<Scalars['String']>;
    migration_in?: Maybe<Array<Scalars['String']>>;
    migration_not_in?: Maybe<Array<Scalars['String']>>;
    migration_contains?: Maybe<Scalars['String']>;
    migration_not_contains?: Maybe<Scalars['String']>;
    migration_starts_with?: Maybe<Scalars['String']>;
    migration_not_starts_with?: Maybe<Scalars['String']>;
    migration_ends_with?: Maybe<Scalars['String']>;
    migration_not_ends_with?: Maybe<Scalars['String']>;
};
export declare enum MigrationSignaledEvent_OrderBy {
    Id = "id",
    Fund = "fund",
    Timestamp = "timestamp",
    Transaction = "transaction",
    Migration = "migration"
}
export declare type MigrationTimelockSetEvent = EventInterface & NetworkEventInterface & {
    __typename?: 'MigrationTimelockSetEvent';
    id: Scalars['ID'];
    timestamp: Scalars['BigInt'];
    transaction: Transaction;
    prevTimelock: Scalars['BigInt'];
    nextTimelock: Scalars['BigInt'];
};
export declare type MigrationTimelockSetEvent_Filter = {
    id?: Maybe<Scalars['ID']>;
    id_not?: Maybe<Scalars['ID']>;
    id_gt?: Maybe<Scalars['ID']>;
    id_lt?: Maybe<Scalars['ID']>;
    id_gte?: Maybe<Scalars['ID']>;
    id_lte?: Maybe<Scalars['ID']>;
    id_in?: Maybe<Array<Scalars['ID']>>;
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    timestamp?: Maybe<Scalars['BigInt']>;
    timestamp_not?: Maybe<Scalars['BigInt']>;
    timestamp_gt?: Maybe<Scalars['BigInt']>;
    timestamp_lt?: Maybe<Scalars['BigInt']>;
    timestamp_gte?: Maybe<Scalars['BigInt']>;
    timestamp_lte?: Maybe<Scalars['BigInt']>;
    timestamp_in?: Maybe<Array<Scalars['BigInt']>>;
    timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;
    transaction?: Maybe<Scalars['String']>;
    transaction_not?: Maybe<Scalars['String']>;
    transaction_gt?: Maybe<Scalars['String']>;
    transaction_lt?: Maybe<Scalars['String']>;
    transaction_gte?: Maybe<Scalars['String']>;
    transaction_lte?: Maybe<Scalars['String']>;
    transaction_in?: Maybe<Array<Scalars['String']>>;
    transaction_not_in?: Maybe<Array<Scalars['String']>>;
    transaction_contains?: Maybe<Scalars['String']>;
    transaction_not_contains?: Maybe<Scalars['String']>;
    transaction_starts_with?: Maybe<Scalars['String']>;
    transaction_not_starts_with?: Maybe<Scalars['String']>;
    transaction_ends_with?: Maybe<Scalars['String']>;
    transaction_not_ends_with?: Maybe<Scalars['String']>;
    prevTimelock?: Maybe<Scalars['BigInt']>;
    prevTimelock_not?: Maybe<Scalars['BigInt']>;
    prevTimelock_gt?: Maybe<Scalars['BigInt']>;
    prevTimelock_lt?: Maybe<Scalars['BigInt']>;
    prevTimelock_gte?: Maybe<Scalars['BigInt']>;
    prevTimelock_lte?: Maybe<Scalars['BigInt']>;
    prevTimelock_in?: Maybe<Array<Scalars['BigInt']>>;
    prevTimelock_not_in?: Maybe<Array<Scalars['BigInt']>>;
    nextTimelock?: Maybe<Scalars['BigInt']>;
    nextTimelock_not?: Maybe<Scalars['BigInt']>;
    nextTimelock_gt?: Maybe<Scalars['BigInt']>;
    nextTimelock_lt?: Maybe<Scalars['BigInt']>;
    nextTimelock_gte?: Maybe<Scalars['BigInt']>;
    nextTimelock_lte?: Maybe<Scalars['BigInt']>;
    nextTimelock_in?: Maybe<Array<Scalars['BigInt']>>;
    nextTimelock_not_in?: Maybe<Array<Scalars['BigInt']>>;
};
export declare enum MigrationTimelockSetEvent_OrderBy {
    Id = "id",
    Timestamp = "timestamp",
    Transaction = "transaction",
    PrevTimelock = "prevTimelock",
    NextTimelock = "nextTimelock"
}
export declare type Migration_Filter = {
    id?: Maybe<Scalars['ID']>;
    id_not?: Maybe<Scalars['ID']>;
    id_gt?: Maybe<Scalars['ID']>;
    id_lt?: Maybe<Scalars['ID']>;
    id_gte?: Maybe<Scalars['ID']>;
    id_lte?: Maybe<Scalars['ID']>;
    id_in?: Maybe<Array<Scalars['ID']>>;
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    prevRelease?: Maybe<Scalars['String']>;
    prevRelease_not?: Maybe<Scalars['String']>;
    prevRelease_gt?: Maybe<Scalars['String']>;
    prevRelease_lt?: Maybe<Scalars['String']>;
    prevRelease_gte?: Maybe<Scalars['String']>;
    prevRelease_lte?: Maybe<Scalars['String']>;
    prevRelease_in?: Maybe<Array<Scalars['String']>>;
    prevRelease_not_in?: Maybe<Array<Scalars['String']>>;
    prevRelease_contains?: Maybe<Scalars['String']>;
    prevRelease_not_contains?: Maybe<Scalars['String']>;
    prevRelease_starts_with?: Maybe<Scalars['String']>;
    prevRelease_not_starts_with?: Maybe<Scalars['String']>;
    prevRelease_ends_with?: Maybe<Scalars['String']>;
    prevRelease_not_ends_with?: Maybe<Scalars['String']>;
    nextRelease?: Maybe<Scalars['String']>;
    nextRelease_not?: Maybe<Scalars['String']>;
    nextRelease_gt?: Maybe<Scalars['String']>;
    nextRelease_lt?: Maybe<Scalars['String']>;
    nextRelease_gte?: Maybe<Scalars['String']>;
    nextRelease_lte?: Maybe<Scalars['String']>;
    nextRelease_in?: Maybe<Array<Scalars['String']>>;
    nextRelease_not_in?: Maybe<Array<Scalars['String']>>;
    nextRelease_contains?: Maybe<Scalars['String']>;
    nextRelease_not_contains?: Maybe<Scalars['String']>;
    nextRelease_starts_with?: Maybe<Scalars['String']>;
    nextRelease_not_starts_with?: Maybe<Scalars['String']>;
    nextRelease_ends_with?: Maybe<Scalars['String']>;
    nextRelease_not_ends_with?: Maybe<Scalars['String']>;
    fund?: Maybe<Scalars['String']>;
    fund_not?: Maybe<Scalars['String']>;
    fund_gt?: Maybe<Scalars['String']>;
    fund_lt?: Maybe<Scalars['String']>;
    fund_gte?: Maybe<Scalars['String']>;
    fund_lte?: Maybe<Scalars['String']>;
    fund_in?: Maybe<Array<Scalars['String']>>;
    fund_not_in?: Maybe<Array<Scalars['String']>>;
    fund_contains?: Maybe<Scalars['String']>;
    fund_not_contains?: Maybe<Scalars['String']>;
    fund_starts_with?: Maybe<Scalars['String']>;
    fund_not_starts_with?: Maybe<Scalars['String']>;
    fund_ends_with?: Maybe<Scalars['String']>;
    fund_not_ends_with?: Maybe<Scalars['String']>;
    executableTimestamp?: Maybe<Scalars['BigInt']>;
    executableTimestamp_not?: Maybe<Scalars['BigInt']>;
    executableTimestamp_gt?: Maybe<Scalars['BigInt']>;
    executableTimestamp_lt?: Maybe<Scalars['BigInt']>;
    executableTimestamp_gte?: Maybe<Scalars['BigInt']>;
    executableTimestamp_lte?: Maybe<Scalars['BigInt']>;
    executableTimestamp_in?: Maybe<Array<Scalars['BigInt']>>;
    executableTimestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;
    executed?: Maybe<Scalars['Boolean']>;
    executed_not?: Maybe<Scalars['Boolean']>;
    executed_in?: Maybe<Array<Scalars['Boolean']>>;
    executed_not_in?: Maybe<Array<Scalars['Boolean']>>;
    cancelled?: Maybe<Scalars['Boolean']>;
    cancelled_not?: Maybe<Scalars['Boolean']>;
    cancelled_in?: Maybe<Array<Scalars['Boolean']>>;
    cancelled_not_in?: Maybe<Array<Scalars['Boolean']>>;
    nextAccessor?: Maybe<Scalars['String']>;
    nextAccessor_not?: Maybe<Scalars['String']>;
    nextAccessor_gt?: Maybe<Scalars['String']>;
    nextAccessor_lt?: Maybe<Scalars['String']>;
    nextAccessor_gte?: Maybe<Scalars['String']>;
    nextAccessor_lte?: Maybe<Scalars['String']>;
    nextAccessor_in?: Maybe<Array<Scalars['String']>>;
    nextAccessor_not_in?: Maybe<Array<Scalars['String']>>;
    nextAccessor_contains?: Maybe<Scalars['String']>;
    nextAccessor_not_contains?: Maybe<Scalars['String']>;
    nextAccessor_starts_with?: Maybe<Scalars['String']>;
    nextAccessor_not_starts_with?: Maybe<Scalars['String']>;
    nextAccessor_ends_with?: Maybe<Scalars['String']>;
    nextAccessor_not_ends_with?: Maybe<Scalars['String']>;
};
export declare enum Migration_OrderBy {
    Id = "id",
    PrevRelease = "prevRelease",
    NextRelease = "nextRelease",
    Fund = "fund",
    ExecutableTimestamp = "executableTimestamp",
    Executed = "executed",
    Cancelled = "cancelled",
    NextAccessor = "nextAccessor"
}
export declare type MigratorSetEvent = EventInterface & FundEventInterface & {
    __typename?: 'MigratorSetEvent';
    id: Scalars['ID'];
    fund: Fund;
    timestamp: Scalars['BigInt'];
    transaction: Transaction;
    prevMigrator?: Maybe<Account>;
    nextMigrator: Account;
};
export declare type MigratorSetEvent_Filter = {
    id?: Maybe<Scalars['ID']>;
    id_not?: Maybe<Scalars['ID']>;
    id_gt?: Maybe<Scalars['ID']>;
    id_lt?: Maybe<Scalars['ID']>;
    id_gte?: Maybe<Scalars['ID']>;
    id_lte?: Maybe<Scalars['ID']>;
    id_in?: Maybe<Array<Scalars['ID']>>;
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    fund?: Maybe<Scalars['String']>;
    fund_not?: Maybe<Scalars['String']>;
    fund_gt?: Maybe<Scalars['String']>;
    fund_lt?: Maybe<Scalars['String']>;
    fund_gte?: Maybe<Scalars['String']>;
    fund_lte?: Maybe<Scalars['String']>;
    fund_in?: Maybe<Array<Scalars['String']>>;
    fund_not_in?: Maybe<Array<Scalars['String']>>;
    fund_contains?: Maybe<Scalars['String']>;
    fund_not_contains?: Maybe<Scalars['String']>;
    fund_starts_with?: Maybe<Scalars['String']>;
    fund_not_starts_with?: Maybe<Scalars['String']>;
    fund_ends_with?: Maybe<Scalars['String']>;
    fund_not_ends_with?: Maybe<Scalars['String']>;
    timestamp?: Maybe<Scalars['BigInt']>;
    timestamp_not?: Maybe<Scalars['BigInt']>;
    timestamp_gt?: Maybe<Scalars['BigInt']>;
    timestamp_lt?: Maybe<Scalars['BigInt']>;
    timestamp_gte?: Maybe<Scalars['BigInt']>;
    timestamp_lte?: Maybe<Scalars['BigInt']>;
    timestamp_in?: Maybe<Array<Scalars['BigInt']>>;
    timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;
    transaction?: Maybe<Scalars['String']>;
    transaction_not?: Maybe<Scalars['String']>;
    transaction_gt?: Maybe<Scalars['String']>;
    transaction_lt?: Maybe<Scalars['String']>;
    transaction_gte?: Maybe<Scalars['String']>;
    transaction_lte?: Maybe<Scalars['String']>;
    transaction_in?: Maybe<Array<Scalars['String']>>;
    transaction_not_in?: Maybe<Array<Scalars['String']>>;
    transaction_contains?: Maybe<Scalars['String']>;
    transaction_not_contains?: Maybe<Scalars['String']>;
    transaction_starts_with?: Maybe<Scalars['String']>;
    transaction_not_starts_with?: Maybe<Scalars['String']>;
    transaction_ends_with?: Maybe<Scalars['String']>;
    transaction_not_ends_with?: Maybe<Scalars['String']>;
    prevMigrator?: Maybe<Scalars['String']>;
    prevMigrator_not?: Maybe<Scalars['String']>;
    prevMigrator_gt?: Maybe<Scalars['String']>;
    prevMigrator_lt?: Maybe<Scalars['String']>;
    prevMigrator_gte?: Maybe<Scalars['String']>;
    prevMigrator_lte?: Maybe<Scalars['String']>;
    prevMigrator_in?: Maybe<Array<Scalars['String']>>;
    prevMigrator_not_in?: Maybe<Array<Scalars['String']>>;
    prevMigrator_contains?: Maybe<Scalars['String']>;
    prevMigrator_not_contains?: Maybe<Scalars['String']>;
    prevMigrator_starts_with?: Maybe<Scalars['String']>;
    prevMigrator_not_starts_with?: Maybe<Scalars['String']>;
    prevMigrator_ends_with?: Maybe<Scalars['String']>;
    prevMigrator_not_ends_with?: Maybe<Scalars['String']>;
    nextMigrator?: Maybe<Scalars['String']>;
    nextMigrator_not?: Maybe<Scalars['String']>;
    nextMigrator_gt?: Maybe<Scalars['String']>;
    nextMigrator_lt?: Maybe<Scalars['String']>;
    nextMigrator_gte?: Maybe<Scalars['String']>;
    nextMigrator_lte?: Maybe<Scalars['String']>;
    nextMigrator_in?: Maybe<Array<Scalars['String']>>;
    nextMigrator_not_in?: Maybe<Array<Scalars['String']>>;
    nextMigrator_contains?: Maybe<Scalars['String']>;
    nextMigrator_not_contains?: Maybe<Scalars['String']>;
    nextMigrator_starts_with?: Maybe<Scalars['String']>;
    nextMigrator_not_starts_with?: Maybe<Scalars['String']>;
    nextMigrator_ends_with?: Maybe<Scalars['String']>;
    nextMigrator_not_ends_with?: Maybe<Scalars['String']>;
};
export declare enum MigratorSetEvent_OrderBy {
    Id = "id",
    Fund = "fund",
    Timestamp = "timestamp",
    Transaction = "transaction",
    PrevMigrator = "prevMigrator",
    NextMigrator = "nextMigrator"
}
export declare type MinMaxInvestmentFundSettingsSetEvent = EventInterface & FundEventInterface & {
    __typename?: 'MinMaxInvestmentFundSettingsSetEvent';
    id: Scalars['ID'];
    fund: Fund;
    timestamp: Scalars['BigInt'];
    transaction: Transaction;
    comptrollerProxy: Scalars['String'];
    minInvestmentAmount: Scalars['BigDecimal'];
    maxInvestmentAmount: Scalars['BigDecimal'];
};
export declare type MinMaxInvestmentFundSettingsSetEvent_Filter = {
    id?: Maybe<Scalars['ID']>;
    id_not?: Maybe<Scalars['ID']>;
    id_gt?: Maybe<Scalars['ID']>;
    id_lt?: Maybe<Scalars['ID']>;
    id_gte?: Maybe<Scalars['ID']>;
    id_lte?: Maybe<Scalars['ID']>;
    id_in?: Maybe<Array<Scalars['ID']>>;
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    fund?: Maybe<Scalars['String']>;
    fund_not?: Maybe<Scalars['String']>;
    fund_gt?: Maybe<Scalars['String']>;
    fund_lt?: Maybe<Scalars['String']>;
    fund_gte?: Maybe<Scalars['String']>;
    fund_lte?: Maybe<Scalars['String']>;
    fund_in?: Maybe<Array<Scalars['String']>>;
    fund_not_in?: Maybe<Array<Scalars['String']>>;
    fund_contains?: Maybe<Scalars['String']>;
    fund_not_contains?: Maybe<Scalars['String']>;
    fund_starts_with?: Maybe<Scalars['String']>;
    fund_not_starts_with?: Maybe<Scalars['String']>;
    fund_ends_with?: Maybe<Scalars['String']>;
    fund_not_ends_with?: Maybe<Scalars['String']>;
    timestamp?: Maybe<Scalars['BigInt']>;
    timestamp_not?: Maybe<Scalars['BigInt']>;
    timestamp_gt?: Maybe<Scalars['BigInt']>;
    timestamp_lt?: Maybe<Scalars['BigInt']>;
    timestamp_gte?: Maybe<Scalars['BigInt']>;
    timestamp_lte?: Maybe<Scalars['BigInt']>;
    timestamp_in?: Maybe<Array<Scalars['BigInt']>>;
    timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;
    transaction?: Maybe<Scalars['String']>;
    transaction_not?: Maybe<Scalars['String']>;
    transaction_gt?: Maybe<Scalars['String']>;
    transaction_lt?: Maybe<Scalars['String']>;
    transaction_gte?: Maybe<Scalars['String']>;
    transaction_lte?: Maybe<Scalars['String']>;
    transaction_in?: Maybe<Array<Scalars['String']>>;
    transaction_not_in?: Maybe<Array<Scalars['String']>>;
    transaction_contains?: Maybe<Scalars['String']>;
    transaction_not_contains?: Maybe<Scalars['String']>;
    transaction_starts_with?: Maybe<Scalars['String']>;
    transaction_not_starts_with?: Maybe<Scalars['String']>;
    transaction_ends_with?: Maybe<Scalars['String']>;
    transaction_not_ends_with?: Maybe<Scalars['String']>;
    comptrollerProxy?: Maybe<Scalars['String']>;
    comptrollerProxy_not?: Maybe<Scalars['String']>;
    comptrollerProxy_gt?: Maybe<Scalars['String']>;
    comptrollerProxy_lt?: Maybe<Scalars['String']>;
    comptrollerProxy_gte?: Maybe<Scalars['String']>;
    comptrollerProxy_lte?: Maybe<Scalars['String']>;
    comptrollerProxy_in?: Maybe<Array<Scalars['String']>>;
    comptrollerProxy_not_in?: Maybe<Array<Scalars['String']>>;
    comptrollerProxy_contains?: Maybe<Scalars['String']>;
    comptrollerProxy_not_contains?: Maybe<Scalars['String']>;
    comptrollerProxy_starts_with?: Maybe<Scalars['String']>;
    comptrollerProxy_not_starts_with?: Maybe<Scalars['String']>;
    comptrollerProxy_ends_with?: Maybe<Scalars['String']>;
    comptrollerProxy_not_ends_with?: Maybe<Scalars['String']>;
    minInvestmentAmount?: Maybe<Scalars['BigDecimal']>;
    minInvestmentAmount_not?: Maybe<Scalars['BigDecimal']>;
    minInvestmentAmount_gt?: Maybe<Scalars['BigDecimal']>;
    minInvestmentAmount_lt?: Maybe<Scalars['BigDecimal']>;
    minInvestmentAmount_gte?: Maybe<Scalars['BigDecimal']>;
    minInvestmentAmount_lte?: Maybe<Scalars['BigDecimal']>;
    minInvestmentAmount_in?: Maybe<Array<Scalars['BigDecimal']>>;
    minInvestmentAmount_not_in?: Maybe<Array<Scalars['BigDecimal']>>;
    maxInvestmentAmount?: Maybe<Scalars['BigDecimal']>;
    maxInvestmentAmount_not?: Maybe<Scalars['BigDecimal']>;
    maxInvestmentAmount_gt?: Maybe<Scalars['BigDecimal']>;
    maxInvestmentAmount_lt?: Maybe<Scalars['BigDecimal']>;
    maxInvestmentAmount_gte?: Maybe<Scalars['BigDecimal']>;
    maxInvestmentAmount_lte?: Maybe<Scalars['BigDecimal']>;
    maxInvestmentAmount_in?: Maybe<Array<Scalars['BigDecimal']>>;
    maxInvestmentAmount_not_in?: Maybe<Array<Scalars['BigDecimal']>>;
};
export declare enum MinMaxInvestmentFundSettingsSetEvent_OrderBy {
    Id = "id",
    Fund = "fund",
    Timestamp = "timestamp",
    Transaction = "transaction",
    ComptrollerProxy = "comptrollerProxy",
    MinInvestmentAmount = "minInvestmentAmount",
    MaxInvestmentAmount = "maxInvestmentAmount"
}
export declare type MinMaxInvestmentSetting = PolicySettingInterface & {
    __typename?: 'MinMaxInvestmentSetting';
    id: Scalars['ID'];
    policy: Policy;
    comptroller: ComptrollerProxy;
    minInvestmentAmount: Scalars['BigDecimal'];
    maxInvestmentAmount: Scalars['BigDecimal'];
    timestamp: Scalars['BigInt'];
    enabled: Scalars['Boolean'];
    events: Array<FundEventInterface>;
};
export declare type MinMaxInvestmentSettingEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<FundEventInterface_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<FundEventInterface_Filter>;
};
export declare type MinMaxInvestmentSetting_Filter = {
    id?: Maybe<Scalars['ID']>;
    id_not?: Maybe<Scalars['ID']>;
    id_gt?: Maybe<Scalars['ID']>;
    id_lt?: Maybe<Scalars['ID']>;
    id_gte?: Maybe<Scalars['ID']>;
    id_lte?: Maybe<Scalars['ID']>;
    id_in?: Maybe<Array<Scalars['ID']>>;
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    policy?: Maybe<Scalars['String']>;
    policy_not?: Maybe<Scalars['String']>;
    policy_gt?: Maybe<Scalars['String']>;
    policy_lt?: Maybe<Scalars['String']>;
    policy_gte?: Maybe<Scalars['String']>;
    policy_lte?: Maybe<Scalars['String']>;
    policy_in?: Maybe<Array<Scalars['String']>>;
    policy_not_in?: Maybe<Array<Scalars['String']>>;
    policy_contains?: Maybe<Scalars['String']>;
    policy_not_contains?: Maybe<Scalars['String']>;
    policy_starts_with?: Maybe<Scalars['String']>;
    policy_not_starts_with?: Maybe<Scalars['String']>;
    policy_ends_with?: Maybe<Scalars['String']>;
    policy_not_ends_with?: Maybe<Scalars['String']>;
    comptroller?: Maybe<Scalars['String']>;
    comptroller_not?: Maybe<Scalars['String']>;
    comptroller_gt?: Maybe<Scalars['String']>;
    comptroller_lt?: Maybe<Scalars['String']>;
    comptroller_gte?: Maybe<Scalars['String']>;
    comptroller_lte?: Maybe<Scalars['String']>;
    comptroller_in?: Maybe<Array<Scalars['String']>>;
    comptroller_not_in?: Maybe<Array<Scalars['String']>>;
    comptroller_contains?: Maybe<Scalars['String']>;
    comptroller_not_contains?: Maybe<Scalars['String']>;
    comptroller_starts_with?: Maybe<Scalars['String']>;
    comptroller_not_starts_with?: Maybe<Scalars['String']>;
    comptroller_ends_with?: Maybe<Scalars['String']>;
    comptroller_not_ends_with?: Maybe<Scalars['String']>;
    minInvestmentAmount?: Maybe<Scalars['BigDecimal']>;
    minInvestmentAmount_not?: Maybe<Scalars['BigDecimal']>;
    minInvestmentAmount_gt?: Maybe<Scalars['BigDecimal']>;
    minInvestmentAmount_lt?: Maybe<Scalars['BigDecimal']>;
    minInvestmentAmount_gte?: Maybe<Scalars['BigDecimal']>;
    minInvestmentAmount_lte?: Maybe<Scalars['BigDecimal']>;
    minInvestmentAmount_in?: Maybe<Array<Scalars['BigDecimal']>>;
    minInvestmentAmount_not_in?: Maybe<Array<Scalars['BigDecimal']>>;
    maxInvestmentAmount?: Maybe<Scalars['BigDecimal']>;
    maxInvestmentAmount_not?: Maybe<Scalars['BigDecimal']>;
    maxInvestmentAmount_gt?: Maybe<Scalars['BigDecimal']>;
    maxInvestmentAmount_lt?: Maybe<Scalars['BigDecimal']>;
    maxInvestmentAmount_gte?: Maybe<Scalars['BigDecimal']>;
    maxInvestmentAmount_lte?: Maybe<Scalars['BigDecimal']>;
    maxInvestmentAmount_in?: Maybe<Array<Scalars['BigDecimal']>>;
    maxInvestmentAmount_not_in?: Maybe<Array<Scalars['BigDecimal']>>;
    timestamp?: Maybe<Scalars['BigInt']>;
    timestamp_not?: Maybe<Scalars['BigInt']>;
    timestamp_gt?: Maybe<Scalars['BigInt']>;
    timestamp_lt?: Maybe<Scalars['BigInt']>;
    timestamp_gte?: Maybe<Scalars['BigInt']>;
    timestamp_lte?: Maybe<Scalars['BigInt']>;
    timestamp_in?: Maybe<Array<Scalars['BigInt']>>;
    timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;
    enabled?: Maybe<Scalars['Boolean']>;
    enabled_not?: Maybe<Scalars['Boolean']>;
    enabled_in?: Maybe<Array<Scalars['Boolean']>>;
    enabled_not_in?: Maybe<Array<Scalars['Boolean']>>;
    events?: Maybe<Array<Scalars['String']>>;
    events_not?: Maybe<Array<Scalars['String']>>;
    events_contains?: Maybe<Array<Scalars['String']>>;
    events_not_contains?: Maybe<Array<Scalars['String']>>;
};
export declare enum MinMaxInvestmentSetting_OrderBy {
    Id = "id",
    Policy = "policy",
    Comptroller = "comptroller",
    MinInvestmentAmount = "minInvestmentAmount",
    MaxInvestmentAmount = "maxInvestmentAmount",
    Timestamp = "timestamp",
    Enabled = "enabled",
    Events = "events"
}
export declare type MonthlyAssetPriceCandle = {
    __typename?: 'MonthlyAssetPriceCandle';
    id: Scalars['ID'];
    asset: Asset;
    group: MonthlyPriceCandleGroup;
    from: Scalars['BigInt'];
    to: Scalars['BigInt'];
    open: Scalars['BigDecimal'];
    openRef: AssetPrice;
    close: Scalars['BigDecimal'];
    closeRef: AssetPrice;
    low: Scalars['BigDecimal'];
    lowRef: AssetPrice;
    high: Scalars['BigDecimal'];
    highRef: AssetPrice;
};
export declare type MonthlyAssetPriceCandle_Filter = {
    id?: Maybe<Scalars['ID']>;
    id_not?: Maybe<Scalars['ID']>;
    id_gt?: Maybe<Scalars['ID']>;
    id_lt?: Maybe<Scalars['ID']>;
    id_gte?: Maybe<Scalars['ID']>;
    id_lte?: Maybe<Scalars['ID']>;
    id_in?: Maybe<Array<Scalars['ID']>>;
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    asset?: Maybe<Scalars['String']>;
    asset_not?: Maybe<Scalars['String']>;
    asset_gt?: Maybe<Scalars['String']>;
    asset_lt?: Maybe<Scalars['String']>;
    asset_gte?: Maybe<Scalars['String']>;
    asset_lte?: Maybe<Scalars['String']>;
    asset_in?: Maybe<Array<Scalars['String']>>;
    asset_not_in?: Maybe<Array<Scalars['String']>>;
    asset_contains?: Maybe<Scalars['String']>;
    asset_not_contains?: Maybe<Scalars['String']>;
    asset_starts_with?: Maybe<Scalars['String']>;
    asset_not_starts_with?: Maybe<Scalars['String']>;
    asset_ends_with?: Maybe<Scalars['String']>;
    asset_not_ends_with?: Maybe<Scalars['String']>;
    group?: Maybe<Scalars['String']>;
    group_not?: Maybe<Scalars['String']>;
    group_gt?: Maybe<Scalars['String']>;
    group_lt?: Maybe<Scalars['String']>;
    group_gte?: Maybe<Scalars['String']>;
    group_lte?: Maybe<Scalars['String']>;
    group_in?: Maybe<Array<Scalars['String']>>;
    group_not_in?: Maybe<Array<Scalars['String']>>;
    group_contains?: Maybe<Scalars['String']>;
    group_not_contains?: Maybe<Scalars['String']>;
    group_starts_with?: Maybe<Scalars['String']>;
    group_not_starts_with?: Maybe<Scalars['String']>;
    group_ends_with?: Maybe<Scalars['String']>;
    group_not_ends_with?: Maybe<Scalars['String']>;
    from?: Maybe<Scalars['BigInt']>;
    from_not?: Maybe<Scalars['BigInt']>;
    from_gt?: Maybe<Scalars['BigInt']>;
    from_lt?: Maybe<Scalars['BigInt']>;
    from_gte?: Maybe<Scalars['BigInt']>;
    from_lte?: Maybe<Scalars['BigInt']>;
    from_in?: Maybe<Array<Scalars['BigInt']>>;
    from_not_in?: Maybe<Array<Scalars['BigInt']>>;
    to?: Maybe<Scalars['BigInt']>;
    to_not?: Maybe<Scalars['BigInt']>;
    to_gt?: Maybe<Scalars['BigInt']>;
    to_lt?: Maybe<Scalars['BigInt']>;
    to_gte?: Maybe<Scalars['BigInt']>;
    to_lte?: Maybe<Scalars['BigInt']>;
    to_in?: Maybe<Array<Scalars['BigInt']>>;
    to_not_in?: Maybe<Array<Scalars['BigInt']>>;
    open?: Maybe<Scalars['BigDecimal']>;
    open_not?: Maybe<Scalars['BigDecimal']>;
    open_gt?: Maybe<Scalars['BigDecimal']>;
    open_lt?: Maybe<Scalars['BigDecimal']>;
    open_gte?: Maybe<Scalars['BigDecimal']>;
    open_lte?: Maybe<Scalars['BigDecimal']>;
    open_in?: Maybe<Array<Scalars['BigDecimal']>>;
    open_not_in?: Maybe<Array<Scalars['BigDecimal']>>;
    openRef?: Maybe<Scalars['String']>;
    openRef_not?: Maybe<Scalars['String']>;
    openRef_gt?: Maybe<Scalars['String']>;
    openRef_lt?: Maybe<Scalars['String']>;
    openRef_gte?: Maybe<Scalars['String']>;
    openRef_lte?: Maybe<Scalars['String']>;
    openRef_in?: Maybe<Array<Scalars['String']>>;
    openRef_not_in?: Maybe<Array<Scalars['String']>>;
    openRef_contains?: Maybe<Scalars['String']>;
    openRef_not_contains?: Maybe<Scalars['String']>;
    openRef_starts_with?: Maybe<Scalars['String']>;
    openRef_not_starts_with?: Maybe<Scalars['String']>;
    openRef_ends_with?: Maybe<Scalars['String']>;
    openRef_not_ends_with?: Maybe<Scalars['String']>;
    close?: Maybe<Scalars['BigDecimal']>;
    close_not?: Maybe<Scalars['BigDecimal']>;
    close_gt?: Maybe<Scalars['BigDecimal']>;
    close_lt?: Maybe<Scalars['BigDecimal']>;
    close_gte?: Maybe<Scalars['BigDecimal']>;
    close_lte?: Maybe<Scalars['BigDecimal']>;
    close_in?: Maybe<Array<Scalars['BigDecimal']>>;
    close_not_in?: Maybe<Array<Scalars['BigDecimal']>>;
    closeRef?: Maybe<Scalars['String']>;
    closeRef_not?: Maybe<Scalars['String']>;
    closeRef_gt?: Maybe<Scalars['String']>;
    closeRef_lt?: Maybe<Scalars['String']>;
    closeRef_gte?: Maybe<Scalars['String']>;
    closeRef_lte?: Maybe<Scalars['String']>;
    closeRef_in?: Maybe<Array<Scalars['String']>>;
    closeRef_not_in?: Maybe<Array<Scalars['String']>>;
    closeRef_contains?: Maybe<Scalars['String']>;
    closeRef_not_contains?: Maybe<Scalars['String']>;
    closeRef_starts_with?: Maybe<Scalars['String']>;
    closeRef_not_starts_with?: Maybe<Scalars['String']>;
    closeRef_ends_with?: Maybe<Scalars['String']>;
    closeRef_not_ends_with?: Maybe<Scalars['String']>;
    low?: Maybe<Scalars['BigDecimal']>;
    low_not?: Maybe<Scalars['BigDecimal']>;
    low_gt?: Maybe<Scalars['BigDecimal']>;
    low_lt?: Maybe<Scalars['BigDecimal']>;
    low_gte?: Maybe<Scalars['BigDecimal']>;
    low_lte?: Maybe<Scalars['BigDecimal']>;
    low_in?: Maybe<Array<Scalars['BigDecimal']>>;
    low_not_in?: Maybe<Array<Scalars['BigDecimal']>>;
    lowRef?: Maybe<Scalars['String']>;
    lowRef_not?: Maybe<Scalars['String']>;
    lowRef_gt?: Maybe<Scalars['String']>;
    lowRef_lt?: Maybe<Scalars['String']>;
    lowRef_gte?: Maybe<Scalars['String']>;
    lowRef_lte?: Maybe<Scalars['String']>;
    lowRef_in?: Maybe<Array<Scalars['String']>>;
    lowRef_not_in?: Maybe<Array<Scalars['String']>>;
    lowRef_contains?: Maybe<Scalars['String']>;
    lowRef_not_contains?: Maybe<Scalars['String']>;
    lowRef_starts_with?: Maybe<Scalars['String']>;
    lowRef_not_starts_with?: Maybe<Scalars['String']>;
    lowRef_ends_with?: Maybe<Scalars['String']>;
    lowRef_not_ends_with?: Maybe<Scalars['String']>;
    high?: Maybe<Scalars['BigDecimal']>;
    high_not?: Maybe<Scalars['BigDecimal']>;
    high_gt?: Maybe<Scalars['BigDecimal']>;
    high_lt?: Maybe<Scalars['BigDecimal']>;
    high_gte?: Maybe<Scalars['BigDecimal']>;
    high_lte?: Maybe<Scalars['BigDecimal']>;
    high_in?: Maybe<Array<Scalars['BigDecimal']>>;
    high_not_in?: Maybe<Array<Scalars['BigDecimal']>>;
    highRef?: Maybe<Scalars['String']>;
    highRef_not?: Maybe<Scalars['String']>;
    highRef_gt?: Maybe<Scalars['String']>;
    highRef_lt?: Maybe<Scalars['String']>;
    highRef_gte?: Maybe<Scalars['String']>;
    highRef_lte?: Maybe<Scalars['String']>;
    highRef_in?: Maybe<Array<Scalars['String']>>;
    highRef_not_in?: Maybe<Array<Scalars['String']>>;
    highRef_contains?: Maybe<Scalars['String']>;
    highRef_not_contains?: Maybe<Scalars['String']>;
    highRef_starts_with?: Maybe<Scalars['String']>;
    highRef_not_starts_with?: Maybe<Scalars['String']>;
    highRef_ends_with?: Maybe<Scalars['String']>;
    highRef_not_ends_with?: Maybe<Scalars['String']>;
};
export declare enum MonthlyAssetPriceCandle_OrderBy {
    Id = "id",
    Asset = "asset",
    Group = "group",
    From = "from",
    To = "to",
    Open = "open",
    OpenRef = "openRef",
    Close = "close",
    CloseRef = "closeRef",
    Low = "low",
    LowRef = "lowRef",
    High = "high",
    HighRef = "highRef"
}
export declare type MonthlyCurrencyPriceCandle = {
    __typename?: 'MonthlyCurrencyPriceCandle';
    id: Scalars['ID'];
    currency: Currency;
    group: MonthlyPriceCandleGroup;
    from: Scalars['BigInt'];
    to: Scalars['BigInt'];
    open: Scalars['BigDecimal'];
    openRef: CurrencyPrice;
    close: Scalars['BigDecimal'];
    closeRef: CurrencyPrice;
    low: Scalars['BigDecimal'];
    lowRef: CurrencyPrice;
    high: Scalars['BigDecimal'];
    highRef: CurrencyPrice;
};
export declare type MonthlyCurrencyPriceCandle_Filter = {
    id?: Maybe<Scalars['ID']>;
    id_not?: Maybe<Scalars['ID']>;
    id_gt?: Maybe<Scalars['ID']>;
    id_lt?: Maybe<Scalars['ID']>;
    id_gte?: Maybe<Scalars['ID']>;
    id_lte?: Maybe<Scalars['ID']>;
    id_in?: Maybe<Array<Scalars['ID']>>;
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    currency?: Maybe<Scalars['String']>;
    currency_not?: Maybe<Scalars['String']>;
    currency_gt?: Maybe<Scalars['String']>;
    currency_lt?: Maybe<Scalars['String']>;
    currency_gte?: Maybe<Scalars['String']>;
    currency_lte?: Maybe<Scalars['String']>;
    currency_in?: Maybe<Array<Scalars['String']>>;
    currency_not_in?: Maybe<Array<Scalars['String']>>;
    currency_contains?: Maybe<Scalars['String']>;
    currency_not_contains?: Maybe<Scalars['String']>;
    currency_starts_with?: Maybe<Scalars['String']>;
    currency_not_starts_with?: Maybe<Scalars['String']>;
    currency_ends_with?: Maybe<Scalars['String']>;
    currency_not_ends_with?: Maybe<Scalars['String']>;
    group?: Maybe<Scalars['String']>;
    group_not?: Maybe<Scalars['String']>;
    group_gt?: Maybe<Scalars['String']>;
    group_lt?: Maybe<Scalars['String']>;
    group_gte?: Maybe<Scalars['String']>;
    group_lte?: Maybe<Scalars['String']>;
    group_in?: Maybe<Array<Scalars['String']>>;
    group_not_in?: Maybe<Array<Scalars['String']>>;
    group_contains?: Maybe<Scalars['String']>;
    group_not_contains?: Maybe<Scalars['String']>;
    group_starts_with?: Maybe<Scalars['String']>;
    group_not_starts_with?: Maybe<Scalars['String']>;
    group_ends_with?: Maybe<Scalars['String']>;
    group_not_ends_with?: Maybe<Scalars['String']>;
    from?: Maybe<Scalars['BigInt']>;
    from_not?: Maybe<Scalars['BigInt']>;
    from_gt?: Maybe<Scalars['BigInt']>;
    from_lt?: Maybe<Scalars['BigInt']>;
    from_gte?: Maybe<Scalars['BigInt']>;
    from_lte?: Maybe<Scalars['BigInt']>;
    from_in?: Maybe<Array<Scalars['BigInt']>>;
    from_not_in?: Maybe<Array<Scalars['BigInt']>>;
    to?: Maybe<Scalars['BigInt']>;
    to_not?: Maybe<Scalars['BigInt']>;
    to_gt?: Maybe<Scalars['BigInt']>;
    to_lt?: Maybe<Scalars['BigInt']>;
    to_gte?: Maybe<Scalars['BigInt']>;
    to_lte?: Maybe<Scalars['BigInt']>;
    to_in?: Maybe<Array<Scalars['BigInt']>>;
    to_not_in?: Maybe<Array<Scalars['BigInt']>>;
    open?: Maybe<Scalars['BigDecimal']>;
    open_not?: Maybe<Scalars['BigDecimal']>;
    open_gt?: Maybe<Scalars['BigDecimal']>;
    open_lt?: Maybe<Scalars['BigDecimal']>;
    open_gte?: Maybe<Scalars['BigDecimal']>;
    open_lte?: Maybe<Scalars['BigDecimal']>;
    open_in?: Maybe<Array<Scalars['BigDecimal']>>;
    open_not_in?: Maybe<Array<Scalars['BigDecimal']>>;
    openRef?: Maybe<Scalars['String']>;
    openRef_not?: Maybe<Scalars['String']>;
    openRef_gt?: Maybe<Scalars['String']>;
    openRef_lt?: Maybe<Scalars['String']>;
    openRef_gte?: Maybe<Scalars['String']>;
    openRef_lte?: Maybe<Scalars['String']>;
    openRef_in?: Maybe<Array<Scalars['String']>>;
    openRef_not_in?: Maybe<Array<Scalars['String']>>;
    openRef_contains?: Maybe<Scalars['String']>;
    openRef_not_contains?: Maybe<Scalars['String']>;
    openRef_starts_with?: Maybe<Scalars['String']>;
    openRef_not_starts_with?: Maybe<Scalars['String']>;
    openRef_ends_with?: Maybe<Scalars['String']>;
    openRef_not_ends_with?: Maybe<Scalars['String']>;
    close?: Maybe<Scalars['BigDecimal']>;
    close_not?: Maybe<Scalars['BigDecimal']>;
    close_gt?: Maybe<Scalars['BigDecimal']>;
    close_lt?: Maybe<Scalars['BigDecimal']>;
    close_gte?: Maybe<Scalars['BigDecimal']>;
    close_lte?: Maybe<Scalars['BigDecimal']>;
    close_in?: Maybe<Array<Scalars['BigDecimal']>>;
    close_not_in?: Maybe<Array<Scalars['BigDecimal']>>;
    closeRef?: Maybe<Scalars['String']>;
    closeRef_not?: Maybe<Scalars['String']>;
    closeRef_gt?: Maybe<Scalars['String']>;
    closeRef_lt?: Maybe<Scalars['String']>;
    closeRef_gte?: Maybe<Scalars['String']>;
    closeRef_lte?: Maybe<Scalars['String']>;
    closeRef_in?: Maybe<Array<Scalars['String']>>;
    closeRef_not_in?: Maybe<Array<Scalars['String']>>;
    closeRef_contains?: Maybe<Scalars['String']>;
    closeRef_not_contains?: Maybe<Scalars['String']>;
    closeRef_starts_with?: Maybe<Scalars['String']>;
    closeRef_not_starts_with?: Maybe<Scalars['String']>;
    closeRef_ends_with?: Maybe<Scalars['String']>;
    closeRef_not_ends_with?: Maybe<Scalars['String']>;
    low?: Maybe<Scalars['BigDecimal']>;
    low_not?: Maybe<Scalars['BigDecimal']>;
    low_gt?: Maybe<Scalars['BigDecimal']>;
    low_lt?: Maybe<Scalars['BigDecimal']>;
    low_gte?: Maybe<Scalars['BigDecimal']>;
    low_lte?: Maybe<Scalars['BigDecimal']>;
    low_in?: Maybe<Array<Scalars['BigDecimal']>>;
    low_not_in?: Maybe<Array<Scalars['BigDecimal']>>;
    lowRef?: Maybe<Scalars['String']>;
    lowRef_not?: Maybe<Scalars['String']>;
    lowRef_gt?: Maybe<Scalars['String']>;
    lowRef_lt?: Maybe<Scalars['String']>;
    lowRef_gte?: Maybe<Scalars['String']>;
    lowRef_lte?: Maybe<Scalars['String']>;
    lowRef_in?: Maybe<Array<Scalars['String']>>;
    lowRef_not_in?: Maybe<Array<Scalars['String']>>;
    lowRef_contains?: Maybe<Scalars['String']>;
    lowRef_not_contains?: Maybe<Scalars['String']>;
    lowRef_starts_with?: Maybe<Scalars['String']>;
    lowRef_not_starts_with?: Maybe<Scalars['String']>;
    lowRef_ends_with?: Maybe<Scalars['String']>;
    lowRef_not_ends_with?: Maybe<Scalars['String']>;
    high?: Maybe<Scalars['BigDecimal']>;
    high_not?: Maybe<Scalars['BigDecimal']>;
    high_gt?: Maybe<Scalars['BigDecimal']>;
    high_lt?: Maybe<Scalars['BigDecimal']>;
    high_gte?: Maybe<Scalars['BigDecimal']>;
    high_lte?: Maybe<Scalars['BigDecimal']>;
    high_in?: Maybe<Array<Scalars['BigDecimal']>>;
    high_not_in?: Maybe<Array<Scalars['BigDecimal']>>;
    highRef?: Maybe<Scalars['String']>;
    highRef_not?: Maybe<Scalars['String']>;
    highRef_gt?: Maybe<Scalars['String']>;
    highRef_lt?: Maybe<Scalars['String']>;
    highRef_gte?: Maybe<Scalars['String']>;
    highRef_lte?: Maybe<Scalars['String']>;
    highRef_in?: Maybe<Array<Scalars['String']>>;
    highRef_not_in?: Maybe<Array<Scalars['String']>>;
    highRef_contains?: Maybe<Scalars['String']>;
    highRef_not_contains?: Maybe<Scalars['String']>;
    highRef_starts_with?: Maybe<Scalars['String']>;
    highRef_not_starts_with?: Maybe<Scalars['String']>;
    highRef_ends_with?: Maybe<Scalars['String']>;
    highRef_not_ends_with?: Maybe<Scalars['String']>;
};
export declare enum MonthlyCurrencyPriceCandle_OrderBy {
    Id = "id",
    Currency = "currency",
    Group = "group",
    From = "from",
    To = "to",
    Open = "open",
    OpenRef = "openRef",
    Close = "close",
    CloseRef = "closeRef",
    Low = "low",
    LowRef = "lowRef",
    High = "high",
    HighRef = "highRef"
}
export declare type MonthlyFundState = PeriodicFundStateInterface & {
    __typename?: 'MonthlyFundState';
    id: Scalars['ID'];
    fund: Fund;
    start: Scalars['BigInt'];
    end: Scalars['BigInt'];
    first: FundState;
    last: FundState;
};
export declare type MonthlyFundState_Filter = {
    id?: Maybe<Scalars['ID']>;
    id_not?: Maybe<Scalars['ID']>;
    id_gt?: Maybe<Scalars['ID']>;
    id_lt?: Maybe<Scalars['ID']>;
    id_gte?: Maybe<Scalars['ID']>;
    id_lte?: Maybe<Scalars['ID']>;
    id_in?: Maybe<Array<Scalars['ID']>>;
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    fund?: Maybe<Scalars['String']>;
    fund_not?: Maybe<Scalars['String']>;
    fund_gt?: Maybe<Scalars['String']>;
    fund_lt?: Maybe<Scalars['String']>;
    fund_gte?: Maybe<Scalars['String']>;
    fund_lte?: Maybe<Scalars['String']>;
    fund_in?: Maybe<Array<Scalars['String']>>;
    fund_not_in?: Maybe<Array<Scalars['String']>>;
    fund_contains?: Maybe<Scalars['String']>;
    fund_not_contains?: Maybe<Scalars['String']>;
    fund_starts_with?: Maybe<Scalars['String']>;
    fund_not_starts_with?: Maybe<Scalars['String']>;
    fund_ends_with?: Maybe<Scalars['String']>;
    fund_not_ends_with?: Maybe<Scalars['String']>;
    start?: Maybe<Scalars['BigInt']>;
    start_not?: Maybe<Scalars['BigInt']>;
    start_gt?: Maybe<Scalars['BigInt']>;
    start_lt?: Maybe<Scalars['BigInt']>;
    start_gte?: Maybe<Scalars['BigInt']>;
    start_lte?: Maybe<Scalars['BigInt']>;
    start_in?: Maybe<Array<Scalars['BigInt']>>;
    start_not_in?: Maybe<Array<Scalars['BigInt']>>;
    end?: Maybe<Scalars['BigInt']>;
    end_not?: Maybe<Scalars['BigInt']>;
    end_gt?: Maybe<Scalars['BigInt']>;
    end_lt?: Maybe<Scalars['BigInt']>;
    end_gte?: Maybe<Scalars['BigInt']>;
    end_lte?: Maybe<Scalars['BigInt']>;
    end_in?: Maybe<Array<Scalars['BigInt']>>;
    end_not_in?: Maybe<Array<Scalars['BigInt']>>;
    first?: Maybe<Scalars['String']>;
    first_not?: Maybe<Scalars['String']>;
    first_gt?: Maybe<Scalars['String']>;
    first_lt?: Maybe<Scalars['String']>;
    first_gte?: Maybe<Scalars['String']>;
    first_lte?: Maybe<Scalars['String']>;
    first_in?: Maybe<Array<Scalars['String']>>;
    first_not_in?: Maybe<Array<Scalars['String']>>;
    first_contains?: Maybe<Scalars['String']>;
    first_not_contains?: Maybe<Scalars['String']>;
    first_starts_with?: Maybe<Scalars['String']>;
    first_not_starts_with?: Maybe<Scalars['String']>;
    first_ends_with?: Maybe<Scalars['String']>;
    first_not_ends_with?: Maybe<Scalars['String']>;
    last?: Maybe<Scalars['String']>;
    last_not?: Maybe<Scalars['String']>;
    last_gt?: Maybe<Scalars['String']>;
    last_lt?: Maybe<Scalars['String']>;
    last_gte?: Maybe<Scalars['String']>;
    last_lte?: Maybe<Scalars['String']>;
    last_in?: Maybe<Array<Scalars['String']>>;
    last_not_in?: Maybe<Array<Scalars['String']>>;
    last_contains?: Maybe<Scalars['String']>;
    last_not_contains?: Maybe<Scalars['String']>;
    last_starts_with?: Maybe<Scalars['String']>;
    last_not_starts_with?: Maybe<Scalars['String']>;
    last_ends_with?: Maybe<Scalars['String']>;
    last_not_ends_with?: Maybe<Scalars['String']>;
};
export declare enum MonthlyFundState_OrderBy {
    Id = "id",
    Fund = "fund",
    Start = "start",
    End = "end",
    First = "first",
    Last = "last"
}
export declare type MonthlyPriceCandleGroup = {
    __typename?: 'MonthlyPriceCandleGroup';
    id: Scalars['ID'];
    from: Scalars['BigInt'];
    to: Scalars['BigInt'];
    assetCandles: Array<MonthlyAssetPriceCandle>;
    currencyCandles: Array<MonthlyCurrencyPriceCandle>;
};
export declare type MonthlyPriceCandleGroupAssetCandlesArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<MonthlyAssetPriceCandle_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<MonthlyAssetPriceCandle_Filter>;
};
export declare type MonthlyPriceCandleGroupCurrencyCandlesArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<MonthlyCurrencyPriceCandle_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<MonthlyCurrencyPriceCandle_Filter>;
};
export declare type MonthlyPriceCandleGroup_Filter = {
    id?: Maybe<Scalars['ID']>;
    id_not?: Maybe<Scalars['ID']>;
    id_gt?: Maybe<Scalars['ID']>;
    id_lt?: Maybe<Scalars['ID']>;
    id_gte?: Maybe<Scalars['ID']>;
    id_lte?: Maybe<Scalars['ID']>;
    id_in?: Maybe<Array<Scalars['ID']>>;
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    from?: Maybe<Scalars['BigInt']>;
    from_not?: Maybe<Scalars['BigInt']>;
    from_gt?: Maybe<Scalars['BigInt']>;
    from_lt?: Maybe<Scalars['BigInt']>;
    from_gte?: Maybe<Scalars['BigInt']>;
    from_lte?: Maybe<Scalars['BigInt']>;
    from_in?: Maybe<Array<Scalars['BigInt']>>;
    from_not_in?: Maybe<Array<Scalars['BigInt']>>;
    to?: Maybe<Scalars['BigInt']>;
    to_not?: Maybe<Scalars['BigInt']>;
    to_gt?: Maybe<Scalars['BigInt']>;
    to_lt?: Maybe<Scalars['BigInt']>;
    to_gte?: Maybe<Scalars['BigInt']>;
    to_lte?: Maybe<Scalars['BigInt']>;
    to_in?: Maybe<Array<Scalars['BigInt']>>;
    to_not_in?: Maybe<Array<Scalars['BigInt']>>;
};
export declare enum MonthlyPriceCandleGroup_OrderBy {
    Id = "id",
    From = "from",
    To = "to",
    AssetCandles = "assetCandles",
    CurrencyCandles = "currencyCandles"
}
export declare type MultiLendTrade = Trade & {
    __typename?: 'MultiLendTrade';
    id: Scalars['ID'];
    fund: Fund;
    adapter: IntegrationAdapter;
    method: IntegrationMethod;
    incomingAssetAmounts: Array<AssetAmount>;
    outgoingAssetAmounts: Array<AssetAmount>;
    timestamp: Scalars['BigInt'];
    fundState: FundState;
};
export declare type MultiLendTradeIncomingAssetAmountsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<AssetAmount_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<AssetAmount_Filter>;
};
export declare type MultiLendTradeOutgoingAssetAmountsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<AssetAmount_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<AssetAmount_Filter>;
};
export declare type MultiLendTrade_Filter = {
    id?: Maybe<Scalars['ID']>;
    id_not?: Maybe<Scalars['ID']>;
    id_gt?: Maybe<Scalars['ID']>;
    id_lt?: Maybe<Scalars['ID']>;
    id_gte?: Maybe<Scalars['ID']>;
    id_lte?: Maybe<Scalars['ID']>;
    id_in?: Maybe<Array<Scalars['ID']>>;
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    fund?: Maybe<Scalars['String']>;
    fund_not?: Maybe<Scalars['String']>;
    fund_gt?: Maybe<Scalars['String']>;
    fund_lt?: Maybe<Scalars['String']>;
    fund_gte?: Maybe<Scalars['String']>;
    fund_lte?: Maybe<Scalars['String']>;
    fund_in?: Maybe<Array<Scalars['String']>>;
    fund_not_in?: Maybe<Array<Scalars['String']>>;
    fund_contains?: Maybe<Scalars['String']>;
    fund_not_contains?: Maybe<Scalars['String']>;
    fund_starts_with?: Maybe<Scalars['String']>;
    fund_not_starts_with?: Maybe<Scalars['String']>;
    fund_ends_with?: Maybe<Scalars['String']>;
    fund_not_ends_with?: Maybe<Scalars['String']>;
    adapter?: Maybe<Scalars['String']>;
    adapter_not?: Maybe<Scalars['String']>;
    adapter_gt?: Maybe<Scalars['String']>;
    adapter_lt?: Maybe<Scalars['String']>;
    adapter_gte?: Maybe<Scalars['String']>;
    adapter_lte?: Maybe<Scalars['String']>;
    adapter_in?: Maybe<Array<Scalars['String']>>;
    adapter_not_in?: Maybe<Array<Scalars['String']>>;
    adapter_contains?: Maybe<Scalars['String']>;
    adapter_not_contains?: Maybe<Scalars['String']>;
    adapter_starts_with?: Maybe<Scalars['String']>;
    adapter_not_starts_with?: Maybe<Scalars['String']>;
    adapter_ends_with?: Maybe<Scalars['String']>;
    adapter_not_ends_with?: Maybe<Scalars['String']>;
    method?: Maybe<IntegrationMethod>;
    method_not?: Maybe<IntegrationMethod>;
    incomingAssetAmounts?: Maybe<Array<Scalars['String']>>;
    incomingAssetAmounts_not?: Maybe<Array<Scalars['String']>>;
    incomingAssetAmounts_contains?: Maybe<Array<Scalars['String']>>;
    incomingAssetAmounts_not_contains?: Maybe<Array<Scalars['String']>>;
    outgoingAssetAmounts?: Maybe<Array<Scalars['String']>>;
    outgoingAssetAmounts_not?: Maybe<Array<Scalars['String']>>;
    outgoingAssetAmounts_contains?: Maybe<Array<Scalars['String']>>;
    outgoingAssetAmounts_not_contains?: Maybe<Array<Scalars['String']>>;
    timestamp?: Maybe<Scalars['BigInt']>;
    timestamp_not?: Maybe<Scalars['BigInt']>;
    timestamp_gt?: Maybe<Scalars['BigInt']>;
    timestamp_lt?: Maybe<Scalars['BigInt']>;
    timestamp_gte?: Maybe<Scalars['BigInt']>;
    timestamp_lte?: Maybe<Scalars['BigInt']>;
    timestamp_in?: Maybe<Array<Scalars['BigInt']>>;
    timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;
    fundState?: Maybe<Scalars['String']>;
    fundState_not?: Maybe<Scalars['String']>;
    fundState_gt?: Maybe<Scalars['String']>;
    fundState_lt?: Maybe<Scalars['String']>;
    fundState_gte?: Maybe<Scalars['String']>;
    fundState_lte?: Maybe<Scalars['String']>;
    fundState_in?: Maybe<Array<Scalars['String']>>;
    fundState_not_in?: Maybe<Array<Scalars['String']>>;
    fundState_contains?: Maybe<Scalars['String']>;
    fundState_not_contains?: Maybe<Scalars['String']>;
    fundState_starts_with?: Maybe<Scalars['String']>;
    fundState_not_starts_with?: Maybe<Scalars['String']>;
    fundState_ends_with?: Maybe<Scalars['String']>;
    fundState_not_ends_with?: Maybe<Scalars['String']>;
};
export declare enum MultiLendTrade_OrderBy {
    Id = "id",
    Fund = "fund",
    Adapter = "adapter",
    Method = "method",
    IncomingAssetAmounts = "incomingAssetAmounts",
    OutgoingAssetAmounts = "outgoingAssetAmounts",
    Timestamp = "timestamp",
    FundState = "fundState"
}
export declare type MultiRedeemTrade = Trade & {
    __typename?: 'MultiRedeemTrade';
    id: Scalars['ID'];
    fund: Fund;
    adapter: IntegrationAdapter;
    method: IntegrationMethod;
    incomingAssetAmounts: Array<AssetAmount>;
    outgoingAssetAmounts: Array<AssetAmount>;
    timestamp: Scalars['BigInt'];
    fundState: FundState;
};
export declare type MultiRedeemTradeIncomingAssetAmountsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<AssetAmount_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<AssetAmount_Filter>;
};
export declare type MultiRedeemTradeOutgoingAssetAmountsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<AssetAmount_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<AssetAmount_Filter>;
};
export declare type MultiRedeemTrade_Filter = {
    id?: Maybe<Scalars['ID']>;
    id_not?: Maybe<Scalars['ID']>;
    id_gt?: Maybe<Scalars['ID']>;
    id_lt?: Maybe<Scalars['ID']>;
    id_gte?: Maybe<Scalars['ID']>;
    id_lte?: Maybe<Scalars['ID']>;
    id_in?: Maybe<Array<Scalars['ID']>>;
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    fund?: Maybe<Scalars['String']>;
    fund_not?: Maybe<Scalars['String']>;
    fund_gt?: Maybe<Scalars['String']>;
    fund_lt?: Maybe<Scalars['String']>;
    fund_gte?: Maybe<Scalars['String']>;
    fund_lte?: Maybe<Scalars['String']>;
    fund_in?: Maybe<Array<Scalars['String']>>;
    fund_not_in?: Maybe<Array<Scalars['String']>>;
    fund_contains?: Maybe<Scalars['String']>;
    fund_not_contains?: Maybe<Scalars['String']>;
    fund_starts_with?: Maybe<Scalars['String']>;
    fund_not_starts_with?: Maybe<Scalars['String']>;
    fund_ends_with?: Maybe<Scalars['String']>;
    fund_not_ends_with?: Maybe<Scalars['String']>;
    adapter?: Maybe<Scalars['String']>;
    adapter_not?: Maybe<Scalars['String']>;
    adapter_gt?: Maybe<Scalars['String']>;
    adapter_lt?: Maybe<Scalars['String']>;
    adapter_gte?: Maybe<Scalars['String']>;
    adapter_lte?: Maybe<Scalars['String']>;
    adapter_in?: Maybe<Array<Scalars['String']>>;
    adapter_not_in?: Maybe<Array<Scalars['String']>>;
    adapter_contains?: Maybe<Scalars['String']>;
    adapter_not_contains?: Maybe<Scalars['String']>;
    adapter_starts_with?: Maybe<Scalars['String']>;
    adapter_not_starts_with?: Maybe<Scalars['String']>;
    adapter_ends_with?: Maybe<Scalars['String']>;
    adapter_not_ends_with?: Maybe<Scalars['String']>;
    method?: Maybe<IntegrationMethod>;
    method_not?: Maybe<IntegrationMethod>;
    incomingAssetAmounts?: Maybe<Array<Scalars['String']>>;
    incomingAssetAmounts_not?: Maybe<Array<Scalars['String']>>;
    incomingAssetAmounts_contains?: Maybe<Array<Scalars['String']>>;
    incomingAssetAmounts_not_contains?: Maybe<Array<Scalars['String']>>;
    outgoingAssetAmounts?: Maybe<Array<Scalars['String']>>;
    outgoingAssetAmounts_not?: Maybe<Array<Scalars['String']>>;
    outgoingAssetAmounts_contains?: Maybe<Array<Scalars['String']>>;
    outgoingAssetAmounts_not_contains?: Maybe<Array<Scalars['String']>>;
    timestamp?: Maybe<Scalars['BigInt']>;
    timestamp_not?: Maybe<Scalars['BigInt']>;
    timestamp_gt?: Maybe<Scalars['BigInt']>;
    timestamp_lt?: Maybe<Scalars['BigInt']>;
    timestamp_gte?: Maybe<Scalars['BigInt']>;
    timestamp_lte?: Maybe<Scalars['BigInt']>;
    timestamp_in?: Maybe<Array<Scalars['BigInt']>>;
    timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;
    fundState?: Maybe<Scalars['String']>;
    fundState_not?: Maybe<Scalars['String']>;
    fundState_gt?: Maybe<Scalars['String']>;
    fundState_lt?: Maybe<Scalars['String']>;
    fundState_gte?: Maybe<Scalars['String']>;
    fundState_lte?: Maybe<Scalars['String']>;
    fundState_in?: Maybe<Array<Scalars['String']>>;
    fundState_not_in?: Maybe<Array<Scalars['String']>>;
    fundState_contains?: Maybe<Scalars['String']>;
    fundState_not_contains?: Maybe<Scalars['String']>;
    fundState_starts_with?: Maybe<Scalars['String']>;
    fundState_not_starts_with?: Maybe<Scalars['String']>;
    fundState_ends_with?: Maybe<Scalars['String']>;
    fundState_not_ends_with?: Maybe<Scalars['String']>;
};
export declare enum MultiRedeemTrade_OrderBy {
    Id = "id",
    Fund = "fund",
    Adapter = "adapter",
    Method = "method",
    IncomingAssetAmounts = "incomingAssetAmounts",
    OutgoingAssetAmounts = "outgoingAssetAmounts",
    Timestamp = "timestamp",
    FundState = "fundState"
}
export declare type MultiTokenSwapTrade = Trade & {
    __typename?: 'MultiTokenSwapTrade';
    id: Scalars['ID'];
    fund: Fund;
    adapter: IntegrationAdapter;
    method: IntegrationMethod;
    incomingAssetAmounts: Array<AssetAmount>;
    outgoingAssetAmounts: Array<AssetAmount>;
    timestamp: Scalars['BigInt'];
    fundState: FundState;
};
export declare type MultiTokenSwapTradeIncomingAssetAmountsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<AssetAmount_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<AssetAmount_Filter>;
};
export declare type MultiTokenSwapTradeOutgoingAssetAmountsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<AssetAmount_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<AssetAmount_Filter>;
};
export declare type MultiTokenSwapTrade_Filter = {
    id?: Maybe<Scalars['ID']>;
    id_not?: Maybe<Scalars['ID']>;
    id_gt?: Maybe<Scalars['ID']>;
    id_lt?: Maybe<Scalars['ID']>;
    id_gte?: Maybe<Scalars['ID']>;
    id_lte?: Maybe<Scalars['ID']>;
    id_in?: Maybe<Array<Scalars['ID']>>;
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    fund?: Maybe<Scalars['String']>;
    fund_not?: Maybe<Scalars['String']>;
    fund_gt?: Maybe<Scalars['String']>;
    fund_lt?: Maybe<Scalars['String']>;
    fund_gte?: Maybe<Scalars['String']>;
    fund_lte?: Maybe<Scalars['String']>;
    fund_in?: Maybe<Array<Scalars['String']>>;
    fund_not_in?: Maybe<Array<Scalars['String']>>;
    fund_contains?: Maybe<Scalars['String']>;
    fund_not_contains?: Maybe<Scalars['String']>;
    fund_starts_with?: Maybe<Scalars['String']>;
    fund_not_starts_with?: Maybe<Scalars['String']>;
    fund_ends_with?: Maybe<Scalars['String']>;
    fund_not_ends_with?: Maybe<Scalars['String']>;
    adapter?: Maybe<Scalars['String']>;
    adapter_not?: Maybe<Scalars['String']>;
    adapter_gt?: Maybe<Scalars['String']>;
    adapter_lt?: Maybe<Scalars['String']>;
    adapter_gte?: Maybe<Scalars['String']>;
    adapter_lte?: Maybe<Scalars['String']>;
    adapter_in?: Maybe<Array<Scalars['String']>>;
    adapter_not_in?: Maybe<Array<Scalars['String']>>;
    adapter_contains?: Maybe<Scalars['String']>;
    adapter_not_contains?: Maybe<Scalars['String']>;
    adapter_starts_with?: Maybe<Scalars['String']>;
    adapter_not_starts_with?: Maybe<Scalars['String']>;
    adapter_ends_with?: Maybe<Scalars['String']>;
    adapter_not_ends_with?: Maybe<Scalars['String']>;
    method?: Maybe<IntegrationMethod>;
    method_not?: Maybe<IntegrationMethod>;
    incomingAssetAmounts?: Maybe<Array<Scalars['String']>>;
    incomingAssetAmounts_not?: Maybe<Array<Scalars['String']>>;
    incomingAssetAmounts_contains?: Maybe<Array<Scalars['String']>>;
    incomingAssetAmounts_not_contains?: Maybe<Array<Scalars['String']>>;
    outgoingAssetAmounts?: Maybe<Array<Scalars['String']>>;
    outgoingAssetAmounts_not?: Maybe<Array<Scalars['String']>>;
    outgoingAssetAmounts_contains?: Maybe<Array<Scalars['String']>>;
    outgoingAssetAmounts_not_contains?: Maybe<Array<Scalars['String']>>;
    timestamp?: Maybe<Scalars['BigInt']>;
    timestamp_not?: Maybe<Scalars['BigInt']>;
    timestamp_gt?: Maybe<Scalars['BigInt']>;
    timestamp_lt?: Maybe<Scalars['BigInt']>;
    timestamp_gte?: Maybe<Scalars['BigInt']>;
    timestamp_lte?: Maybe<Scalars['BigInt']>;
    timestamp_in?: Maybe<Array<Scalars['BigInt']>>;
    timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;
    fundState?: Maybe<Scalars['String']>;
    fundState_not?: Maybe<Scalars['String']>;
    fundState_gt?: Maybe<Scalars['String']>;
    fundState_lt?: Maybe<Scalars['String']>;
    fundState_gte?: Maybe<Scalars['String']>;
    fundState_lte?: Maybe<Scalars['String']>;
    fundState_in?: Maybe<Array<Scalars['String']>>;
    fundState_not_in?: Maybe<Array<Scalars['String']>>;
    fundState_contains?: Maybe<Scalars['String']>;
    fundState_not_contains?: Maybe<Scalars['String']>;
    fundState_starts_with?: Maybe<Scalars['String']>;
    fundState_not_starts_with?: Maybe<Scalars['String']>;
    fundState_ends_with?: Maybe<Scalars['String']>;
    fundState_not_ends_with?: Maybe<Scalars['String']>;
};
export declare enum MultiTokenSwapTrade_OrderBy {
    Id = "id",
    Fund = "fund",
    Adapter = "adapter",
    Method = "method",
    IncomingAssetAmounts = "incomingAssetAmounts",
    OutgoingAssetAmounts = "outgoingAssetAmounts",
    Timestamp = "timestamp",
    FundState = "fundState"
}
export declare type Network = {
    __typename?: 'Network';
    id: Scalars['ID'];
    timestamp: Scalars['BigInt'];
    currentRelease?: Maybe<Release>;
    releases?: Maybe<Array<Release>>;
    state: NetworkState;
    stateHistory: Array<NetworkState>;
};
export declare type NetworkReleasesArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<Release_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<Release_Filter>;
};
export declare type NetworkStateHistoryArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<NetworkState_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<NetworkState_Filter>;
};
export declare type NetworkAssetHolding = {
    __typename?: 'NetworkAssetHolding';
    id: Scalars['ID'];
    timestamp: Scalars['BigInt'];
    asset: Asset;
    amount: Scalars['BigDecimal'];
};
export declare type NetworkAssetHolding_Filter = {
    id?: Maybe<Scalars['ID']>;
    id_not?: Maybe<Scalars['ID']>;
    id_gt?: Maybe<Scalars['ID']>;
    id_lt?: Maybe<Scalars['ID']>;
    id_gte?: Maybe<Scalars['ID']>;
    id_lte?: Maybe<Scalars['ID']>;
    id_in?: Maybe<Array<Scalars['ID']>>;
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    timestamp?: Maybe<Scalars['BigInt']>;
    timestamp_not?: Maybe<Scalars['BigInt']>;
    timestamp_gt?: Maybe<Scalars['BigInt']>;
    timestamp_lt?: Maybe<Scalars['BigInt']>;
    timestamp_gte?: Maybe<Scalars['BigInt']>;
    timestamp_lte?: Maybe<Scalars['BigInt']>;
    timestamp_in?: Maybe<Array<Scalars['BigInt']>>;
    timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;
    asset?: Maybe<Scalars['String']>;
    asset_not?: Maybe<Scalars['String']>;
    asset_gt?: Maybe<Scalars['String']>;
    asset_lt?: Maybe<Scalars['String']>;
    asset_gte?: Maybe<Scalars['String']>;
    asset_lte?: Maybe<Scalars['String']>;
    asset_in?: Maybe<Array<Scalars['String']>>;
    asset_not_in?: Maybe<Array<Scalars['String']>>;
    asset_contains?: Maybe<Scalars['String']>;
    asset_not_contains?: Maybe<Scalars['String']>;
    asset_starts_with?: Maybe<Scalars['String']>;
    asset_not_starts_with?: Maybe<Scalars['String']>;
    asset_ends_with?: Maybe<Scalars['String']>;
    asset_not_ends_with?: Maybe<Scalars['String']>;
    amount?: Maybe<Scalars['BigDecimal']>;
    amount_not?: Maybe<Scalars['BigDecimal']>;
    amount_gt?: Maybe<Scalars['BigDecimal']>;
    amount_lt?: Maybe<Scalars['BigDecimal']>;
    amount_gte?: Maybe<Scalars['BigDecimal']>;
    amount_lte?: Maybe<Scalars['BigDecimal']>;
    amount_in?: Maybe<Array<Scalars['BigDecimal']>>;
    amount_not_in?: Maybe<Array<Scalars['BigDecimal']>>;
};
export declare enum NetworkAssetHolding_OrderBy {
    Id = "id",
    Timestamp = "timestamp",
    Asset = "asset",
    Amount = "amount"
}
export declare type NetworkEventInterface = {
    id: Scalars['ID'];
    timestamp: Scalars['BigInt'];
    transaction: Transaction;
};
export declare type NetworkEventInterface_Filter = {
    id?: Maybe<Scalars['ID']>;
    id_not?: Maybe<Scalars['ID']>;
    id_gt?: Maybe<Scalars['ID']>;
    id_lt?: Maybe<Scalars['ID']>;
    id_gte?: Maybe<Scalars['ID']>;
    id_lte?: Maybe<Scalars['ID']>;
    id_in?: Maybe<Array<Scalars['ID']>>;
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    timestamp?: Maybe<Scalars['BigInt']>;
    timestamp_not?: Maybe<Scalars['BigInt']>;
    timestamp_gt?: Maybe<Scalars['BigInt']>;
    timestamp_lt?: Maybe<Scalars['BigInt']>;
    timestamp_gte?: Maybe<Scalars['BigInt']>;
    timestamp_lte?: Maybe<Scalars['BigInt']>;
    timestamp_in?: Maybe<Array<Scalars['BigInt']>>;
    timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;
    transaction?: Maybe<Scalars['String']>;
    transaction_not?: Maybe<Scalars['String']>;
    transaction_gt?: Maybe<Scalars['String']>;
    transaction_lt?: Maybe<Scalars['String']>;
    transaction_gte?: Maybe<Scalars['String']>;
    transaction_lte?: Maybe<Scalars['String']>;
    transaction_in?: Maybe<Array<Scalars['String']>>;
    transaction_not_in?: Maybe<Array<Scalars['String']>>;
    transaction_contains?: Maybe<Scalars['String']>;
    transaction_not_contains?: Maybe<Scalars['String']>;
    transaction_starts_with?: Maybe<Scalars['String']>;
    transaction_not_starts_with?: Maybe<Scalars['String']>;
    transaction_ends_with?: Maybe<Scalars['String']>;
    transaction_not_ends_with?: Maybe<Scalars['String']>;
};
export declare enum NetworkEventInterface_OrderBy {
    Id = "id",
    Timestamp = "timestamp",
    Transaction = "transaction"
}
export declare type NetworkState = {
    __typename?: 'NetworkState';
    id: Scalars['ID'];
    network: Network;
    timestamp: Scalars['BigInt'];
    assetHoldings: Array<NetworkAssetHolding>;
    funds: Scalars['Int'];
    managers: Scalars['Int'];
    investors: Scalars['Int'];
    investments: Scalars['Int'];
};
export declare type NetworkStateAssetHoldingsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<NetworkAssetHolding_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<NetworkAssetHolding_Filter>;
};
export declare type NetworkState_Filter = {
    id?: Maybe<Scalars['ID']>;
    id_not?: Maybe<Scalars['ID']>;
    id_gt?: Maybe<Scalars['ID']>;
    id_lt?: Maybe<Scalars['ID']>;
    id_gte?: Maybe<Scalars['ID']>;
    id_lte?: Maybe<Scalars['ID']>;
    id_in?: Maybe<Array<Scalars['ID']>>;
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    network?: Maybe<Scalars['String']>;
    network_not?: Maybe<Scalars['String']>;
    network_gt?: Maybe<Scalars['String']>;
    network_lt?: Maybe<Scalars['String']>;
    network_gte?: Maybe<Scalars['String']>;
    network_lte?: Maybe<Scalars['String']>;
    network_in?: Maybe<Array<Scalars['String']>>;
    network_not_in?: Maybe<Array<Scalars['String']>>;
    network_contains?: Maybe<Scalars['String']>;
    network_not_contains?: Maybe<Scalars['String']>;
    network_starts_with?: Maybe<Scalars['String']>;
    network_not_starts_with?: Maybe<Scalars['String']>;
    network_ends_with?: Maybe<Scalars['String']>;
    network_not_ends_with?: Maybe<Scalars['String']>;
    timestamp?: Maybe<Scalars['BigInt']>;
    timestamp_not?: Maybe<Scalars['BigInt']>;
    timestamp_gt?: Maybe<Scalars['BigInt']>;
    timestamp_lt?: Maybe<Scalars['BigInt']>;
    timestamp_gte?: Maybe<Scalars['BigInt']>;
    timestamp_lte?: Maybe<Scalars['BigInt']>;
    timestamp_in?: Maybe<Array<Scalars['BigInt']>>;
    timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;
    assetHoldings?: Maybe<Array<Scalars['String']>>;
    assetHoldings_not?: Maybe<Array<Scalars['String']>>;
    assetHoldings_contains?: Maybe<Array<Scalars['String']>>;
    assetHoldings_not_contains?: Maybe<Array<Scalars['String']>>;
    funds?: Maybe<Scalars['Int']>;
    funds_not?: Maybe<Scalars['Int']>;
    funds_gt?: Maybe<Scalars['Int']>;
    funds_lt?: Maybe<Scalars['Int']>;
    funds_gte?: Maybe<Scalars['Int']>;
    funds_lte?: Maybe<Scalars['Int']>;
    funds_in?: Maybe<Array<Scalars['Int']>>;
    funds_not_in?: Maybe<Array<Scalars['Int']>>;
    managers?: Maybe<Scalars['Int']>;
    managers_not?: Maybe<Scalars['Int']>;
    managers_gt?: Maybe<Scalars['Int']>;
    managers_lt?: Maybe<Scalars['Int']>;
    managers_gte?: Maybe<Scalars['Int']>;
    managers_lte?: Maybe<Scalars['Int']>;
    managers_in?: Maybe<Array<Scalars['Int']>>;
    managers_not_in?: Maybe<Array<Scalars['Int']>>;
    investors?: Maybe<Scalars['Int']>;
    investors_not?: Maybe<Scalars['Int']>;
    investors_gt?: Maybe<Scalars['Int']>;
    investors_lt?: Maybe<Scalars['Int']>;
    investors_gte?: Maybe<Scalars['Int']>;
    investors_lte?: Maybe<Scalars['Int']>;
    investors_in?: Maybe<Array<Scalars['Int']>>;
    investors_not_in?: Maybe<Array<Scalars['Int']>>;
    investments?: Maybe<Scalars['Int']>;
    investments_not?: Maybe<Scalars['Int']>;
    investments_gt?: Maybe<Scalars['Int']>;
    investments_lt?: Maybe<Scalars['Int']>;
    investments_gte?: Maybe<Scalars['Int']>;
    investments_lte?: Maybe<Scalars['Int']>;
    investments_in?: Maybe<Array<Scalars['Int']>>;
    investments_not_in?: Maybe<Array<Scalars['Int']>>;
};
export declare enum NetworkState_OrderBy {
    Id = "id",
    Network = "network",
    Timestamp = "timestamp",
    AssetHoldings = "assetHoldings",
    Funds = "funds",
    Managers = "managers",
    Investors = "investors",
    Investments = "investments"
}
export declare type Network_Filter = {
    id?: Maybe<Scalars['ID']>;
    id_not?: Maybe<Scalars['ID']>;
    id_gt?: Maybe<Scalars['ID']>;
    id_lt?: Maybe<Scalars['ID']>;
    id_gte?: Maybe<Scalars['ID']>;
    id_lte?: Maybe<Scalars['ID']>;
    id_in?: Maybe<Array<Scalars['ID']>>;
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    timestamp?: Maybe<Scalars['BigInt']>;
    timestamp_not?: Maybe<Scalars['BigInt']>;
    timestamp_gt?: Maybe<Scalars['BigInt']>;
    timestamp_lt?: Maybe<Scalars['BigInt']>;
    timestamp_gte?: Maybe<Scalars['BigInt']>;
    timestamp_lte?: Maybe<Scalars['BigInt']>;
    timestamp_in?: Maybe<Array<Scalars['BigInt']>>;
    timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;
    currentRelease?: Maybe<Scalars['String']>;
    currentRelease_not?: Maybe<Scalars['String']>;
    currentRelease_gt?: Maybe<Scalars['String']>;
    currentRelease_lt?: Maybe<Scalars['String']>;
    currentRelease_gte?: Maybe<Scalars['String']>;
    currentRelease_lte?: Maybe<Scalars['String']>;
    currentRelease_in?: Maybe<Array<Scalars['String']>>;
    currentRelease_not_in?: Maybe<Array<Scalars['String']>>;
    currentRelease_contains?: Maybe<Scalars['String']>;
    currentRelease_not_contains?: Maybe<Scalars['String']>;
    currentRelease_starts_with?: Maybe<Scalars['String']>;
    currentRelease_not_starts_with?: Maybe<Scalars['String']>;
    currentRelease_ends_with?: Maybe<Scalars['String']>;
    currentRelease_not_ends_with?: Maybe<Scalars['String']>;
    state?: Maybe<Scalars['String']>;
    state_not?: Maybe<Scalars['String']>;
    state_gt?: Maybe<Scalars['String']>;
    state_lt?: Maybe<Scalars['String']>;
    state_gte?: Maybe<Scalars['String']>;
    state_lte?: Maybe<Scalars['String']>;
    state_in?: Maybe<Array<Scalars['String']>>;
    state_not_in?: Maybe<Array<Scalars['String']>>;
    state_contains?: Maybe<Scalars['String']>;
    state_not_contains?: Maybe<Scalars['String']>;
    state_starts_with?: Maybe<Scalars['String']>;
    state_not_starts_with?: Maybe<Scalars['String']>;
    state_ends_with?: Maybe<Scalars['String']>;
    state_not_ends_with?: Maybe<Scalars['String']>;
};
export declare enum Network_OrderBy {
    Id = "id",
    Timestamp = "timestamp",
    CurrentRelease = "currentRelease",
    Releases = "releases",
    State = "state",
    StateHistory = "stateHistory"
}
export declare type NewFundCreatedEvent = EventInterface & FundEventInterface & {
    __typename?: 'NewFundCreatedEvent';
    id: Scalars['ID'];
    fund: Fund;
    timestamp: Scalars['BigInt'];
    comptroller: ComptrollerProxy;
    vaultProxy: Fund;
    creator: Account;
    fundOwner: Account;
    fundName: Scalars['String'];
    denominationAsset: Asset;
    sharesActionTimelock: Scalars['BigInt'];
    feeManagerConfigData: Scalars['String'];
    policyManagerConfigData: Scalars['String'];
    transaction: Transaction;
};
export declare type NewFundCreatedEvent_Filter = {
    id?: Maybe<Scalars['ID']>;
    id_not?: Maybe<Scalars['ID']>;
    id_gt?: Maybe<Scalars['ID']>;
    id_lt?: Maybe<Scalars['ID']>;
    id_gte?: Maybe<Scalars['ID']>;
    id_lte?: Maybe<Scalars['ID']>;
    id_in?: Maybe<Array<Scalars['ID']>>;
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    fund?: Maybe<Scalars['String']>;
    fund_not?: Maybe<Scalars['String']>;
    fund_gt?: Maybe<Scalars['String']>;
    fund_lt?: Maybe<Scalars['String']>;
    fund_gte?: Maybe<Scalars['String']>;
    fund_lte?: Maybe<Scalars['String']>;
    fund_in?: Maybe<Array<Scalars['String']>>;
    fund_not_in?: Maybe<Array<Scalars['String']>>;
    fund_contains?: Maybe<Scalars['String']>;
    fund_not_contains?: Maybe<Scalars['String']>;
    fund_starts_with?: Maybe<Scalars['String']>;
    fund_not_starts_with?: Maybe<Scalars['String']>;
    fund_ends_with?: Maybe<Scalars['String']>;
    fund_not_ends_with?: Maybe<Scalars['String']>;
    timestamp?: Maybe<Scalars['BigInt']>;
    timestamp_not?: Maybe<Scalars['BigInt']>;
    timestamp_gt?: Maybe<Scalars['BigInt']>;
    timestamp_lt?: Maybe<Scalars['BigInt']>;
    timestamp_gte?: Maybe<Scalars['BigInt']>;
    timestamp_lte?: Maybe<Scalars['BigInt']>;
    timestamp_in?: Maybe<Array<Scalars['BigInt']>>;
    timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;
    comptroller?: Maybe<Scalars['String']>;
    comptroller_not?: Maybe<Scalars['String']>;
    comptroller_gt?: Maybe<Scalars['String']>;
    comptroller_lt?: Maybe<Scalars['String']>;
    comptroller_gte?: Maybe<Scalars['String']>;
    comptroller_lte?: Maybe<Scalars['String']>;
    comptroller_in?: Maybe<Array<Scalars['String']>>;
    comptroller_not_in?: Maybe<Array<Scalars['String']>>;
    comptroller_contains?: Maybe<Scalars['String']>;
    comptroller_not_contains?: Maybe<Scalars['String']>;
    comptroller_starts_with?: Maybe<Scalars['String']>;
    comptroller_not_starts_with?: Maybe<Scalars['String']>;
    comptroller_ends_with?: Maybe<Scalars['String']>;
    comptroller_not_ends_with?: Maybe<Scalars['String']>;
    vaultProxy?: Maybe<Scalars['String']>;
    vaultProxy_not?: Maybe<Scalars['String']>;
    vaultProxy_gt?: Maybe<Scalars['String']>;
    vaultProxy_lt?: Maybe<Scalars['String']>;
    vaultProxy_gte?: Maybe<Scalars['String']>;
    vaultProxy_lte?: Maybe<Scalars['String']>;
    vaultProxy_in?: Maybe<Array<Scalars['String']>>;
    vaultProxy_not_in?: Maybe<Array<Scalars['String']>>;
    vaultProxy_contains?: Maybe<Scalars['String']>;
    vaultProxy_not_contains?: Maybe<Scalars['String']>;
    vaultProxy_starts_with?: Maybe<Scalars['String']>;
    vaultProxy_not_starts_with?: Maybe<Scalars['String']>;
    vaultProxy_ends_with?: Maybe<Scalars['String']>;
    vaultProxy_not_ends_with?: Maybe<Scalars['String']>;
    creator?: Maybe<Scalars['String']>;
    creator_not?: Maybe<Scalars['String']>;
    creator_gt?: Maybe<Scalars['String']>;
    creator_lt?: Maybe<Scalars['String']>;
    creator_gte?: Maybe<Scalars['String']>;
    creator_lte?: Maybe<Scalars['String']>;
    creator_in?: Maybe<Array<Scalars['String']>>;
    creator_not_in?: Maybe<Array<Scalars['String']>>;
    creator_contains?: Maybe<Scalars['String']>;
    creator_not_contains?: Maybe<Scalars['String']>;
    creator_starts_with?: Maybe<Scalars['String']>;
    creator_not_starts_with?: Maybe<Scalars['String']>;
    creator_ends_with?: Maybe<Scalars['String']>;
    creator_not_ends_with?: Maybe<Scalars['String']>;
    fundOwner?: Maybe<Scalars['String']>;
    fundOwner_not?: Maybe<Scalars['String']>;
    fundOwner_gt?: Maybe<Scalars['String']>;
    fundOwner_lt?: Maybe<Scalars['String']>;
    fundOwner_gte?: Maybe<Scalars['String']>;
    fundOwner_lte?: Maybe<Scalars['String']>;
    fundOwner_in?: Maybe<Array<Scalars['String']>>;
    fundOwner_not_in?: Maybe<Array<Scalars['String']>>;
    fundOwner_contains?: Maybe<Scalars['String']>;
    fundOwner_not_contains?: Maybe<Scalars['String']>;
    fundOwner_starts_with?: Maybe<Scalars['String']>;
    fundOwner_not_starts_with?: Maybe<Scalars['String']>;
    fundOwner_ends_with?: Maybe<Scalars['String']>;
    fundOwner_not_ends_with?: Maybe<Scalars['String']>;
    fundName?: Maybe<Scalars['String']>;
    fundName_not?: Maybe<Scalars['String']>;
    fundName_gt?: Maybe<Scalars['String']>;
    fundName_lt?: Maybe<Scalars['String']>;
    fundName_gte?: Maybe<Scalars['String']>;
    fundName_lte?: Maybe<Scalars['String']>;
    fundName_in?: Maybe<Array<Scalars['String']>>;
    fundName_not_in?: Maybe<Array<Scalars['String']>>;
    fundName_contains?: Maybe<Scalars['String']>;
    fundName_not_contains?: Maybe<Scalars['String']>;
    fundName_starts_with?: Maybe<Scalars['String']>;
    fundName_not_starts_with?: Maybe<Scalars['String']>;
    fundName_ends_with?: Maybe<Scalars['String']>;
    fundName_not_ends_with?: Maybe<Scalars['String']>;
    denominationAsset?: Maybe<Scalars['String']>;
    denominationAsset_not?: Maybe<Scalars['String']>;
    denominationAsset_gt?: Maybe<Scalars['String']>;
    denominationAsset_lt?: Maybe<Scalars['String']>;
    denominationAsset_gte?: Maybe<Scalars['String']>;
    denominationAsset_lte?: Maybe<Scalars['String']>;
    denominationAsset_in?: Maybe<Array<Scalars['String']>>;
    denominationAsset_not_in?: Maybe<Array<Scalars['String']>>;
    denominationAsset_contains?: Maybe<Scalars['String']>;
    denominationAsset_not_contains?: Maybe<Scalars['String']>;
    denominationAsset_starts_with?: Maybe<Scalars['String']>;
    denominationAsset_not_starts_with?: Maybe<Scalars['String']>;
    denominationAsset_ends_with?: Maybe<Scalars['String']>;
    denominationAsset_not_ends_with?: Maybe<Scalars['String']>;
    sharesActionTimelock?: Maybe<Scalars['BigInt']>;
    sharesActionTimelock_not?: Maybe<Scalars['BigInt']>;
    sharesActionTimelock_gt?: Maybe<Scalars['BigInt']>;
    sharesActionTimelock_lt?: Maybe<Scalars['BigInt']>;
    sharesActionTimelock_gte?: Maybe<Scalars['BigInt']>;
    sharesActionTimelock_lte?: Maybe<Scalars['BigInt']>;
    sharesActionTimelock_in?: Maybe<Array<Scalars['BigInt']>>;
    sharesActionTimelock_not_in?: Maybe<Array<Scalars['BigInt']>>;
    feeManagerConfigData?: Maybe<Scalars['String']>;
    feeManagerConfigData_not?: Maybe<Scalars['String']>;
    feeManagerConfigData_gt?: Maybe<Scalars['String']>;
    feeManagerConfigData_lt?: Maybe<Scalars['String']>;
    feeManagerConfigData_gte?: Maybe<Scalars['String']>;
    feeManagerConfigData_lte?: Maybe<Scalars['String']>;
    feeManagerConfigData_in?: Maybe<Array<Scalars['String']>>;
    feeManagerConfigData_not_in?: Maybe<Array<Scalars['String']>>;
    feeManagerConfigData_contains?: Maybe<Scalars['String']>;
    feeManagerConfigData_not_contains?: Maybe<Scalars['String']>;
    feeManagerConfigData_starts_with?: Maybe<Scalars['String']>;
    feeManagerConfigData_not_starts_with?: Maybe<Scalars['String']>;
    feeManagerConfigData_ends_with?: Maybe<Scalars['String']>;
    feeManagerConfigData_not_ends_with?: Maybe<Scalars['String']>;
    policyManagerConfigData?: Maybe<Scalars['String']>;
    policyManagerConfigData_not?: Maybe<Scalars['String']>;
    policyManagerConfigData_gt?: Maybe<Scalars['String']>;
    policyManagerConfigData_lt?: Maybe<Scalars['String']>;
    policyManagerConfigData_gte?: Maybe<Scalars['String']>;
    policyManagerConfigData_lte?: Maybe<Scalars['String']>;
    policyManagerConfigData_in?: Maybe<Array<Scalars['String']>>;
    policyManagerConfigData_not_in?: Maybe<Array<Scalars['String']>>;
    policyManagerConfigData_contains?: Maybe<Scalars['String']>;
    policyManagerConfigData_not_contains?: Maybe<Scalars['String']>;
    policyManagerConfigData_starts_with?: Maybe<Scalars['String']>;
    policyManagerConfigData_not_starts_with?: Maybe<Scalars['String']>;
    policyManagerConfigData_ends_with?: Maybe<Scalars['String']>;
    policyManagerConfigData_not_ends_with?: Maybe<Scalars['String']>;
    transaction?: Maybe<Scalars['String']>;
    transaction_not?: Maybe<Scalars['String']>;
    transaction_gt?: Maybe<Scalars['String']>;
    transaction_lt?: Maybe<Scalars['String']>;
    transaction_gte?: Maybe<Scalars['String']>;
    transaction_lte?: Maybe<Scalars['String']>;
    transaction_in?: Maybe<Array<Scalars['String']>>;
    transaction_not_in?: Maybe<Array<Scalars['String']>>;
    transaction_contains?: Maybe<Scalars['String']>;
    transaction_not_contains?: Maybe<Scalars['String']>;
    transaction_starts_with?: Maybe<Scalars['String']>;
    transaction_not_starts_with?: Maybe<Scalars['String']>;
    transaction_ends_with?: Maybe<Scalars['String']>;
    transaction_not_ends_with?: Maybe<Scalars['String']>;
};
export declare enum NewFundCreatedEvent_OrderBy {
    Id = "id",
    Fund = "fund",
    Timestamp = "timestamp",
    Comptroller = "comptroller",
    VaultProxy = "vaultProxy",
    Creator = "creator",
    FundOwner = "fundOwner",
    FundName = "fundName",
    DenominationAsset = "denominationAsset",
    SharesActionTimelock = "sharesActionTimelock",
    FeeManagerConfigData = "feeManagerConfigData",
    PolicyManagerConfigData = "policyManagerConfigData",
    Transaction = "transaction"
}
export declare type NominatedOwnerRemovedEvent = EventInterface & NetworkEventInterface & {
    __typename?: 'NominatedOwnerRemovedEvent';
    id: Scalars['ID'];
    timestamp: Scalars['BigInt'];
    transaction: Transaction;
    nominatedOwner: Scalars['String'];
};
export declare type NominatedOwnerRemovedEvent_Filter = {
    id?: Maybe<Scalars['ID']>;
    id_not?: Maybe<Scalars['ID']>;
    id_gt?: Maybe<Scalars['ID']>;
    id_lt?: Maybe<Scalars['ID']>;
    id_gte?: Maybe<Scalars['ID']>;
    id_lte?: Maybe<Scalars['ID']>;
    id_in?: Maybe<Array<Scalars['ID']>>;
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    timestamp?: Maybe<Scalars['BigInt']>;
    timestamp_not?: Maybe<Scalars['BigInt']>;
    timestamp_gt?: Maybe<Scalars['BigInt']>;
    timestamp_lt?: Maybe<Scalars['BigInt']>;
    timestamp_gte?: Maybe<Scalars['BigInt']>;
    timestamp_lte?: Maybe<Scalars['BigInt']>;
    timestamp_in?: Maybe<Array<Scalars['BigInt']>>;
    timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;
    transaction?: Maybe<Scalars['String']>;
    transaction_not?: Maybe<Scalars['String']>;
    transaction_gt?: Maybe<Scalars['String']>;
    transaction_lt?: Maybe<Scalars['String']>;
    transaction_gte?: Maybe<Scalars['String']>;
    transaction_lte?: Maybe<Scalars['String']>;
    transaction_in?: Maybe<Array<Scalars['String']>>;
    transaction_not_in?: Maybe<Array<Scalars['String']>>;
    transaction_contains?: Maybe<Scalars['String']>;
    transaction_not_contains?: Maybe<Scalars['String']>;
    transaction_starts_with?: Maybe<Scalars['String']>;
    transaction_not_starts_with?: Maybe<Scalars['String']>;
    transaction_ends_with?: Maybe<Scalars['String']>;
    transaction_not_ends_with?: Maybe<Scalars['String']>;
    nominatedOwner?: Maybe<Scalars['String']>;
    nominatedOwner_not?: Maybe<Scalars['String']>;
    nominatedOwner_gt?: Maybe<Scalars['String']>;
    nominatedOwner_lt?: Maybe<Scalars['String']>;
    nominatedOwner_gte?: Maybe<Scalars['String']>;
    nominatedOwner_lte?: Maybe<Scalars['String']>;
    nominatedOwner_in?: Maybe<Array<Scalars['String']>>;
    nominatedOwner_not_in?: Maybe<Array<Scalars['String']>>;
    nominatedOwner_contains?: Maybe<Scalars['String']>;
    nominatedOwner_not_contains?: Maybe<Scalars['String']>;
    nominatedOwner_starts_with?: Maybe<Scalars['String']>;
    nominatedOwner_not_starts_with?: Maybe<Scalars['String']>;
    nominatedOwner_ends_with?: Maybe<Scalars['String']>;
    nominatedOwner_not_ends_with?: Maybe<Scalars['String']>;
};
export declare enum NominatedOwnerRemovedEvent_OrderBy {
    Id = "id",
    Timestamp = "timestamp",
    Transaction = "transaction",
    NominatedOwner = "nominatedOwner"
}
export declare type NominatedOwnerSetEvent = EventInterface & NetworkEventInterface & {
    __typename?: 'NominatedOwnerSetEvent';
    id: Scalars['ID'];
    timestamp: Scalars['BigInt'];
    transaction: Transaction;
    nominatedOwner: Scalars['String'];
};
export declare type NominatedOwnerSetEvent_Filter = {
    id?: Maybe<Scalars['ID']>;
    id_not?: Maybe<Scalars['ID']>;
    id_gt?: Maybe<Scalars['ID']>;
    id_lt?: Maybe<Scalars['ID']>;
    id_gte?: Maybe<Scalars['ID']>;
    id_lte?: Maybe<Scalars['ID']>;
    id_in?: Maybe<Array<Scalars['ID']>>;
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    timestamp?: Maybe<Scalars['BigInt']>;
    timestamp_not?: Maybe<Scalars['BigInt']>;
    timestamp_gt?: Maybe<Scalars['BigInt']>;
    timestamp_lt?: Maybe<Scalars['BigInt']>;
    timestamp_gte?: Maybe<Scalars['BigInt']>;
    timestamp_lte?: Maybe<Scalars['BigInt']>;
    timestamp_in?: Maybe<Array<Scalars['BigInt']>>;
    timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;
    transaction?: Maybe<Scalars['String']>;
    transaction_not?: Maybe<Scalars['String']>;
    transaction_gt?: Maybe<Scalars['String']>;
    transaction_lt?: Maybe<Scalars['String']>;
    transaction_gte?: Maybe<Scalars['String']>;
    transaction_lte?: Maybe<Scalars['String']>;
    transaction_in?: Maybe<Array<Scalars['String']>>;
    transaction_not_in?: Maybe<Array<Scalars['String']>>;
    transaction_contains?: Maybe<Scalars['String']>;
    transaction_not_contains?: Maybe<Scalars['String']>;
    transaction_starts_with?: Maybe<Scalars['String']>;
    transaction_not_starts_with?: Maybe<Scalars['String']>;
    transaction_ends_with?: Maybe<Scalars['String']>;
    transaction_not_ends_with?: Maybe<Scalars['String']>;
    nominatedOwner?: Maybe<Scalars['String']>;
    nominatedOwner_not?: Maybe<Scalars['String']>;
    nominatedOwner_gt?: Maybe<Scalars['String']>;
    nominatedOwner_lt?: Maybe<Scalars['String']>;
    nominatedOwner_gte?: Maybe<Scalars['String']>;
    nominatedOwner_lte?: Maybe<Scalars['String']>;
    nominatedOwner_in?: Maybe<Array<Scalars['String']>>;
    nominatedOwner_not_in?: Maybe<Array<Scalars['String']>>;
    nominatedOwner_contains?: Maybe<Scalars['String']>;
    nominatedOwner_not_contains?: Maybe<Scalars['String']>;
    nominatedOwner_starts_with?: Maybe<Scalars['String']>;
    nominatedOwner_not_starts_with?: Maybe<Scalars['String']>;
    nominatedOwner_ends_with?: Maybe<Scalars['String']>;
    nominatedOwner_not_ends_with?: Maybe<Scalars['String']>;
};
export declare enum NominatedOwnerSetEvent_OrderBy {
    Id = "id",
    Timestamp = "timestamp",
    Transaction = "transaction",
    NominatedOwner = "nominatedOwner"
}
export declare enum OrderDirection {
    Asc = "asc",
    Desc = "desc"
}
export declare type OverridePauseSetEvent = EventInterface & FundEventInterface & {
    __typename?: 'OverridePauseSetEvent';
    id: Scalars['ID'];
    fund: Fund;
    timestamp: Scalars['BigInt'];
    transaction: Transaction;
    overridePause: Scalars['Boolean'];
};
export declare type OverridePauseSetEvent_Filter = {
    id?: Maybe<Scalars['ID']>;
    id_not?: Maybe<Scalars['ID']>;
    id_gt?: Maybe<Scalars['ID']>;
    id_lt?: Maybe<Scalars['ID']>;
    id_gte?: Maybe<Scalars['ID']>;
    id_lte?: Maybe<Scalars['ID']>;
    id_in?: Maybe<Array<Scalars['ID']>>;
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    fund?: Maybe<Scalars['String']>;
    fund_not?: Maybe<Scalars['String']>;
    fund_gt?: Maybe<Scalars['String']>;
    fund_lt?: Maybe<Scalars['String']>;
    fund_gte?: Maybe<Scalars['String']>;
    fund_lte?: Maybe<Scalars['String']>;
    fund_in?: Maybe<Array<Scalars['String']>>;
    fund_not_in?: Maybe<Array<Scalars['String']>>;
    fund_contains?: Maybe<Scalars['String']>;
    fund_not_contains?: Maybe<Scalars['String']>;
    fund_starts_with?: Maybe<Scalars['String']>;
    fund_not_starts_with?: Maybe<Scalars['String']>;
    fund_ends_with?: Maybe<Scalars['String']>;
    fund_not_ends_with?: Maybe<Scalars['String']>;
    timestamp?: Maybe<Scalars['BigInt']>;
    timestamp_not?: Maybe<Scalars['BigInt']>;
    timestamp_gt?: Maybe<Scalars['BigInt']>;
    timestamp_lt?: Maybe<Scalars['BigInt']>;
    timestamp_gte?: Maybe<Scalars['BigInt']>;
    timestamp_lte?: Maybe<Scalars['BigInt']>;
    timestamp_in?: Maybe<Array<Scalars['BigInt']>>;
    timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;
    transaction?: Maybe<Scalars['String']>;
    transaction_not?: Maybe<Scalars['String']>;
    transaction_gt?: Maybe<Scalars['String']>;
    transaction_lt?: Maybe<Scalars['String']>;
    transaction_gte?: Maybe<Scalars['String']>;
    transaction_lte?: Maybe<Scalars['String']>;
    transaction_in?: Maybe<Array<Scalars['String']>>;
    transaction_not_in?: Maybe<Array<Scalars['String']>>;
    transaction_contains?: Maybe<Scalars['String']>;
    transaction_not_contains?: Maybe<Scalars['String']>;
    transaction_starts_with?: Maybe<Scalars['String']>;
    transaction_not_starts_with?: Maybe<Scalars['String']>;
    transaction_ends_with?: Maybe<Scalars['String']>;
    transaction_not_ends_with?: Maybe<Scalars['String']>;
    overridePause?: Maybe<Scalars['Boolean']>;
    overridePause_not?: Maybe<Scalars['Boolean']>;
    overridePause_in?: Maybe<Array<Scalars['Boolean']>>;
    overridePause_not_in?: Maybe<Array<Scalars['Boolean']>>;
};
export declare enum OverridePauseSetEvent_OrderBy {
    Id = "id",
    Fund = "fund",
    Timestamp = "timestamp",
    Transaction = "transaction",
    OverridePause = "overridePause"
}
export declare type OwnerSetEvent = EventInterface & FundEventInterface & {
    __typename?: 'OwnerSetEvent';
    id: Scalars['ID'];
    fund: Fund;
    timestamp: Scalars['BigInt'];
    transaction: Transaction;
    prevOwner?: Maybe<Account>;
    nextOwner: Account;
};
export declare type OwnerSetEvent_Filter = {
    id?: Maybe<Scalars['ID']>;
    id_not?: Maybe<Scalars['ID']>;
    id_gt?: Maybe<Scalars['ID']>;
    id_lt?: Maybe<Scalars['ID']>;
    id_gte?: Maybe<Scalars['ID']>;
    id_lte?: Maybe<Scalars['ID']>;
    id_in?: Maybe<Array<Scalars['ID']>>;
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    fund?: Maybe<Scalars['String']>;
    fund_not?: Maybe<Scalars['String']>;
    fund_gt?: Maybe<Scalars['String']>;
    fund_lt?: Maybe<Scalars['String']>;
    fund_gte?: Maybe<Scalars['String']>;
    fund_lte?: Maybe<Scalars['String']>;
    fund_in?: Maybe<Array<Scalars['String']>>;
    fund_not_in?: Maybe<Array<Scalars['String']>>;
    fund_contains?: Maybe<Scalars['String']>;
    fund_not_contains?: Maybe<Scalars['String']>;
    fund_starts_with?: Maybe<Scalars['String']>;
    fund_not_starts_with?: Maybe<Scalars['String']>;
    fund_ends_with?: Maybe<Scalars['String']>;
    fund_not_ends_with?: Maybe<Scalars['String']>;
    timestamp?: Maybe<Scalars['BigInt']>;
    timestamp_not?: Maybe<Scalars['BigInt']>;
    timestamp_gt?: Maybe<Scalars['BigInt']>;
    timestamp_lt?: Maybe<Scalars['BigInt']>;
    timestamp_gte?: Maybe<Scalars['BigInt']>;
    timestamp_lte?: Maybe<Scalars['BigInt']>;
    timestamp_in?: Maybe<Array<Scalars['BigInt']>>;
    timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;
    transaction?: Maybe<Scalars['String']>;
    transaction_not?: Maybe<Scalars['String']>;
    transaction_gt?: Maybe<Scalars['String']>;
    transaction_lt?: Maybe<Scalars['String']>;
    transaction_gte?: Maybe<Scalars['String']>;
    transaction_lte?: Maybe<Scalars['String']>;
    transaction_in?: Maybe<Array<Scalars['String']>>;
    transaction_not_in?: Maybe<Array<Scalars['String']>>;
    transaction_contains?: Maybe<Scalars['String']>;
    transaction_not_contains?: Maybe<Scalars['String']>;
    transaction_starts_with?: Maybe<Scalars['String']>;
    transaction_not_starts_with?: Maybe<Scalars['String']>;
    transaction_ends_with?: Maybe<Scalars['String']>;
    transaction_not_ends_with?: Maybe<Scalars['String']>;
    prevOwner?: Maybe<Scalars['String']>;
    prevOwner_not?: Maybe<Scalars['String']>;
    prevOwner_gt?: Maybe<Scalars['String']>;
    prevOwner_lt?: Maybe<Scalars['String']>;
    prevOwner_gte?: Maybe<Scalars['String']>;
    prevOwner_lte?: Maybe<Scalars['String']>;
    prevOwner_in?: Maybe<Array<Scalars['String']>>;
    prevOwner_not_in?: Maybe<Array<Scalars['String']>>;
    prevOwner_contains?: Maybe<Scalars['String']>;
    prevOwner_not_contains?: Maybe<Scalars['String']>;
    prevOwner_starts_with?: Maybe<Scalars['String']>;
    prevOwner_not_starts_with?: Maybe<Scalars['String']>;
    prevOwner_ends_with?: Maybe<Scalars['String']>;
    prevOwner_not_ends_with?: Maybe<Scalars['String']>;
    nextOwner?: Maybe<Scalars['String']>;
    nextOwner_not?: Maybe<Scalars['String']>;
    nextOwner_gt?: Maybe<Scalars['String']>;
    nextOwner_lt?: Maybe<Scalars['String']>;
    nextOwner_gte?: Maybe<Scalars['String']>;
    nextOwner_lte?: Maybe<Scalars['String']>;
    nextOwner_in?: Maybe<Array<Scalars['String']>>;
    nextOwner_not_in?: Maybe<Array<Scalars['String']>>;
    nextOwner_contains?: Maybe<Scalars['String']>;
    nextOwner_not_contains?: Maybe<Scalars['String']>;
    nextOwner_starts_with?: Maybe<Scalars['String']>;
    nextOwner_not_starts_with?: Maybe<Scalars['String']>;
    nextOwner_ends_with?: Maybe<Scalars['String']>;
    nextOwner_not_ends_with?: Maybe<Scalars['String']>;
};
export declare enum OwnerSetEvent_OrderBy {
    Id = "id",
    Fund = "fund",
    Timestamp = "timestamp",
    Transaction = "transaction",
    PrevOwner = "prevOwner",
    NextOwner = "nextOwner"
}
export declare type OwnershipTransferredEvent = EventInterface & NetworkEventInterface & {
    __typename?: 'OwnershipTransferredEvent';
    id: Scalars['ID'];
    timestamp: Scalars['BigInt'];
    transaction: Transaction;
    previousOwner: Scalars['String'];
    newOwner: Scalars['String'];
};
export declare type OwnershipTransferredEvent_Filter = {
    id?: Maybe<Scalars['ID']>;
    id_not?: Maybe<Scalars['ID']>;
    id_gt?: Maybe<Scalars['ID']>;
    id_lt?: Maybe<Scalars['ID']>;
    id_gte?: Maybe<Scalars['ID']>;
    id_lte?: Maybe<Scalars['ID']>;
    id_in?: Maybe<Array<Scalars['ID']>>;
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    timestamp?: Maybe<Scalars['BigInt']>;
    timestamp_not?: Maybe<Scalars['BigInt']>;
    timestamp_gt?: Maybe<Scalars['BigInt']>;
    timestamp_lt?: Maybe<Scalars['BigInt']>;
    timestamp_gte?: Maybe<Scalars['BigInt']>;
    timestamp_lte?: Maybe<Scalars['BigInt']>;
    timestamp_in?: Maybe<Array<Scalars['BigInt']>>;
    timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;
    transaction?: Maybe<Scalars['String']>;
    transaction_not?: Maybe<Scalars['String']>;
    transaction_gt?: Maybe<Scalars['String']>;
    transaction_lt?: Maybe<Scalars['String']>;
    transaction_gte?: Maybe<Scalars['String']>;
    transaction_lte?: Maybe<Scalars['String']>;
    transaction_in?: Maybe<Array<Scalars['String']>>;
    transaction_not_in?: Maybe<Array<Scalars['String']>>;
    transaction_contains?: Maybe<Scalars['String']>;
    transaction_not_contains?: Maybe<Scalars['String']>;
    transaction_starts_with?: Maybe<Scalars['String']>;
    transaction_not_starts_with?: Maybe<Scalars['String']>;
    transaction_ends_with?: Maybe<Scalars['String']>;
    transaction_not_ends_with?: Maybe<Scalars['String']>;
    previousOwner?: Maybe<Scalars['String']>;
    previousOwner_not?: Maybe<Scalars['String']>;
    previousOwner_gt?: Maybe<Scalars['String']>;
    previousOwner_lt?: Maybe<Scalars['String']>;
    previousOwner_gte?: Maybe<Scalars['String']>;
    previousOwner_lte?: Maybe<Scalars['String']>;
    previousOwner_in?: Maybe<Array<Scalars['String']>>;
    previousOwner_not_in?: Maybe<Array<Scalars['String']>>;
    previousOwner_contains?: Maybe<Scalars['String']>;
    previousOwner_not_contains?: Maybe<Scalars['String']>;
    previousOwner_starts_with?: Maybe<Scalars['String']>;
    previousOwner_not_starts_with?: Maybe<Scalars['String']>;
    previousOwner_ends_with?: Maybe<Scalars['String']>;
    previousOwner_not_ends_with?: Maybe<Scalars['String']>;
    newOwner?: Maybe<Scalars['String']>;
    newOwner_not?: Maybe<Scalars['String']>;
    newOwner_gt?: Maybe<Scalars['String']>;
    newOwner_lt?: Maybe<Scalars['String']>;
    newOwner_gte?: Maybe<Scalars['String']>;
    newOwner_lte?: Maybe<Scalars['String']>;
    newOwner_in?: Maybe<Array<Scalars['String']>>;
    newOwner_not_in?: Maybe<Array<Scalars['String']>>;
    newOwner_contains?: Maybe<Scalars['String']>;
    newOwner_not_contains?: Maybe<Scalars['String']>;
    newOwner_starts_with?: Maybe<Scalars['String']>;
    newOwner_not_starts_with?: Maybe<Scalars['String']>;
    newOwner_ends_with?: Maybe<Scalars['String']>;
    newOwner_not_ends_with?: Maybe<Scalars['String']>;
};
export declare enum OwnershipTransferredEvent_OrderBy {
    Id = "id",
    Timestamp = "timestamp",
    Transaction = "transaction",
    PreviousOwner = "previousOwner",
    NewOwner = "newOwner"
}
export declare type PerformanceFeeActivatedForFundEvent = EventInterface & FundEventInterface & {
    __typename?: 'PerformanceFeeActivatedForFundEvent';
    id: Scalars['ID'];
    fund: Fund;
    timestamp: Scalars['BigInt'];
    transaction: Transaction;
    comptrollerProxy: Scalars['String'];
    highWaterMark: Scalars['BigDecimal'];
};
export declare type PerformanceFeeActivatedForFundEvent_Filter = {
    id?: Maybe<Scalars['ID']>;
    id_not?: Maybe<Scalars['ID']>;
    id_gt?: Maybe<Scalars['ID']>;
    id_lt?: Maybe<Scalars['ID']>;
    id_gte?: Maybe<Scalars['ID']>;
    id_lte?: Maybe<Scalars['ID']>;
    id_in?: Maybe<Array<Scalars['ID']>>;
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    fund?: Maybe<Scalars['String']>;
    fund_not?: Maybe<Scalars['String']>;
    fund_gt?: Maybe<Scalars['String']>;
    fund_lt?: Maybe<Scalars['String']>;
    fund_gte?: Maybe<Scalars['String']>;
    fund_lte?: Maybe<Scalars['String']>;
    fund_in?: Maybe<Array<Scalars['String']>>;
    fund_not_in?: Maybe<Array<Scalars['String']>>;
    fund_contains?: Maybe<Scalars['String']>;
    fund_not_contains?: Maybe<Scalars['String']>;
    fund_starts_with?: Maybe<Scalars['String']>;
    fund_not_starts_with?: Maybe<Scalars['String']>;
    fund_ends_with?: Maybe<Scalars['String']>;
    fund_not_ends_with?: Maybe<Scalars['String']>;
    timestamp?: Maybe<Scalars['BigInt']>;
    timestamp_not?: Maybe<Scalars['BigInt']>;
    timestamp_gt?: Maybe<Scalars['BigInt']>;
    timestamp_lt?: Maybe<Scalars['BigInt']>;
    timestamp_gte?: Maybe<Scalars['BigInt']>;
    timestamp_lte?: Maybe<Scalars['BigInt']>;
    timestamp_in?: Maybe<Array<Scalars['BigInt']>>;
    timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;
    transaction?: Maybe<Scalars['String']>;
    transaction_not?: Maybe<Scalars['String']>;
    transaction_gt?: Maybe<Scalars['String']>;
    transaction_lt?: Maybe<Scalars['String']>;
    transaction_gte?: Maybe<Scalars['String']>;
    transaction_lte?: Maybe<Scalars['String']>;
    transaction_in?: Maybe<Array<Scalars['String']>>;
    transaction_not_in?: Maybe<Array<Scalars['String']>>;
    transaction_contains?: Maybe<Scalars['String']>;
    transaction_not_contains?: Maybe<Scalars['String']>;
    transaction_starts_with?: Maybe<Scalars['String']>;
    transaction_not_starts_with?: Maybe<Scalars['String']>;
    transaction_ends_with?: Maybe<Scalars['String']>;
    transaction_not_ends_with?: Maybe<Scalars['String']>;
    comptrollerProxy?: Maybe<Scalars['String']>;
    comptrollerProxy_not?: Maybe<Scalars['String']>;
    comptrollerProxy_gt?: Maybe<Scalars['String']>;
    comptrollerProxy_lt?: Maybe<Scalars['String']>;
    comptrollerProxy_gte?: Maybe<Scalars['String']>;
    comptrollerProxy_lte?: Maybe<Scalars['String']>;
    comptrollerProxy_in?: Maybe<Array<Scalars['String']>>;
    comptrollerProxy_not_in?: Maybe<Array<Scalars['String']>>;
    comptrollerProxy_contains?: Maybe<Scalars['String']>;
    comptrollerProxy_not_contains?: Maybe<Scalars['String']>;
    comptrollerProxy_starts_with?: Maybe<Scalars['String']>;
    comptrollerProxy_not_starts_with?: Maybe<Scalars['String']>;
    comptrollerProxy_ends_with?: Maybe<Scalars['String']>;
    comptrollerProxy_not_ends_with?: Maybe<Scalars['String']>;
    highWaterMark?: Maybe<Scalars['BigDecimal']>;
    highWaterMark_not?: Maybe<Scalars['BigDecimal']>;
    highWaterMark_gt?: Maybe<Scalars['BigDecimal']>;
    highWaterMark_lt?: Maybe<Scalars['BigDecimal']>;
    highWaterMark_gte?: Maybe<Scalars['BigDecimal']>;
    highWaterMark_lte?: Maybe<Scalars['BigDecimal']>;
    highWaterMark_in?: Maybe<Array<Scalars['BigDecimal']>>;
    highWaterMark_not_in?: Maybe<Array<Scalars['BigDecimal']>>;
};
export declare enum PerformanceFeeActivatedForFundEvent_OrderBy {
    Id = "id",
    Fund = "fund",
    Timestamp = "timestamp",
    Transaction = "transaction",
    ComptrollerProxy = "comptrollerProxy",
    HighWaterMark = "highWaterMark"
}
export declare type PerformanceFeePaidOutEvent = EventInterface & FundEventInterface & {
    __typename?: 'PerformanceFeePaidOutEvent';
    id: Scalars['ID'];
    fund: Fund;
    timestamp: Scalars['BigInt'];
    transaction: Transaction;
    comptrollerProxy: Scalars['String'];
    prevHighWaterMark: Scalars['BigDecimal'];
    nextHighWaterMark: Scalars['BigDecimal'];
};
export declare type PerformanceFeePaidOutEvent_Filter = {
    id?: Maybe<Scalars['ID']>;
    id_not?: Maybe<Scalars['ID']>;
    id_gt?: Maybe<Scalars['ID']>;
    id_lt?: Maybe<Scalars['ID']>;
    id_gte?: Maybe<Scalars['ID']>;
    id_lte?: Maybe<Scalars['ID']>;
    id_in?: Maybe<Array<Scalars['ID']>>;
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    fund?: Maybe<Scalars['String']>;
    fund_not?: Maybe<Scalars['String']>;
    fund_gt?: Maybe<Scalars['String']>;
    fund_lt?: Maybe<Scalars['String']>;
    fund_gte?: Maybe<Scalars['String']>;
    fund_lte?: Maybe<Scalars['String']>;
    fund_in?: Maybe<Array<Scalars['String']>>;
    fund_not_in?: Maybe<Array<Scalars['String']>>;
    fund_contains?: Maybe<Scalars['String']>;
    fund_not_contains?: Maybe<Scalars['String']>;
    fund_starts_with?: Maybe<Scalars['String']>;
    fund_not_starts_with?: Maybe<Scalars['String']>;
    fund_ends_with?: Maybe<Scalars['String']>;
    fund_not_ends_with?: Maybe<Scalars['String']>;
    timestamp?: Maybe<Scalars['BigInt']>;
    timestamp_not?: Maybe<Scalars['BigInt']>;
    timestamp_gt?: Maybe<Scalars['BigInt']>;
    timestamp_lt?: Maybe<Scalars['BigInt']>;
    timestamp_gte?: Maybe<Scalars['BigInt']>;
    timestamp_lte?: Maybe<Scalars['BigInt']>;
    timestamp_in?: Maybe<Array<Scalars['BigInt']>>;
    timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;
    transaction?: Maybe<Scalars['String']>;
    transaction_not?: Maybe<Scalars['String']>;
    transaction_gt?: Maybe<Scalars['String']>;
    transaction_lt?: Maybe<Scalars['String']>;
    transaction_gte?: Maybe<Scalars['String']>;
    transaction_lte?: Maybe<Scalars['String']>;
    transaction_in?: Maybe<Array<Scalars['String']>>;
    transaction_not_in?: Maybe<Array<Scalars['String']>>;
    transaction_contains?: Maybe<Scalars['String']>;
    transaction_not_contains?: Maybe<Scalars['String']>;
    transaction_starts_with?: Maybe<Scalars['String']>;
    transaction_not_starts_with?: Maybe<Scalars['String']>;
    transaction_ends_with?: Maybe<Scalars['String']>;
    transaction_not_ends_with?: Maybe<Scalars['String']>;
    comptrollerProxy?: Maybe<Scalars['String']>;
    comptrollerProxy_not?: Maybe<Scalars['String']>;
    comptrollerProxy_gt?: Maybe<Scalars['String']>;
    comptrollerProxy_lt?: Maybe<Scalars['String']>;
    comptrollerProxy_gte?: Maybe<Scalars['String']>;
    comptrollerProxy_lte?: Maybe<Scalars['String']>;
    comptrollerProxy_in?: Maybe<Array<Scalars['String']>>;
    comptrollerProxy_not_in?: Maybe<Array<Scalars['String']>>;
    comptrollerProxy_contains?: Maybe<Scalars['String']>;
    comptrollerProxy_not_contains?: Maybe<Scalars['String']>;
    comptrollerProxy_starts_with?: Maybe<Scalars['String']>;
    comptrollerProxy_not_starts_with?: Maybe<Scalars['String']>;
    comptrollerProxy_ends_with?: Maybe<Scalars['String']>;
    comptrollerProxy_not_ends_with?: Maybe<Scalars['String']>;
    prevHighWaterMark?: Maybe<Scalars['BigDecimal']>;
    prevHighWaterMark_not?: Maybe<Scalars['BigDecimal']>;
    prevHighWaterMark_gt?: Maybe<Scalars['BigDecimal']>;
    prevHighWaterMark_lt?: Maybe<Scalars['BigDecimal']>;
    prevHighWaterMark_gte?: Maybe<Scalars['BigDecimal']>;
    prevHighWaterMark_lte?: Maybe<Scalars['BigDecimal']>;
    prevHighWaterMark_in?: Maybe<Array<Scalars['BigDecimal']>>;
    prevHighWaterMark_not_in?: Maybe<Array<Scalars['BigDecimal']>>;
    nextHighWaterMark?: Maybe<Scalars['BigDecimal']>;
    nextHighWaterMark_not?: Maybe<Scalars['BigDecimal']>;
    nextHighWaterMark_gt?: Maybe<Scalars['BigDecimal']>;
    nextHighWaterMark_lt?: Maybe<Scalars['BigDecimal']>;
    nextHighWaterMark_gte?: Maybe<Scalars['BigDecimal']>;
    nextHighWaterMark_lte?: Maybe<Scalars['BigDecimal']>;
    nextHighWaterMark_in?: Maybe<Array<Scalars['BigDecimal']>>;
    nextHighWaterMark_not_in?: Maybe<Array<Scalars['BigDecimal']>>;
};
export declare enum PerformanceFeePaidOutEvent_OrderBy {
    Id = "id",
    Fund = "fund",
    Timestamp = "timestamp",
    Transaction = "transaction",
    ComptrollerProxy = "comptrollerProxy",
    PrevHighWaterMark = "prevHighWaterMark",
    NextHighWaterMark = "nextHighWaterMark"
}
export declare type PerformanceFeePerformanceUpdatedEvent = EventInterface & FundEventInterface & {
    __typename?: 'PerformanceFeePerformanceUpdatedEvent';
    id: Scalars['ID'];
    fund: Fund;
    timestamp: Scalars['BigInt'];
    transaction: Transaction;
    comptrollerProxy: Scalars['String'];
    prevAggregateValueDue: Scalars['BigDecimal'];
    nextAggregateValueDue: Scalars['BigDecimal'];
    sharesOutstandingDiff: Scalars['BigDecimal'];
};
export declare type PerformanceFeePerformanceUpdatedEvent_Filter = {
    id?: Maybe<Scalars['ID']>;
    id_not?: Maybe<Scalars['ID']>;
    id_gt?: Maybe<Scalars['ID']>;
    id_lt?: Maybe<Scalars['ID']>;
    id_gte?: Maybe<Scalars['ID']>;
    id_lte?: Maybe<Scalars['ID']>;
    id_in?: Maybe<Array<Scalars['ID']>>;
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    fund?: Maybe<Scalars['String']>;
    fund_not?: Maybe<Scalars['String']>;
    fund_gt?: Maybe<Scalars['String']>;
    fund_lt?: Maybe<Scalars['String']>;
    fund_gte?: Maybe<Scalars['String']>;
    fund_lte?: Maybe<Scalars['String']>;
    fund_in?: Maybe<Array<Scalars['String']>>;
    fund_not_in?: Maybe<Array<Scalars['String']>>;
    fund_contains?: Maybe<Scalars['String']>;
    fund_not_contains?: Maybe<Scalars['String']>;
    fund_starts_with?: Maybe<Scalars['String']>;
    fund_not_starts_with?: Maybe<Scalars['String']>;
    fund_ends_with?: Maybe<Scalars['String']>;
    fund_not_ends_with?: Maybe<Scalars['String']>;
    timestamp?: Maybe<Scalars['BigInt']>;
    timestamp_not?: Maybe<Scalars['BigInt']>;
    timestamp_gt?: Maybe<Scalars['BigInt']>;
    timestamp_lt?: Maybe<Scalars['BigInt']>;
    timestamp_gte?: Maybe<Scalars['BigInt']>;
    timestamp_lte?: Maybe<Scalars['BigInt']>;
    timestamp_in?: Maybe<Array<Scalars['BigInt']>>;
    timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;
    transaction?: Maybe<Scalars['String']>;
    transaction_not?: Maybe<Scalars['String']>;
    transaction_gt?: Maybe<Scalars['String']>;
    transaction_lt?: Maybe<Scalars['String']>;
    transaction_gte?: Maybe<Scalars['String']>;
    transaction_lte?: Maybe<Scalars['String']>;
    transaction_in?: Maybe<Array<Scalars['String']>>;
    transaction_not_in?: Maybe<Array<Scalars['String']>>;
    transaction_contains?: Maybe<Scalars['String']>;
    transaction_not_contains?: Maybe<Scalars['String']>;
    transaction_starts_with?: Maybe<Scalars['String']>;
    transaction_not_starts_with?: Maybe<Scalars['String']>;
    transaction_ends_with?: Maybe<Scalars['String']>;
    transaction_not_ends_with?: Maybe<Scalars['String']>;
    comptrollerProxy?: Maybe<Scalars['String']>;
    comptrollerProxy_not?: Maybe<Scalars['String']>;
    comptrollerProxy_gt?: Maybe<Scalars['String']>;
    comptrollerProxy_lt?: Maybe<Scalars['String']>;
    comptrollerProxy_gte?: Maybe<Scalars['String']>;
    comptrollerProxy_lte?: Maybe<Scalars['String']>;
    comptrollerProxy_in?: Maybe<Array<Scalars['String']>>;
    comptrollerProxy_not_in?: Maybe<Array<Scalars['String']>>;
    comptrollerProxy_contains?: Maybe<Scalars['String']>;
    comptrollerProxy_not_contains?: Maybe<Scalars['String']>;
    comptrollerProxy_starts_with?: Maybe<Scalars['String']>;
    comptrollerProxy_not_starts_with?: Maybe<Scalars['String']>;
    comptrollerProxy_ends_with?: Maybe<Scalars['String']>;
    comptrollerProxy_not_ends_with?: Maybe<Scalars['String']>;
    prevAggregateValueDue?: Maybe<Scalars['BigDecimal']>;
    prevAggregateValueDue_not?: Maybe<Scalars['BigDecimal']>;
    prevAggregateValueDue_gt?: Maybe<Scalars['BigDecimal']>;
    prevAggregateValueDue_lt?: Maybe<Scalars['BigDecimal']>;
    prevAggregateValueDue_gte?: Maybe<Scalars['BigDecimal']>;
    prevAggregateValueDue_lte?: Maybe<Scalars['BigDecimal']>;
    prevAggregateValueDue_in?: Maybe<Array<Scalars['BigDecimal']>>;
    prevAggregateValueDue_not_in?: Maybe<Array<Scalars['BigDecimal']>>;
    nextAggregateValueDue?: Maybe<Scalars['BigDecimal']>;
    nextAggregateValueDue_not?: Maybe<Scalars['BigDecimal']>;
    nextAggregateValueDue_gt?: Maybe<Scalars['BigDecimal']>;
    nextAggregateValueDue_lt?: Maybe<Scalars['BigDecimal']>;
    nextAggregateValueDue_gte?: Maybe<Scalars['BigDecimal']>;
    nextAggregateValueDue_lte?: Maybe<Scalars['BigDecimal']>;
    nextAggregateValueDue_in?: Maybe<Array<Scalars['BigDecimal']>>;
    nextAggregateValueDue_not_in?: Maybe<Array<Scalars['BigDecimal']>>;
    sharesOutstandingDiff?: Maybe<Scalars['BigDecimal']>;
    sharesOutstandingDiff_not?: Maybe<Scalars['BigDecimal']>;
    sharesOutstandingDiff_gt?: Maybe<Scalars['BigDecimal']>;
    sharesOutstandingDiff_lt?: Maybe<Scalars['BigDecimal']>;
    sharesOutstandingDiff_gte?: Maybe<Scalars['BigDecimal']>;
    sharesOutstandingDiff_lte?: Maybe<Scalars['BigDecimal']>;
    sharesOutstandingDiff_in?: Maybe<Array<Scalars['BigDecimal']>>;
    sharesOutstandingDiff_not_in?: Maybe<Array<Scalars['BigDecimal']>>;
};
export declare enum PerformanceFeePerformanceUpdatedEvent_OrderBy {
    Id = "id",
    Fund = "fund",
    Timestamp = "timestamp",
    Transaction = "transaction",
    ComptrollerProxy = "comptrollerProxy",
    PrevAggregateValueDue = "prevAggregateValueDue",
    NextAggregateValueDue = "nextAggregateValueDue",
    SharesOutstandingDiff = "sharesOutstandingDiff"
}
export declare type PerformanceFeeSetting = FeeSettingInterface & {
    __typename?: 'PerformanceFeeSetting';
    id: Scalars['ID'];
    fee: Fee;
    comptroller: ComptrollerProxy;
    rate: Scalars['BigDecimal'];
    period: Scalars['BigInt'];
    activated: Scalars['BigInt'];
    timestamp: Scalars['BigInt'];
    events: Array<FundEventInterface>;
};
export declare type PerformanceFeeSettingEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<FundEventInterface_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<FundEventInterface_Filter>;
};
export declare type PerformanceFeeSetting_Filter = {
    id?: Maybe<Scalars['ID']>;
    id_not?: Maybe<Scalars['ID']>;
    id_gt?: Maybe<Scalars['ID']>;
    id_lt?: Maybe<Scalars['ID']>;
    id_gte?: Maybe<Scalars['ID']>;
    id_lte?: Maybe<Scalars['ID']>;
    id_in?: Maybe<Array<Scalars['ID']>>;
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    fee?: Maybe<Scalars['String']>;
    fee_not?: Maybe<Scalars['String']>;
    fee_gt?: Maybe<Scalars['String']>;
    fee_lt?: Maybe<Scalars['String']>;
    fee_gte?: Maybe<Scalars['String']>;
    fee_lte?: Maybe<Scalars['String']>;
    fee_in?: Maybe<Array<Scalars['String']>>;
    fee_not_in?: Maybe<Array<Scalars['String']>>;
    fee_contains?: Maybe<Scalars['String']>;
    fee_not_contains?: Maybe<Scalars['String']>;
    fee_starts_with?: Maybe<Scalars['String']>;
    fee_not_starts_with?: Maybe<Scalars['String']>;
    fee_ends_with?: Maybe<Scalars['String']>;
    fee_not_ends_with?: Maybe<Scalars['String']>;
    comptroller?: Maybe<Scalars['String']>;
    comptroller_not?: Maybe<Scalars['String']>;
    comptroller_gt?: Maybe<Scalars['String']>;
    comptroller_lt?: Maybe<Scalars['String']>;
    comptroller_gte?: Maybe<Scalars['String']>;
    comptroller_lte?: Maybe<Scalars['String']>;
    comptroller_in?: Maybe<Array<Scalars['String']>>;
    comptroller_not_in?: Maybe<Array<Scalars['String']>>;
    comptroller_contains?: Maybe<Scalars['String']>;
    comptroller_not_contains?: Maybe<Scalars['String']>;
    comptroller_starts_with?: Maybe<Scalars['String']>;
    comptroller_not_starts_with?: Maybe<Scalars['String']>;
    comptroller_ends_with?: Maybe<Scalars['String']>;
    comptroller_not_ends_with?: Maybe<Scalars['String']>;
    rate?: Maybe<Scalars['BigDecimal']>;
    rate_not?: Maybe<Scalars['BigDecimal']>;
    rate_gt?: Maybe<Scalars['BigDecimal']>;
    rate_lt?: Maybe<Scalars['BigDecimal']>;
    rate_gte?: Maybe<Scalars['BigDecimal']>;
    rate_lte?: Maybe<Scalars['BigDecimal']>;
    rate_in?: Maybe<Array<Scalars['BigDecimal']>>;
    rate_not_in?: Maybe<Array<Scalars['BigDecimal']>>;
    period?: Maybe<Scalars['BigInt']>;
    period_not?: Maybe<Scalars['BigInt']>;
    period_gt?: Maybe<Scalars['BigInt']>;
    period_lt?: Maybe<Scalars['BigInt']>;
    period_gte?: Maybe<Scalars['BigInt']>;
    period_lte?: Maybe<Scalars['BigInt']>;
    period_in?: Maybe<Array<Scalars['BigInt']>>;
    period_not_in?: Maybe<Array<Scalars['BigInt']>>;
    activated?: Maybe<Scalars['BigInt']>;
    activated_not?: Maybe<Scalars['BigInt']>;
    activated_gt?: Maybe<Scalars['BigInt']>;
    activated_lt?: Maybe<Scalars['BigInt']>;
    activated_gte?: Maybe<Scalars['BigInt']>;
    activated_lte?: Maybe<Scalars['BigInt']>;
    activated_in?: Maybe<Array<Scalars['BigInt']>>;
    activated_not_in?: Maybe<Array<Scalars['BigInt']>>;
    timestamp?: Maybe<Scalars['BigInt']>;
    timestamp_not?: Maybe<Scalars['BigInt']>;
    timestamp_gt?: Maybe<Scalars['BigInt']>;
    timestamp_lt?: Maybe<Scalars['BigInt']>;
    timestamp_gte?: Maybe<Scalars['BigInt']>;
    timestamp_lte?: Maybe<Scalars['BigInt']>;
    timestamp_in?: Maybe<Array<Scalars['BigInt']>>;
    timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;
    events?: Maybe<Array<Scalars['String']>>;
    events_not?: Maybe<Array<Scalars['String']>>;
    events_contains?: Maybe<Array<Scalars['String']>>;
    events_not_contains?: Maybe<Array<Scalars['String']>>;
};
export declare enum PerformanceFeeSetting_OrderBy {
    Id = "id",
    Fee = "fee",
    Comptroller = "comptroller",
    Rate = "rate",
    Period = "period",
    Activated = "activated",
    Timestamp = "timestamp",
    Events = "events"
}
export declare type PerformanceFeeSettingsAddedEvent = EventInterface & ComptrollerEventInterface & {
    __typename?: 'PerformanceFeeSettingsAddedEvent';
    id: Scalars['ID'];
    timestamp: Scalars['BigInt'];
    transaction: Transaction;
    comptroller: ComptrollerProxy;
    rate: Scalars['BigDecimal'];
    period: Scalars['BigInt'];
};
export declare type PerformanceFeeSettingsAddedEvent_Filter = {
    id?: Maybe<Scalars['ID']>;
    id_not?: Maybe<Scalars['ID']>;
    id_gt?: Maybe<Scalars['ID']>;
    id_lt?: Maybe<Scalars['ID']>;
    id_gte?: Maybe<Scalars['ID']>;
    id_lte?: Maybe<Scalars['ID']>;
    id_in?: Maybe<Array<Scalars['ID']>>;
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    timestamp?: Maybe<Scalars['BigInt']>;
    timestamp_not?: Maybe<Scalars['BigInt']>;
    timestamp_gt?: Maybe<Scalars['BigInt']>;
    timestamp_lt?: Maybe<Scalars['BigInt']>;
    timestamp_gte?: Maybe<Scalars['BigInt']>;
    timestamp_lte?: Maybe<Scalars['BigInt']>;
    timestamp_in?: Maybe<Array<Scalars['BigInt']>>;
    timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;
    transaction?: Maybe<Scalars['String']>;
    transaction_not?: Maybe<Scalars['String']>;
    transaction_gt?: Maybe<Scalars['String']>;
    transaction_lt?: Maybe<Scalars['String']>;
    transaction_gte?: Maybe<Scalars['String']>;
    transaction_lte?: Maybe<Scalars['String']>;
    transaction_in?: Maybe<Array<Scalars['String']>>;
    transaction_not_in?: Maybe<Array<Scalars['String']>>;
    transaction_contains?: Maybe<Scalars['String']>;
    transaction_not_contains?: Maybe<Scalars['String']>;
    transaction_starts_with?: Maybe<Scalars['String']>;
    transaction_not_starts_with?: Maybe<Scalars['String']>;
    transaction_ends_with?: Maybe<Scalars['String']>;
    transaction_not_ends_with?: Maybe<Scalars['String']>;
    comptroller?: Maybe<Scalars['String']>;
    comptroller_not?: Maybe<Scalars['String']>;
    comptroller_gt?: Maybe<Scalars['String']>;
    comptroller_lt?: Maybe<Scalars['String']>;
    comptroller_gte?: Maybe<Scalars['String']>;
    comptroller_lte?: Maybe<Scalars['String']>;
    comptroller_in?: Maybe<Array<Scalars['String']>>;
    comptroller_not_in?: Maybe<Array<Scalars['String']>>;
    comptroller_contains?: Maybe<Scalars['String']>;
    comptroller_not_contains?: Maybe<Scalars['String']>;
    comptroller_starts_with?: Maybe<Scalars['String']>;
    comptroller_not_starts_with?: Maybe<Scalars['String']>;
    comptroller_ends_with?: Maybe<Scalars['String']>;
    comptroller_not_ends_with?: Maybe<Scalars['String']>;
    rate?: Maybe<Scalars['BigDecimal']>;
    rate_not?: Maybe<Scalars['BigDecimal']>;
    rate_gt?: Maybe<Scalars['BigDecimal']>;
    rate_lt?: Maybe<Scalars['BigDecimal']>;
    rate_gte?: Maybe<Scalars['BigDecimal']>;
    rate_lte?: Maybe<Scalars['BigDecimal']>;
    rate_in?: Maybe<Array<Scalars['BigDecimal']>>;
    rate_not_in?: Maybe<Array<Scalars['BigDecimal']>>;
    period?: Maybe<Scalars['BigInt']>;
    period_not?: Maybe<Scalars['BigInt']>;
    period_gt?: Maybe<Scalars['BigInt']>;
    period_lt?: Maybe<Scalars['BigInt']>;
    period_gte?: Maybe<Scalars['BigInt']>;
    period_lte?: Maybe<Scalars['BigInt']>;
    period_in?: Maybe<Array<Scalars['BigInt']>>;
    period_not_in?: Maybe<Array<Scalars['BigInt']>>;
};
export declare enum PerformanceFeeSettingsAddedEvent_OrderBy {
    Id = "id",
    Timestamp = "timestamp",
    Transaction = "transaction",
    Comptroller = "comptroller",
    Rate = "rate",
    Period = "period"
}
export declare type PerformanceFeeSharePriceUpdatedEvent = EventInterface & FundEventInterface & {
    __typename?: 'PerformanceFeeSharePriceUpdatedEvent';
    id: Scalars['ID'];
    fund: Fund;
    timestamp: Scalars['BigInt'];
    transaction: Transaction;
    comptrollerProxy: Scalars['String'];
    prevSharePrice: Scalars['BigDecimal'];
    nextSharePrice: Scalars['BigDecimal'];
};
export declare type PerformanceFeeSharePriceUpdatedEvent_Filter = {
    id?: Maybe<Scalars['ID']>;
    id_not?: Maybe<Scalars['ID']>;
    id_gt?: Maybe<Scalars['ID']>;
    id_lt?: Maybe<Scalars['ID']>;
    id_gte?: Maybe<Scalars['ID']>;
    id_lte?: Maybe<Scalars['ID']>;
    id_in?: Maybe<Array<Scalars['ID']>>;
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    fund?: Maybe<Scalars['String']>;
    fund_not?: Maybe<Scalars['String']>;
    fund_gt?: Maybe<Scalars['String']>;
    fund_lt?: Maybe<Scalars['String']>;
    fund_gte?: Maybe<Scalars['String']>;
    fund_lte?: Maybe<Scalars['String']>;
    fund_in?: Maybe<Array<Scalars['String']>>;
    fund_not_in?: Maybe<Array<Scalars['String']>>;
    fund_contains?: Maybe<Scalars['String']>;
    fund_not_contains?: Maybe<Scalars['String']>;
    fund_starts_with?: Maybe<Scalars['String']>;
    fund_not_starts_with?: Maybe<Scalars['String']>;
    fund_ends_with?: Maybe<Scalars['String']>;
    fund_not_ends_with?: Maybe<Scalars['String']>;
    timestamp?: Maybe<Scalars['BigInt']>;
    timestamp_not?: Maybe<Scalars['BigInt']>;
    timestamp_gt?: Maybe<Scalars['BigInt']>;
    timestamp_lt?: Maybe<Scalars['BigInt']>;
    timestamp_gte?: Maybe<Scalars['BigInt']>;
    timestamp_lte?: Maybe<Scalars['BigInt']>;
    timestamp_in?: Maybe<Array<Scalars['BigInt']>>;
    timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;
    transaction?: Maybe<Scalars['String']>;
    transaction_not?: Maybe<Scalars['String']>;
    transaction_gt?: Maybe<Scalars['String']>;
    transaction_lt?: Maybe<Scalars['String']>;
    transaction_gte?: Maybe<Scalars['String']>;
    transaction_lte?: Maybe<Scalars['String']>;
    transaction_in?: Maybe<Array<Scalars['String']>>;
    transaction_not_in?: Maybe<Array<Scalars['String']>>;
    transaction_contains?: Maybe<Scalars['String']>;
    transaction_not_contains?: Maybe<Scalars['String']>;
    transaction_starts_with?: Maybe<Scalars['String']>;
    transaction_not_starts_with?: Maybe<Scalars['String']>;
    transaction_ends_with?: Maybe<Scalars['String']>;
    transaction_not_ends_with?: Maybe<Scalars['String']>;
    comptrollerProxy?: Maybe<Scalars['String']>;
    comptrollerProxy_not?: Maybe<Scalars['String']>;
    comptrollerProxy_gt?: Maybe<Scalars['String']>;
    comptrollerProxy_lt?: Maybe<Scalars['String']>;
    comptrollerProxy_gte?: Maybe<Scalars['String']>;
    comptrollerProxy_lte?: Maybe<Scalars['String']>;
    comptrollerProxy_in?: Maybe<Array<Scalars['String']>>;
    comptrollerProxy_not_in?: Maybe<Array<Scalars['String']>>;
    comptrollerProxy_contains?: Maybe<Scalars['String']>;
    comptrollerProxy_not_contains?: Maybe<Scalars['String']>;
    comptrollerProxy_starts_with?: Maybe<Scalars['String']>;
    comptrollerProxy_not_starts_with?: Maybe<Scalars['String']>;
    comptrollerProxy_ends_with?: Maybe<Scalars['String']>;
    comptrollerProxy_not_ends_with?: Maybe<Scalars['String']>;
    prevSharePrice?: Maybe<Scalars['BigDecimal']>;
    prevSharePrice_not?: Maybe<Scalars['BigDecimal']>;
    prevSharePrice_gt?: Maybe<Scalars['BigDecimal']>;
    prevSharePrice_lt?: Maybe<Scalars['BigDecimal']>;
    prevSharePrice_gte?: Maybe<Scalars['BigDecimal']>;
    prevSharePrice_lte?: Maybe<Scalars['BigDecimal']>;
    prevSharePrice_in?: Maybe<Array<Scalars['BigDecimal']>>;
    prevSharePrice_not_in?: Maybe<Array<Scalars['BigDecimal']>>;
    nextSharePrice?: Maybe<Scalars['BigDecimal']>;
    nextSharePrice_not?: Maybe<Scalars['BigDecimal']>;
    nextSharePrice_gt?: Maybe<Scalars['BigDecimal']>;
    nextSharePrice_lt?: Maybe<Scalars['BigDecimal']>;
    nextSharePrice_gte?: Maybe<Scalars['BigDecimal']>;
    nextSharePrice_lte?: Maybe<Scalars['BigDecimal']>;
    nextSharePrice_in?: Maybe<Array<Scalars['BigDecimal']>>;
    nextSharePrice_not_in?: Maybe<Array<Scalars['BigDecimal']>>;
};
export declare enum PerformanceFeeSharePriceUpdatedEvent_OrderBy {
    Id = "id",
    Fund = "fund",
    Timestamp = "timestamp",
    Transaction = "transaction",
    ComptrollerProxy = "comptrollerProxy",
    PrevSharePrice = "prevSharePrice",
    NextSharePrice = "nextSharePrice"
}
export declare type PerformanceFeeState = FundStateInterface & IndividualFeeStateInterface & {
    __typename?: 'PerformanceFeeState';
    id: Scalars['ID'];
    fund: Fund;
    timestamp: Scalars['BigInt'];
    fee: Fee;
    lastPaid: Scalars['BigInt'];
    grossSharePrice: Scalars['BigDecimal'];
    aggregateValueDue: Scalars['BigDecimal'];
    highWaterMark: Scalars['BigDecimal'];
    sharesOutstanding: Scalars['BigDecimal'];
    events: Array<FundEventInterface>;
};
export declare type PerformanceFeeStateEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<FundEventInterface_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<FundEventInterface_Filter>;
};
export declare type PerformanceFeeState_Filter = {
    id?: Maybe<Scalars['ID']>;
    id_not?: Maybe<Scalars['ID']>;
    id_gt?: Maybe<Scalars['ID']>;
    id_lt?: Maybe<Scalars['ID']>;
    id_gte?: Maybe<Scalars['ID']>;
    id_lte?: Maybe<Scalars['ID']>;
    id_in?: Maybe<Array<Scalars['ID']>>;
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    fund?: Maybe<Scalars['String']>;
    fund_not?: Maybe<Scalars['String']>;
    fund_gt?: Maybe<Scalars['String']>;
    fund_lt?: Maybe<Scalars['String']>;
    fund_gte?: Maybe<Scalars['String']>;
    fund_lte?: Maybe<Scalars['String']>;
    fund_in?: Maybe<Array<Scalars['String']>>;
    fund_not_in?: Maybe<Array<Scalars['String']>>;
    fund_contains?: Maybe<Scalars['String']>;
    fund_not_contains?: Maybe<Scalars['String']>;
    fund_starts_with?: Maybe<Scalars['String']>;
    fund_not_starts_with?: Maybe<Scalars['String']>;
    fund_ends_with?: Maybe<Scalars['String']>;
    fund_not_ends_with?: Maybe<Scalars['String']>;
    timestamp?: Maybe<Scalars['BigInt']>;
    timestamp_not?: Maybe<Scalars['BigInt']>;
    timestamp_gt?: Maybe<Scalars['BigInt']>;
    timestamp_lt?: Maybe<Scalars['BigInt']>;
    timestamp_gte?: Maybe<Scalars['BigInt']>;
    timestamp_lte?: Maybe<Scalars['BigInt']>;
    timestamp_in?: Maybe<Array<Scalars['BigInt']>>;
    timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;
    fee?: Maybe<Scalars['String']>;
    fee_not?: Maybe<Scalars['String']>;
    fee_gt?: Maybe<Scalars['String']>;
    fee_lt?: Maybe<Scalars['String']>;
    fee_gte?: Maybe<Scalars['String']>;
    fee_lte?: Maybe<Scalars['String']>;
    fee_in?: Maybe<Array<Scalars['String']>>;
    fee_not_in?: Maybe<Array<Scalars['String']>>;
    fee_contains?: Maybe<Scalars['String']>;
    fee_not_contains?: Maybe<Scalars['String']>;
    fee_starts_with?: Maybe<Scalars['String']>;
    fee_not_starts_with?: Maybe<Scalars['String']>;
    fee_ends_with?: Maybe<Scalars['String']>;
    fee_not_ends_with?: Maybe<Scalars['String']>;
    lastPaid?: Maybe<Scalars['BigInt']>;
    lastPaid_not?: Maybe<Scalars['BigInt']>;
    lastPaid_gt?: Maybe<Scalars['BigInt']>;
    lastPaid_lt?: Maybe<Scalars['BigInt']>;
    lastPaid_gte?: Maybe<Scalars['BigInt']>;
    lastPaid_lte?: Maybe<Scalars['BigInt']>;
    lastPaid_in?: Maybe<Array<Scalars['BigInt']>>;
    lastPaid_not_in?: Maybe<Array<Scalars['BigInt']>>;
    grossSharePrice?: Maybe<Scalars['BigDecimal']>;
    grossSharePrice_not?: Maybe<Scalars['BigDecimal']>;
    grossSharePrice_gt?: Maybe<Scalars['BigDecimal']>;
    grossSharePrice_lt?: Maybe<Scalars['BigDecimal']>;
    grossSharePrice_gte?: Maybe<Scalars['BigDecimal']>;
    grossSharePrice_lte?: Maybe<Scalars['BigDecimal']>;
    grossSharePrice_in?: Maybe<Array<Scalars['BigDecimal']>>;
    grossSharePrice_not_in?: Maybe<Array<Scalars['BigDecimal']>>;
    aggregateValueDue?: Maybe<Scalars['BigDecimal']>;
    aggregateValueDue_not?: Maybe<Scalars['BigDecimal']>;
    aggregateValueDue_gt?: Maybe<Scalars['BigDecimal']>;
    aggregateValueDue_lt?: Maybe<Scalars['BigDecimal']>;
    aggregateValueDue_gte?: Maybe<Scalars['BigDecimal']>;
    aggregateValueDue_lte?: Maybe<Scalars['BigDecimal']>;
    aggregateValueDue_in?: Maybe<Array<Scalars['BigDecimal']>>;
    aggregateValueDue_not_in?: Maybe<Array<Scalars['BigDecimal']>>;
    highWaterMark?: Maybe<Scalars['BigDecimal']>;
    highWaterMark_not?: Maybe<Scalars['BigDecimal']>;
    highWaterMark_gt?: Maybe<Scalars['BigDecimal']>;
    highWaterMark_lt?: Maybe<Scalars['BigDecimal']>;
    highWaterMark_gte?: Maybe<Scalars['BigDecimal']>;
    highWaterMark_lte?: Maybe<Scalars['BigDecimal']>;
    highWaterMark_in?: Maybe<Array<Scalars['BigDecimal']>>;
    highWaterMark_not_in?: Maybe<Array<Scalars['BigDecimal']>>;
    sharesOutstanding?: Maybe<Scalars['BigDecimal']>;
    sharesOutstanding_not?: Maybe<Scalars['BigDecimal']>;
    sharesOutstanding_gt?: Maybe<Scalars['BigDecimal']>;
    sharesOutstanding_lt?: Maybe<Scalars['BigDecimal']>;
    sharesOutstanding_gte?: Maybe<Scalars['BigDecimal']>;
    sharesOutstanding_lte?: Maybe<Scalars['BigDecimal']>;
    sharesOutstanding_in?: Maybe<Array<Scalars['BigDecimal']>>;
    sharesOutstanding_not_in?: Maybe<Array<Scalars['BigDecimal']>>;
    events?: Maybe<Array<Scalars['String']>>;
    events_not?: Maybe<Array<Scalars['String']>>;
    events_contains?: Maybe<Array<Scalars['String']>>;
    events_not_contains?: Maybe<Array<Scalars['String']>>;
};
export declare enum PerformanceFeeState_OrderBy {
    Id = "id",
    Fund = "fund",
    Timestamp = "timestamp",
    Fee = "fee",
    LastPaid = "lastPaid",
    GrossSharePrice = "grossSharePrice",
    AggregateValueDue = "aggregateValueDue",
    HighWaterMark = "highWaterMark",
    SharesOutstanding = "sharesOutstanding",
    Events = "events"
}
export declare type PeriodicFundStateInterface = {
    id: Scalars['ID'];
    fund: Fund;
    start: Scalars['BigInt'];
    end: Scalars['BigInt'];
    first: FundState;
    last: FundState;
};
export declare type PeriodicFundStateInterface_Filter = {
    id?: Maybe<Scalars['ID']>;
    id_not?: Maybe<Scalars['ID']>;
    id_gt?: Maybe<Scalars['ID']>;
    id_lt?: Maybe<Scalars['ID']>;
    id_gte?: Maybe<Scalars['ID']>;
    id_lte?: Maybe<Scalars['ID']>;
    id_in?: Maybe<Array<Scalars['ID']>>;
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    fund?: Maybe<Scalars['String']>;
    fund_not?: Maybe<Scalars['String']>;
    fund_gt?: Maybe<Scalars['String']>;
    fund_lt?: Maybe<Scalars['String']>;
    fund_gte?: Maybe<Scalars['String']>;
    fund_lte?: Maybe<Scalars['String']>;
    fund_in?: Maybe<Array<Scalars['String']>>;
    fund_not_in?: Maybe<Array<Scalars['String']>>;
    fund_contains?: Maybe<Scalars['String']>;
    fund_not_contains?: Maybe<Scalars['String']>;
    fund_starts_with?: Maybe<Scalars['String']>;
    fund_not_starts_with?: Maybe<Scalars['String']>;
    fund_ends_with?: Maybe<Scalars['String']>;
    fund_not_ends_with?: Maybe<Scalars['String']>;
    start?: Maybe<Scalars['BigInt']>;
    start_not?: Maybe<Scalars['BigInt']>;
    start_gt?: Maybe<Scalars['BigInt']>;
    start_lt?: Maybe<Scalars['BigInt']>;
    start_gte?: Maybe<Scalars['BigInt']>;
    start_lte?: Maybe<Scalars['BigInt']>;
    start_in?: Maybe<Array<Scalars['BigInt']>>;
    start_not_in?: Maybe<Array<Scalars['BigInt']>>;
    end?: Maybe<Scalars['BigInt']>;
    end_not?: Maybe<Scalars['BigInt']>;
    end_gt?: Maybe<Scalars['BigInt']>;
    end_lt?: Maybe<Scalars['BigInt']>;
    end_gte?: Maybe<Scalars['BigInt']>;
    end_lte?: Maybe<Scalars['BigInt']>;
    end_in?: Maybe<Array<Scalars['BigInt']>>;
    end_not_in?: Maybe<Array<Scalars['BigInt']>>;
    first?: Maybe<Scalars['String']>;
    first_not?: Maybe<Scalars['String']>;
    first_gt?: Maybe<Scalars['String']>;
    first_lt?: Maybe<Scalars['String']>;
    first_gte?: Maybe<Scalars['String']>;
    first_lte?: Maybe<Scalars['String']>;
    first_in?: Maybe<Array<Scalars['String']>>;
    first_not_in?: Maybe<Array<Scalars['String']>>;
    first_contains?: Maybe<Scalars['String']>;
    first_not_contains?: Maybe<Scalars['String']>;
    first_starts_with?: Maybe<Scalars['String']>;
    first_not_starts_with?: Maybe<Scalars['String']>;
    first_ends_with?: Maybe<Scalars['String']>;
    first_not_ends_with?: Maybe<Scalars['String']>;
    last?: Maybe<Scalars['String']>;
    last_not?: Maybe<Scalars['String']>;
    last_gt?: Maybe<Scalars['String']>;
    last_lt?: Maybe<Scalars['String']>;
    last_gte?: Maybe<Scalars['String']>;
    last_lte?: Maybe<Scalars['String']>;
    last_in?: Maybe<Array<Scalars['String']>>;
    last_not_in?: Maybe<Array<Scalars['String']>>;
    last_contains?: Maybe<Scalars['String']>;
    last_not_contains?: Maybe<Scalars['String']>;
    last_starts_with?: Maybe<Scalars['String']>;
    last_not_starts_with?: Maybe<Scalars['String']>;
    last_ends_with?: Maybe<Scalars['String']>;
    last_not_ends_with?: Maybe<Scalars['String']>;
};
export declare enum PeriodicFundStateInterface_OrderBy {
    Id = "id",
    Fund = "fund",
    Start = "start",
    End = "end",
    First = "first",
    Last = "last"
}
export declare type Policy = {
    __typename?: 'Policy';
    id: Scalars['ID'];
    policyManager: PolicyManager;
    identifier: Scalars['String'];
    settings: Array<PolicySettingInterface>;
};
export declare type PolicySettingsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<PolicySettingInterface_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<PolicySettingInterface_Filter>;
};
export declare type PolicyDeregisteredEvent = EventInterface & NetworkEventInterface & {
    __typename?: 'PolicyDeregisteredEvent';
    id: Scalars['ID'];
    identifier: Scalars['String'];
    timestamp: Scalars['BigInt'];
    transaction: Transaction;
    policy: Policy;
};
export declare type PolicyDeregisteredEvent_Filter = {
    id?: Maybe<Scalars['ID']>;
    id_not?: Maybe<Scalars['ID']>;
    id_gt?: Maybe<Scalars['ID']>;
    id_lt?: Maybe<Scalars['ID']>;
    id_gte?: Maybe<Scalars['ID']>;
    id_lte?: Maybe<Scalars['ID']>;
    id_in?: Maybe<Array<Scalars['ID']>>;
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    identifier?: Maybe<Scalars['String']>;
    identifier_not?: Maybe<Scalars['String']>;
    identifier_gt?: Maybe<Scalars['String']>;
    identifier_lt?: Maybe<Scalars['String']>;
    identifier_gte?: Maybe<Scalars['String']>;
    identifier_lte?: Maybe<Scalars['String']>;
    identifier_in?: Maybe<Array<Scalars['String']>>;
    identifier_not_in?: Maybe<Array<Scalars['String']>>;
    identifier_contains?: Maybe<Scalars['String']>;
    identifier_not_contains?: Maybe<Scalars['String']>;
    identifier_starts_with?: Maybe<Scalars['String']>;
    identifier_not_starts_with?: Maybe<Scalars['String']>;
    identifier_ends_with?: Maybe<Scalars['String']>;
    identifier_not_ends_with?: Maybe<Scalars['String']>;
    timestamp?: Maybe<Scalars['BigInt']>;
    timestamp_not?: Maybe<Scalars['BigInt']>;
    timestamp_gt?: Maybe<Scalars['BigInt']>;
    timestamp_lt?: Maybe<Scalars['BigInt']>;
    timestamp_gte?: Maybe<Scalars['BigInt']>;
    timestamp_lte?: Maybe<Scalars['BigInt']>;
    timestamp_in?: Maybe<Array<Scalars['BigInt']>>;
    timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;
    transaction?: Maybe<Scalars['String']>;
    transaction_not?: Maybe<Scalars['String']>;
    transaction_gt?: Maybe<Scalars['String']>;
    transaction_lt?: Maybe<Scalars['String']>;
    transaction_gte?: Maybe<Scalars['String']>;
    transaction_lte?: Maybe<Scalars['String']>;
    transaction_in?: Maybe<Array<Scalars['String']>>;
    transaction_not_in?: Maybe<Array<Scalars['String']>>;
    transaction_contains?: Maybe<Scalars['String']>;
    transaction_not_contains?: Maybe<Scalars['String']>;
    transaction_starts_with?: Maybe<Scalars['String']>;
    transaction_not_starts_with?: Maybe<Scalars['String']>;
    transaction_ends_with?: Maybe<Scalars['String']>;
    transaction_not_ends_with?: Maybe<Scalars['String']>;
    policy?: Maybe<Scalars['String']>;
    policy_not?: Maybe<Scalars['String']>;
    policy_gt?: Maybe<Scalars['String']>;
    policy_lt?: Maybe<Scalars['String']>;
    policy_gte?: Maybe<Scalars['String']>;
    policy_lte?: Maybe<Scalars['String']>;
    policy_in?: Maybe<Array<Scalars['String']>>;
    policy_not_in?: Maybe<Array<Scalars['String']>>;
    policy_contains?: Maybe<Scalars['String']>;
    policy_not_contains?: Maybe<Scalars['String']>;
    policy_starts_with?: Maybe<Scalars['String']>;
    policy_not_starts_with?: Maybe<Scalars['String']>;
    policy_ends_with?: Maybe<Scalars['String']>;
    policy_not_ends_with?: Maybe<Scalars['String']>;
};
export declare enum PolicyDeregisteredEvent_OrderBy {
    Id = "id",
    Identifier = "identifier",
    Timestamp = "timestamp",
    Transaction = "transaction",
    Policy = "policy"
}
export declare type PolicyDisabledForFundEvent = EventInterface & ComptrollerEventInterface & {
    __typename?: 'PolicyDisabledForFundEvent';
    id: Scalars['ID'];
    comptroller: ComptrollerProxy;
    policy: Policy;
    timestamp: Scalars['BigInt'];
    transaction: Transaction;
};
export declare type PolicyDisabledForFundEvent_Filter = {
    id?: Maybe<Scalars['ID']>;
    id_not?: Maybe<Scalars['ID']>;
    id_gt?: Maybe<Scalars['ID']>;
    id_lt?: Maybe<Scalars['ID']>;
    id_gte?: Maybe<Scalars['ID']>;
    id_lte?: Maybe<Scalars['ID']>;
    id_in?: Maybe<Array<Scalars['ID']>>;
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    comptroller?: Maybe<Scalars['String']>;
    comptroller_not?: Maybe<Scalars['String']>;
    comptroller_gt?: Maybe<Scalars['String']>;
    comptroller_lt?: Maybe<Scalars['String']>;
    comptroller_gte?: Maybe<Scalars['String']>;
    comptroller_lte?: Maybe<Scalars['String']>;
    comptroller_in?: Maybe<Array<Scalars['String']>>;
    comptroller_not_in?: Maybe<Array<Scalars['String']>>;
    comptroller_contains?: Maybe<Scalars['String']>;
    comptroller_not_contains?: Maybe<Scalars['String']>;
    comptroller_starts_with?: Maybe<Scalars['String']>;
    comptroller_not_starts_with?: Maybe<Scalars['String']>;
    comptroller_ends_with?: Maybe<Scalars['String']>;
    comptroller_not_ends_with?: Maybe<Scalars['String']>;
    policy?: Maybe<Scalars['String']>;
    policy_not?: Maybe<Scalars['String']>;
    policy_gt?: Maybe<Scalars['String']>;
    policy_lt?: Maybe<Scalars['String']>;
    policy_gte?: Maybe<Scalars['String']>;
    policy_lte?: Maybe<Scalars['String']>;
    policy_in?: Maybe<Array<Scalars['String']>>;
    policy_not_in?: Maybe<Array<Scalars['String']>>;
    policy_contains?: Maybe<Scalars['String']>;
    policy_not_contains?: Maybe<Scalars['String']>;
    policy_starts_with?: Maybe<Scalars['String']>;
    policy_not_starts_with?: Maybe<Scalars['String']>;
    policy_ends_with?: Maybe<Scalars['String']>;
    policy_not_ends_with?: Maybe<Scalars['String']>;
    timestamp?: Maybe<Scalars['BigInt']>;
    timestamp_not?: Maybe<Scalars['BigInt']>;
    timestamp_gt?: Maybe<Scalars['BigInt']>;
    timestamp_lt?: Maybe<Scalars['BigInt']>;
    timestamp_gte?: Maybe<Scalars['BigInt']>;
    timestamp_lte?: Maybe<Scalars['BigInt']>;
    timestamp_in?: Maybe<Array<Scalars['BigInt']>>;
    timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;
    transaction?: Maybe<Scalars['String']>;
    transaction_not?: Maybe<Scalars['String']>;
    transaction_gt?: Maybe<Scalars['String']>;
    transaction_lt?: Maybe<Scalars['String']>;
    transaction_gte?: Maybe<Scalars['String']>;
    transaction_lte?: Maybe<Scalars['String']>;
    transaction_in?: Maybe<Array<Scalars['String']>>;
    transaction_not_in?: Maybe<Array<Scalars['String']>>;
    transaction_contains?: Maybe<Scalars['String']>;
    transaction_not_contains?: Maybe<Scalars['String']>;
    transaction_starts_with?: Maybe<Scalars['String']>;
    transaction_not_starts_with?: Maybe<Scalars['String']>;
    transaction_ends_with?: Maybe<Scalars['String']>;
    transaction_not_ends_with?: Maybe<Scalars['String']>;
};
export declare enum PolicyDisabledForFundEvent_OrderBy {
    Id = "id",
    Comptroller = "comptroller",
    Policy = "policy",
    Timestamp = "timestamp",
    Transaction = "transaction"
}
export declare type PolicyEnabledForFundEvent = EventInterface & ComptrollerEventInterface & {
    __typename?: 'PolicyEnabledForFundEvent';
    id: Scalars['ID'];
    comptroller: ComptrollerProxy;
    policy: Policy;
    settingsData: Scalars['String'];
    timestamp: Scalars['BigInt'];
    transaction: Transaction;
};
export declare type PolicyEnabledForFundEvent_Filter = {
    id?: Maybe<Scalars['ID']>;
    id_not?: Maybe<Scalars['ID']>;
    id_gt?: Maybe<Scalars['ID']>;
    id_lt?: Maybe<Scalars['ID']>;
    id_gte?: Maybe<Scalars['ID']>;
    id_lte?: Maybe<Scalars['ID']>;
    id_in?: Maybe<Array<Scalars['ID']>>;
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    comptroller?: Maybe<Scalars['String']>;
    comptroller_not?: Maybe<Scalars['String']>;
    comptroller_gt?: Maybe<Scalars['String']>;
    comptroller_lt?: Maybe<Scalars['String']>;
    comptroller_gte?: Maybe<Scalars['String']>;
    comptroller_lte?: Maybe<Scalars['String']>;
    comptroller_in?: Maybe<Array<Scalars['String']>>;
    comptroller_not_in?: Maybe<Array<Scalars['String']>>;
    comptroller_contains?: Maybe<Scalars['String']>;
    comptroller_not_contains?: Maybe<Scalars['String']>;
    comptroller_starts_with?: Maybe<Scalars['String']>;
    comptroller_not_starts_with?: Maybe<Scalars['String']>;
    comptroller_ends_with?: Maybe<Scalars['String']>;
    comptroller_not_ends_with?: Maybe<Scalars['String']>;
    policy?: Maybe<Scalars['String']>;
    policy_not?: Maybe<Scalars['String']>;
    policy_gt?: Maybe<Scalars['String']>;
    policy_lt?: Maybe<Scalars['String']>;
    policy_gte?: Maybe<Scalars['String']>;
    policy_lte?: Maybe<Scalars['String']>;
    policy_in?: Maybe<Array<Scalars['String']>>;
    policy_not_in?: Maybe<Array<Scalars['String']>>;
    policy_contains?: Maybe<Scalars['String']>;
    policy_not_contains?: Maybe<Scalars['String']>;
    policy_starts_with?: Maybe<Scalars['String']>;
    policy_not_starts_with?: Maybe<Scalars['String']>;
    policy_ends_with?: Maybe<Scalars['String']>;
    policy_not_ends_with?: Maybe<Scalars['String']>;
    settingsData?: Maybe<Scalars['String']>;
    settingsData_not?: Maybe<Scalars['String']>;
    settingsData_gt?: Maybe<Scalars['String']>;
    settingsData_lt?: Maybe<Scalars['String']>;
    settingsData_gte?: Maybe<Scalars['String']>;
    settingsData_lte?: Maybe<Scalars['String']>;
    settingsData_in?: Maybe<Array<Scalars['String']>>;
    settingsData_not_in?: Maybe<Array<Scalars['String']>>;
    settingsData_contains?: Maybe<Scalars['String']>;
    settingsData_not_contains?: Maybe<Scalars['String']>;
    settingsData_starts_with?: Maybe<Scalars['String']>;
    settingsData_not_starts_with?: Maybe<Scalars['String']>;
    settingsData_ends_with?: Maybe<Scalars['String']>;
    settingsData_not_ends_with?: Maybe<Scalars['String']>;
    timestamp?: Maybe<Scalars['BigInt']>;
    timestamp_not?: Maybe<Scalars['BigInt']>;
    timestamp_gt?: Maybe<Scalars['BigInt']>;
    timestamp_lt?: Maybe<Scalars['BigInt']>;
    timestamp_gte?: Maybe<Scalars['BigInt']>;
    timestamp_lte?: Maybe<Scalars['BigInt']>;
    timestamp_in?: Maybe<Array<Scalars['BigInt']>>;
    timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;
    transaction?: Maybe<Scalars['String']>;
    transaction_not?: Maybe<Scalars['String']>;
    transaction_gt?: Maybe<Scalars['String']>;
    transaction_lt?: Maybe<Scalars['String']>;
    transaction_gte?: Maybe<Scalars['String']>;
    transaction_lte?: Maybe<Scalars['String']>;
    transaction_in?: Maybe<Array<Scalars['String']>>;
    transaction_not_in?: Maybe<Array<Scalars['String']>>;
    transaction_contains?: Maybe<Scalars['String']>;
    transaction_not_contains?: Maybe<Scalars['String']>;
    transaction_starts_with?: Maybe<Scalars['String']>;
    transaction_not_starts_with?: Maybe<Scalars['String']>;
    transaction_ends_with?: Maybe<Scalars['String']>;
    transaction_not_ends_with?: Maybe<Scalars['String']>;
};
export declare enum PolicyEnabledForFundEvent_OrderBy {
    Id = "id",
    Comptroller = "comptroller",
    Policy = "policy",
    SettingsData = "settingsData",
    Timestamp = "timestamp",
    Transaction = "transaction"
}
export declare enum PolicyHook {
    BuySharesSetup = "BuySharesSetup",
    PreBuyShares = "PreBuyShares",
    PostBuyShares = "PostBuyShares",
    BuySharesCompleted = "BuySharesCompleted",
    PreCallOnIntegration = "PreCallOnIntegration",
    PostCallOnIntegration = "PostCallOnIntegration",
    Unknown = "Unknown"
}
export declare type PolicyManager = {
    __typename?: 'PolicyManager';
    id: Scalars['ID'];
    release: Release;
    policies: Array<Policy>;
};
export declare type PolicyManagerPoliciesArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<Policy_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<Policy_Filter>;
};
export declare type PolicyManager_Filter = {
    id?: Maybe<Scalars['ID']>;
    id_not?: Maybe<Scalars['ID']>;
    id_gt?: Maybe<Scalars['ID']>;
    id_lt?: Maybe<Scalars['ID']>;
    id_gte?: Maybe<Scalars['ID']>;
    id_lte?: Maybe<Scalars['ID']>;
    id_in?: Maybe<Array<Scalars['ID']>>;
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    release?: Maybe<Scalars['String']>;
    release_not?: Maybe<Scalars['String']>;
    release_gt?: Maybe<Scalars['String']>;
    release_lt?: Maybe<Scalars['String']>;
    release_gte?: Maybe<Scalars['String']>;
    release_lte?: Maybe<Scalars['String']>;
    release_in?: Maybe<Array<Scalars['String']>>;
    release_not_in?: Maybe<Array<Scalars['String']>>;
    release_contains?: Maybe<Scalars['String']>;
    release_not_contains?: Maybe<Scalars['String']>;
    release_starts_with?: Maybe<Scalars['String']>;
    release_not_starts_with?: Maybe<Scalars['String']>;
    release_ends_with?: Maybe<Scalars['String']>;
    release_not_ends_with?: Maybe<Scalars['String']>;
};
export declare enum PolicyManager_OrderBy {
    Id = "id",
    Release = "release",
    Policies = "policies"
}
export declare type PolicyRegisteredEvent = EventInterface & NetworkEventInterface & {
    __typename?: 'PolicyRegisteredEvent';
    id: Scalars['ID'];
    identifier: Scalars['String'];
    timestamp: Scalars['BigInt'];
    transaction: Transaction;
    policy: Policy;
    implementedHooks: Array<PolicyHook>;
};
export declare type PolicyRegisteredEvent_Filter = {
    id?: Maybe<Scalars['ID']>;
    id_not?: Maybe<Scalars['ID']>;
    id_gt?: Maybe<Scalars['ID']>;
    id_lt?: Maybe<Scalars['ID']>;
    id_gte?: Maybe<Scalars['ID']>;
    id_lte?: Maybe<Scalars['ID']>;
    id_in?: Maybe<Array<Scalars['ID']>>;
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    identifier?: Maybe<Scalars['String']>;
    identifier_not?: Maybe<Scalars['String']>;
    identifier_gt?: Maybe<Scalars['String']>;
    identifier_lt?: Maybe<Scalars['String']>;
    identifier_gte?: Maybe<Scalars['String']>;
    identifier_lte?: Maybe<Scalars['String']>;
    identifier_in?: Maybe<Array<Scalars['String']>>;
    identifier_not_in?: Maybe<Array<Scalars['String']>>;
    identifier_contains?: Maybe<Scalars['String']>;
    identifier_not_contains?: Maybe<Scalars['String']>;
    identifier_starts_with?: Maybe<Scalars['String']>;
    identifier_not_starts_with?: Maybe<Scalars['String']>;
    identifier_ends_with?: Maybe<Scalars['String']>;
    identifier_not_ends_with?: Maybe<Scalars['String']>;
    timestamp?: Maybe<Scalars['BigInt']>;
    timestamp_not?: Maybe<Scalars['BigInt']>;
    timestamp_gt?: Maybe<Scalars['BigInt']>;
    timestamp_lt?: Maybe<Scalars['BigInt']>;
    timestamp_gte?: Maybe<Scalars['BigInt']>;
    timestamp_lte?: Maybe<Scalars['BigInt']>;
    timestamp_in?: Maybe<Array<Scalars['BigInt']>>;
    timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;
    transaction?: Maybe<Scalars['String']>;
    transaction_not?: Maybe<Scalars['String']>;
    transaction_gt?: Maybe<Scalars['String']>;
    transaction_lt?: Maybe<Scalars['String']>;
    transaction_gte?: Maybe<Scalars['String']>;
    transaction_lte?: Maybe<Scalars['String']>;
    transaction_in?: Maybe<Array<Scalars['String']>>;
    transaction_not_in?: Maybe<Array<Scalars['String']>>;
    transaction_contains?: Maybe<Scalars['String']>;
    transaction_not_contains?: Maybe<Scalars['String']>;
    transaction_starts_with?: Maybe<Scalars['String']>;
    transaction_not_starts_with?: Maybe<Scalars['String']>;
    transaction_ends_with?: Maybe<Scalars['String']>;
    transaction_not_ends_with?: Maybe<Scalars['String']>;
    policy?: Maybe<Scalars['String']>;
    policy_not?: Maybe<Scalars['String']>;
    policy_gt?: Maybe<Scalars['String']>;
    policy_lt?: Maybe<Scalars['String']>;
    policy_gte?: Maybe<Scalars['String']>;
    policy_lte?: Maybe<Scalars['String']>;
    policy_in?: Maybe<Array<Scalars['String']>>;
    policy_not_in?: Maybe<Array<Scalars['String']>>;
    policy_contains?: Maybe<Scalars['String']>;
    policy_not_contains?: Maybe<Scalars['String']>;
    policy_starts_with?: Maybe<Scalars['String']>;
    policy_not_starts_with?: Maybe<Scalars['String']>;
    policy_ends_with?: Maybe<Scalars['String']>;
    policy_not_ends_with?: Maybe<Scalars['String']>;
    implementedHooks?: Maybe<Array<PolicyHook>>;
    implementedHooks_not?: Maybe<Array<PolicyHook>>;
    implementedHooks_contains?: Maybe<Array<PolicyHook>>;
    implementedHooks_not_contains?: Maybe<Array<PolicyHook>>;
};
export declare enum PolicyRegisteredEvent_OrderBy {
    Id = "id",
    Identifier = "identifier",
    Timestamp = "timestamp",
    Transaction = "transaction",
    Policy = "policy",
    ImplementedHooks = "implementedHooks"
}
export declare type PolicySettingInterface = {
    id: Scalars['ID'];
    policy: Policy;
    comptroller: ComptrollerProxy;
    timestamp: Scalars['BigInt'];
    enabled: Scalars['Boolean'];
    events: Array<FundEventInterface>;
};
export declare type PolicySettingInterfaceEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<FundEventInterface_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<FundEventInterface_Filter>;
};
export declare type PolicySettingInterface_Filter = {
    id?: Maybe<Scalars['ID']>;
    id_not?: Maybe<Scalars['ID']>;
    id_gt?: Maybe<Scalars['ID']>;
    id_lt?: Maybe<Scalars['ID']>;
    id_gte?: Maybe<Scalars['ID']>;
    id_lte?: Maybe<Scalars['ID']>;
    id_in?: Maybe<Array<Scalars['ID']>>;
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    policy?: Maybe<Scalars['String']>;
    policy_not?: Maybe<Scalars['String']>;
    policy_gt?: Maybe<Scalars['String']>;
    policy_lt?: Maybe<Scalars['String']>;
    policy_gte?: Maybe<Scalars['String']>;
    policy_lte?: Maybe<Scalars['String']>;
    policy_in?: Maybe<Array<Scalars['String']>>;
    policy_not_in?: Maybe<Array<Scalars['String']>>;
    policy_contains?: Maybe<Scalars['String']>;
    policy_not_contains?: Maybe<Scalars['String']>;
    policy_starts_with?: Maybe<Scalars['String']>;
    policy_not_starts_with?: Maybe<Scalars['String']>;
    policy_ends_with?: Maybe<Scalars['String']>;
    policy_not_ends_with?: Maybe<Scalars['String']>;
    comptroller?: Maybe<Scalars['String']>;
    comptroller_not?: Maybe<Scalars['String']>;
    comptroller_gt?: Maybe<Scalars['String']>;
    comptroller_lt?: Maybe<Scalars['String']>;
    comptroller_gte?: Maybe<Scalars['String']>;
    comptroller_lte?: Maybe<Scalars['String']>;
    comptroller_in?: Maybe<Array<Scalars['String']>>;
    comptroller_not_in?: Maybe<Array<Scalars['String']>>;
    comptroller_contains?: Maybe<Scalars['String']>;
    comptroller_not_contains?: Maybe<Scalars['String']>;
    comptroller_starts_with?: Maybe<Scalars['String']>;
    comptroller_not_starts_with?: Maybe<Scalars['String']>;
    comptroller_ends_with?: Maybe<Scalars['String']>;
    comptroller_not_ends_with?: Maybe<Scalars['String']>;
    timestamp?: Maybe<Scalars['BigInt']>;
    timestamp_not?: Maybe<Scalars['BigInt']>;
    timestamp_gt?: Maybe<Scalars['BigInt']>;
    timestamp_lt?: Maybe<Scalars['BigInt']>;
    timestamp_gte?: Maybe<Scalars['BigInt']>;
    timestamp_lte?: Maybe<Scalars['BigInt']>;
    timestamp_in?: Maybe<Array<Scalars['BigInt']>>;
    timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;
    enabled?: Maybe<Scalars['Boolean']>;
    enabled_not?: Maybe<Scalars['Boolean']>;
    enabled_in?: Maybe<Array<Scalars['Boolean']>>;
    enabled_not_in?: Maybe<Array<Scalars['Boolean']>>;
    events?: Maybe<Array<Scalars['String']>>;
    events_not?: Maybe<Array<Scalars['String']>>;
    events_contains?: Maybe<Array<Scalars['String']>>;
    events_not_contains?: Maybe<Array<Scalars['String']>>;
};
export declare enum PolicySettingInterface_OrderBy {
    Id = "id",
    Policy = "policy",
    Comptroller = "comptroller",
    Timestamp = "timestamp",
    Enabled = "enabled",
    Events = "events"
}
export declare type Policy_Filter = {
    id?: Maybe<Scalars['ID']>;
    id_not?: Maybe<Scalars['ID']>;
    id_gt?: Maybe<Scalars['ID']>;
    id_lt?: Maybe<Scalars['ID']>;
    id_gte?: Maybe<Scalars['ID']>;
    id_lte?: Maybe<Scalars['ID']>;
    id_in?: Maybe<Array<Scalars['ID']>>;
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    policyManager?: Maybe<Scalars['String']>;
    policyManager_not?: Maybe<Scalars['String']>;
    policyManager_gt?: Maybe<Scalars['String']>;
    policyManager_lt?: Maybe<Scalars['String']>;
    policyManager_gte?: Maybe<Scalars['String']>;
    policyManager_lte?: Maybe<Scalars['String']>;
    policyManager_in?: Maybe<Array<Scalars['String']>>;
    policyManager_not_in?: Maybe<Array<Scalars['String']>>;
    policyManager_contains?: Maybe<Scalars['String']>;
    policyManager_not_contains?: Maybe<Scalars['String']>;
    policyManager_starts_with?: Maybe<Scalars['String']>;
    policyManager_not_starts_with?: Maybe<Scalars['String']>;
    policyManager_ends_with?: Maybe<Scalars['String']>;
    policyManager_not_ends_with?: Maybe<Scalars['String']>;
    identifier?: Maybe<Scalars['String']>;
    identifier_not?: Maybe<Scalars['String']>;
    identifier_gt?: Maybe<Scalars['String']>;
    identifier_lt?: Maybe<Scalars['String']>;
    identifier_gte?: Maybe<Scalars['String']>;
    identifier_lte?: Maybe<Scalars['String']>;
    identifier_in?: Maybe<Array<Scalars['String']>>;
    identifier_not_in?: Maybe<Array<Scalars['String']>>;
    identifier_contains?: Maybe<Scalars['String']>;
    identifier_not_contains?: Maybe<Scalars['String']>;
    identifier_starts_with?: Maybe<Scalars['String']>;
    identifier_not_starts_with?: Maybe<Scalars['String']>;
    identifier_ends_with?: Maybe<Scalars['String']>;
    identifier_not_ends_with?: Maybe<Scalars['String']>;
};
export declare enum Policy_OrderBy {
    Id = "id",
    PolicyManager = "policyManager",
    Identifier = "identifier",
    Settings = "settings"
}
export declare type PortfolioState = FundStateInterface & {
    __typename?: 'PortfolioState';
    id: Scalars['ID'];
    fund: Fund;
    timestamp: Scalars['BigInt'];
    holdings: Array<HoldingState>;
    events: Array<FundEventInterface>;
};
export declare type PortfolioStateHoldingsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<HoldingState_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<HoldingState_Filter>;
};
export declare type PortfolioStateEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<FundEventInterface_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<FundEventInterface_Filter>;
};
export declare type PortfolioState_Filter = {
    id?: Maybe<Scalars['ID']>;
    id_not?: Maybe<Scalars['ID']>;
    id_gt?: Maybe<Scalars['ID']>;
    id_lt?: Maybe<Scalars['ID']>;
    id_gte?: Maybe<Scalars['ID']>;
    id_lte?: Maybe<Scalars['ID']>;
    id_in?: Maybe<Array<Scalars['ID']>>;
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    fund?: Maybe<Scalars['String']>;
    fund_not?: Maybe<Scalars['String']>;
    fund_gt?: Maybe<Scalars['String']>;
    fund_lt?: Maybe<Scalars['String']>;
    fund_gte?: Maybe<Scalars['String']>;
    fund_lte?: Maybe<Scalars['String']>;
    fund_in?: Maybe<Array<Scalars['String']>>;
    fund_not_in?: Maybe<Array<Scalars['String']>>;
    fund_contains?: Maybe<Scalars['String']>;
    fund_not_contains?: Maybe<Scalars['String']>;
    fund_starts_with?: Maybe<Scalars['String']>;
    fund_not_starts_with?: Maybe<Scalars['String']>;
    fund_ends_with?: Maybe<Scalars['String']>;
    fund_not_ends_with?: Maybe<Scalars['String']>;
    timestamp?: Maybe<Scalars['BigInt']>;
    timestamp_not?: Maybe<Scalars['BigInt']>;
    timestamp_gt?: Maybe<Scalars['BigInt']>;
    timestamp_lt?: Maybe<Scalars['BigInt']>;
    timestamp_gte?: Maybe<Scalars['BigInt']>;
    timestamp_lte?: Maybe<Scalars['BigInt']>;
    timestamp_in?: Maybe<Array<Scalars['BigInt']>>;
    timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;
    holdings?: Maybe<Array<Scalars['String']>>;
    holdings_not?: Maybe<Array<Scalars['String']>>;
    holdings_contains?: Maybe<Array<Scalars['String']>>;
    holdings_not_contains?: Maybe<Array<Scalars['String']>>;
    events?: Maybe<Array<Scalars['String']>>;
    events_not?: Maybe<Array<Scalars['String']>>;
    events_contains?: Maybe<Array<Scalars['String']>>;
    events_not_contains?: Maybe<Array<Scalars['String']>>;
};
export declare enum PortfolioState_OrderBy {
    Id = "id",
    Fund = "fund",
    Timestamp = "timestamp",
    Holdings = "holdings",
    Events = "events"
}
export declare type PreRedeemSharesHookFailedEvent = EventInterface & FundEventInterface & {
    __typename?: 'PreRedeemSharesHookFailedEvent';
    id: Scalars['ID'];
    fund: Fund;
    timestamp: Scalars['BigInt'];
    sharesQuantity: Scalars['BigDecimal'];
    redeemer: Account;
    failureReturnData: Scalars['String'];
    transaction: Transaction;
};
export declare type PreRedeemSharesHookFailedEvent_Filter = {
    id?: Maybe<Scalars['ID']>;
    id_not?: Maybe<Scalars['ID']>;
    id_gt?: Maybe<Scalars['ID']>;
    id_lt?: Maybe<Scalars['ID']>;
    id_gte?: Maybe<Scalars['ID']>;
    id_lte?: Maybe<Scalars['ID']>;
    id_in?: Maybe<Array<Scalars['ID']>>;
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    fund?: Maybe<Scalars['String']>;
    fund_not?: Maybe<Scalars['String']>;
    fund_gt?: Maybe<Scalars['String']>;
    fund_lt?: Maybe<Scalars['String']>;
    fund_gte?: Maybe<Scalars['String']>;
    fund_lte?: Maybe<Scalars['String']>;
    fund_in?: Maybe<Array<Scalars['String']>>;
    fund_not_in?: Maybe<Array<Scalars['String']>>;
    fund_contains?: Maybe<Scalars['String']>;
    fund_not_contains?: Maybe<Scalars['String']>;
    fund_starts_with?: Maybe<Scalars['String']>;
    fund_not_starts_with?: Maybe<Scalars['String']>;
    fund_ends_with?: Maybe<Scalars['String']>;
    fund_not_ends_with?: Maybe<Scalars['String']>;
    timestamp?: Maybe<Scalars['BigInt']>;
    timestamp_not?: Maybe<Scalars['BigInt']>;
    timestamp_gt?: Maybe<Scalars['BigInt']>;
    timestamp_lt?: Maybe<Scalars['BigInt']>;
    timestamp_gte?: Maybe<Scalars['BigInt']>;
    timestamp_lte?: Maybe<Scalars['BigInt']>;
    timestamp_in?: Maybe<Array<Scalars['BigInt']>>;
    timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;
    sharesQuantity?: Maybe<Scalars['BigDecimal']>;
    sharesQuantity_not?: Maybe<Scalars['BigDecimal']>;
    sharesQuantity_gt?: Maybe<Scalars['BigDecimal']>;
    sharesQuantity_lt?: Maybe<Scalars['BigDecimal']>;
    sharesQuantity_gte?: Maybe<Scalars['BigDecimal']>;
    sharesQuantity_lte?: Maybe<Scalars['BigDecimal']>;
    sharesQuantity_in?: Maybe<Array<Scalars['BigDecimal']>>;
    sharesQuantity_not_in?: Maybe<Array<Scalars['BigDecimal']>>;
    redeemer?: Maybe<Scalars['String']>;
    redeemer_not?: Maybe<Scalars['String']>;
    redeemer_gt?: Maybe<Scalars['String']>;
    redeemer_lt?: Maybe<Scalars['String']>;
    redeemer_gte?: Maybe<Scalars['String']>;
    redeemer_lte?: Maybe<Scalars['String']>;
    redeemer_in?: Maybe<Array<Scalars['String']>>;
    redeemer_not_in?: Maybe<Array<Scalars['String']>>;
    redeemer_contains?: Maybe<Scalars['String']>;
    redeemer_not_contains?: Maybe<Scalars['String']>;
    redeemer_starts_with?: Maybe<Scalars['String']>;
    redeemer_not_starts_with?: Maybe<Scalars['String']>;
    redeemer_ends_with?: Maybe<Scalars['String']>;
    redeemer_not_ends_with?: Maybe<Scalars['String']>;
    failureReturnData?: Maybe<Scalars['String']>;
    failureReturnData_not?: Maybe<Scalars['String']>;
    failureReturnData_gt?: Maybe<Scalars['String']>;
    failureReturnData_lt?: Maybe<Scalars['String']>;
    failureReturnData_gte?: Maybe<Scalars['String']>;
    failureReturnData_lte?: Maybe<Scalars['String']>;
    failureReturnData_in?: Maybe<Array<Scalars['String']>>;
    failureReturnData_not_in?: Maybe<Array<Scalars['String']>>;
    failureReturnData_contains?: Maybe<Scalars['String']>;
    failureReturnData_not_contains?: Maybe<Scalars['String']>;
    failureReturnData_starts_with?: Maybe<Scalars['String']>;
    failureReturnData_not_starts_with?: Maybe<Scalars['String']>;
    failureReturnData_ends_with?: Maybe<Scalars['String']>;
    failureReturnData_not_ends_with?: Maybe<Scalars['String']>;
    transaction?: Maybe<Scalars['String']>;
    transaction_not?: Maybe<Scalars['String']>;
    transaction_gt?: Maybe<Scalars['String']>;
    transaction_lt?: Maybe<Scalars['String']>;
    transaction_gte?: Maybe<Scalars['String']>;
    transaction_lte?: Maybe<Scalars['String']>;
    transaction_in?: Maybe<Array<Scalars['String']>>;
    transaction_not_in?: Maybe<Array<Scalars['String']>>;
    transaction_contains?: Maybe<Scalars['String']>;
    transaction_not_contains?: Maybe<Scalars['String']>;
    transaction_starts_with?: Maybe<Scalars['String']>;
    transaction_not_starts_with?: Maybe<Scalars['String']>;
    transaction_ends_with?: Maybe<Scalars['String']>;
    transaction_not_ends_with?: Maybe<Scalars['String']>;
};
export declare enum PreRedeemSharesHookFailedEvent_OrderBy {
    Id = "id",
    Fund = "fund",
    Timestamp = "timestamp",
    SharesQuantity = "sharesQuantity",
    Redeemer = "redeemer",
    FailureReturnData = "failureReturnData",
    Transaction = "transaction"
}
export declare type PrimitiveAddedEvent = EventInterface & NetworkEventInterface & {
    __typename?: 'PrimitiveAddedEvent';
    id: Scalars['ID'];
    timestamp: Scalars['BigInt'];
    transaction: Transaction;
    primitive: Asset;
    priceFeed: Scalars['String'];
    rateAsset: Scalars['Int'];
};
export declare type PrimitiveAddedEvent_Filter = {
    id?: Maybe<Scalars['ID']>;
    id_not?: Maybe<Scalars['ID']>;
    id_gt?: Maybe<Scalars['ID']>;
    id_lt?: Maybe<Scalars['ID']>;
    id_gte?: Maybe<Scalars['ID']>;
    id_lte?: Maybe<Scalars['ID']>;
    id_in?: Maybe<Array<Scalars['ID']>>;
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    timestamp?: Maybe<Scalars['BigInt']>;
    timestamp_not?: Maybe<Scalars['BigInt']>;
    timestamp_gt?: Maybe<Scalars['BigInt']>;
    timestamp_lt?: Maybe<Scalars['BigInt']>;
    timestamp_gte?: Maybe<Scalars['BigInt']>;
    timestamp_lte?: Maybe<Scalars['BigInt']>;
    timestamp_in?: Maybe<Array<Scalars['BigInt']>>;
    timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;
    transaction?: Maybe<Scalars['String']>;
    transaction_not?: Maybe<Scalars['String']>;
    transaction_gt?: Maybe<Scalars['String']>;
    transaction_lt?: Maybe<Scalars['String']>;
    transaction_gte?: Maybe<Scalars['String']>;
    transaction_lte?: Maybe<Scalars['String']>;
    transaction_in?: Maybe<Array<Scalars['String']>>;
    transaction_not_in?: Maybe<Array<Scalars['String']>>;
    transaction_contains?: Maybe<Scalars['String']>;
    transaction_not_contains?: Maybe<Scalars['String']>;
    transaction_starts_with?: Maybe<Scalars['String']>;
    transaction_not_starts_with?: Maybe<Scalars['String']>;
    transaction_ends_with?: Maybe<Scalars['String']>;
    transaction_not_ends_with?: Maybe<Scalars['String']>;
    primitive?: Maybe<Scalars['String']>;
    primitive_not?: Maybe<Scalars['String']>;
    primitive_gt?: Maybe<Scalars['String']>;
    primitive_lt?: Maybe<Scalars['String']>;
    primitive_gte?: Maybe<Scalars['String']>;
    primitive_lte?: Maybe<Scalars['String']>;
    primitive_in?: Maybe<Array<Scalars['String']>>;
    primitive_not_in?: Maybe<Array<Scalars['String']>>;
    primitive_contains?: Maybe<Scalars['String']>;
    primitive_not_contains?: Maybe<Scalars['String']>;
    primitive_starts_with?: Maybe<Scalars['String']>;
    primitive_not_starts_with?: Maybe<Scalars['String']>;
    primitive_ends_with?: Maybe<Scalars['String']>;
    primitive_not_ends_with?: Maybe<Scalars['String']>;
    priceFeed?: Maybe<Scalars['String']>;
    priceFeed_not?: Maybe<Scalars['String']>;
    priceFeed_gt?: Maybe<Scalars['String']>;
    priceFeed_lt?: Maybe<Scalars['String']>;
    priceFeed_gte?: Maybe<Scalars['String']>;
    priceFeed_lte?: Maybe<Scalars['String']>;
    priceFeed_in?: Maybe<Array<Scalars['String']>>;
    priceFeed_not_in?: Maybe<Array<Scalars['String']>>;
    priceFeed_contains?: Maybe<Scalars['String']>;
    priceFeed_not_contains?: Maybe<Scalars['String']>;
    priceFeed_starts_with?: Maybe<Scalars['String']>;
    priceFeed_not_starts_with?: Maybe<Scalars['String']>;
    priceFeed_ends_with?: Maybe<Scalars['String']>;
    priceFeed_not_ends_with?: Maybe<Scalars['String']>;
    rateAsset?: Maybe<Scalars['Int']>;
    rateAsset_not?: Maybe<Scalars['Int']>;
    rateAsset_gt?: Maybe<Scalars['Int']>;
    rateAsset_lt?: Maybe<Scalars['Int']>;
    rateAsset_gte?: Maybe<Scalars['Int']>;
    rateAsset_lte?: Maybe<Scalars['Int']>;
    rateAsset_in?: Maybe<Array<Scalars['Int']>>;
    rateAsset_not_in?: Maybe<Array<Scalars['Int']>>;
};
export declare enum PrimitiveAddedEvent_OrderBy {
    Id = "id",
    Timestamp = "timestamp",
    Transaction = "transaction",
    Primitive = "primitive",
    PriceFeed = "priceFeed",
    RateAsset = "rateAsset"
}
export declare type PrimitiveRemovedEvent = EventInterface & NetworkEventInterface & {
    __typename?: 'PrimitiveRemovedEvent';
    id: Scalars['ID'];
    timestamp: Scalars['BigInt'];
    transaction: Transaction;
    primitive: Asset;
};
export declare type PrimitiveRemovedEvent_Filter = {
    id?: Maybe<Scalars['ID']>;
    id_not?: Maybe<Scalars['ID']>;
    id_gt?: Maybe<Scalars['ID']>;
    id_lt?: Maybe<Scalars['ID']>;
    id_gte?: Maybe<Scalars['ID']>;
    id_lte?: Maybe<Scalars['ID']>;
    id_in?: Maybe<Array<Scalars['ID']>>;
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    timestamp?: Maybe<Scalars['BigInt']>;
    timestamp_not?: Maybe<Scalars['BigInt']>;
    timestamp_gt?: Maybe<Scalars['BigInt']>;
    timestamp_lt?: Maybe<Scalars['BigInt']>;
    timestamp_gte?: Maybe<Scalars['BigInt']>;
    timestamp_lte?: Maybe<Scalars['BigInt']>;
    timestamp_in?: Maybe<Array<Scalars['BigInt']>>;
    timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;
    transaction?: Maybe<Scalars['String']>;
    transaction_not?: Maybe<Scalars['String']>;
    transaction_gt?: Maybe<Scalars['String']>;
    transaction_lt?: Maybe<Scalars['String']>;
    transaction_gte?: Maybe<Scalars['String']>;
    transaction_lte?: Maybe<Scalars['String']>;
    transaction_in?: Maybe<Array<Scalars['String']>>;
    transaction_not_in?: Maybe<Array<Scalars['String']>>;
    transaction_contains?: Maybe<Scalars['String']>;
    transaction_not_contains?: Maybe<Scalars['String']>;
    transaction_starts_with?: Maybe<Scalars['String']>;
    transaction_not_starts_with?: Maybe<Scalars['String']>;
    transaction_ends_with?: Maybe<Scalars['String']>;
    transaction_not_ends_with?: Maybe<Scalars['String']>;
    primitive?: Maybe<Scalars['String']>;
    primitive_not?: Maybe<Scalars['String']>;
    primitive_gt?: Maybe<Scalars['String']>;
    primitive_lt?: Maybe<Scalars['String']>;
    primitive_gte?: Maybe<Scalars['String']>;
    primitive_lte?: Maybe<Scalars['String']>;
    primitive_in?: Maybe<Array<Scalars['String']>>;
    primitive_not_in?: Maybe<Array<Scalars['String']>>;
    primitive_contains?: Maybe<Scalars['String']>;
    primitive_not_contains?: Maybe<Scalars['String']>;
    primitive_starts_with?: Maybe<Scalars['String']>;
    primitive_not_starts_with?: Maybe<Scalars['String']>;
    primitive_ends_with?: Maybe<Scalars['String']>;
    primitive_not_ends_with?: Maybe<Scalars['String']>;
};
export declare enum PrimitiveRemovedEvent_OrderBy {
    Id = "id",
    Timestamp = "timestamp",
    Transaction = "transaction",
    Primitive = "primitive"
}
export declare type Query = {
    __typename?: 'Query';
    newFundCreatedEvent?: Maybe<NewFundCreatedEvent>;
    newFundCreatedEvents: Array<NewFundCreatedEvent>;
    vaultProxySetEvent?: Maybe<VaultProxySetEvent>;
    vaultProxySetEvents: Array<VaultProxySetEvent>;
    sharesBoughtEvent?: Maybe<SharesBoughtEvent>;
    sharesBoughtEvents: Array<SharesBoughtEvent>;
    sharesRedeemedEvent?: Maybe<SharesRedeemedEvent>;
    sharesRedeemedEvents: Array<SharesRedeemedEvent>;
    assetWithdrawnEvent?: Maybe<AssetWithdrawnEvent>;
    assetWithdrawnEvents: Array<AssetWithdrawnEvent>;
    trackedAssetAddedEvent?: Maybe<TrackedAssetAddedEvent>;
    trackedAssetAddedEvents: Array<TrackedAssetAddedEvent>;
    trackedAssetRemovedEvent?: Maybe<TrackedAssetRemovedEvent>;
    trackedAssetRemovedEvents: Array<TrackedAssetRemovedEvent>;
    authUserAddedForFundEvent?: Maybe<AuthUserAddedForFundEvent>;
    authUserAddedForFundEvents: Array<AuthUserAddedForFundEvent>;
    authUserRemovedForFundEvent?: Maybe<AuthUserRemovedForFundEvent>;
    authUserRemovedForFundEvents: Array<AuthUserRemovedForFundEvent>;
    callOnIntegrationExecutedForFundEvent?: Maybe<CallOnIntegrationExecutedForFundEvent>;
    callOnIntegrationExecutedForFundEvents: Array<CallOnIntegrationExecutedForFundEvent>;
    migrationSignaledEvent?: Maybe<MigrationSignaledEvent>;
    migrationSignaledEvents: Array<MigrationSignaledEvent>;
    migrationCancelledEvent?: Maybe<MigrationCancelledEvent>;
    migrationCancelledEvents: Array<MigrationCancelledEvent>;
    migrationExecutedEvent?: Maybe<MigrationExecutedEvent>;
    migrationExecutedEvents: Array<MigrationExecutedEvent>;
    migrationInCancelHookFailedEvent?: Maybe<MigrationInCancelHookFailedEvent>;
    migrationInCancelHookFailedEvents: Array<MigrationInCancelHookFailedEvent>;
    migrationOutHookFailedEvent?: Maybe<MigrationOutHookFailedEvent>;
    migrationOutHookFailedEvents: Array<MigrationOutHookFailedEvent>;
    feeEnabledForFundEvent?: Maybe<FeeEnabledForFundEvent>;
    feeEnabledForFundEvents: Array<FeeEnabledForFundEvent>;
    feesRecipientSetForFundEvent?: Maybe<FeesRecipientSetForFundEvent>;
    feesRecipientSetForFundEvents: Array<FeesRecipientSetForFundEvent>;
    feeSettledForFundEvent?: Maybe<FeeSettledForFundEvent>;
    feeSettledForFundEvents: Array<FeeSettledForFundEvent>;
    allSharesOutstandingForcePaidForFundEvent?: Maybe<AllSharesOutstandingForcePaidForFundEvent>;
    allSharesOutstandingForcePaidForFundEvents: Array<AllSharesOutstandingForcePaidForFundEvent>;
    sharesOutstandingPaidForFundEvent?: Maybe<SharesOutstandingPaidForFundEvent>;
    sharesOutstandingPaidForFundEvents: Array<SharesOutstandingPaidForFundEvent>;
    migratedSharesDuePaidEvent?: Maybe<MigratedSharesDuePaidEvent>;
    migratedSharesDuePaidEvents: Array<MigratedSharesDuePaidEvent>;
    policyEnabledForFundEvent?: Maybe<PolicyEnabledForFundEvent>;
    policyEnabledForFundEvents: Array<PolicyEnabledForFundEvent>;
    policyDisabledForFundEvent?: Maybe<PolicyDisabledForFundEvent>;
    policyDisabledForFundEvents: Array<PolicyDisabledForFundEvent>;
    accessorSetEvent?: Maybe<AccessorSetEvent>;
    accessorSetEvents: Array<AccessorSetEvent>;
    ownerSetEvent?: Maybe<OwnerSetEvent>;
    ownerSetEvents: Array<OwnerSetEvent>;
    migratorSetEvent?: Maybe<MigratorSetEvent>;
    migratorSetEvents: Array<MigratorSetEvent>;
    vaultLibSetEvent?: Maybe<VaultLibSetEvent>;
    vaultLibSetEvents: Array<VaultLibSetEvent>;
    approvalEvent?: Maybe<ApprovalEvent>;
    approvalEvents: Array<ApprovalEvent>;
    transferEvent?: Maybe<TransferEvent>;
    transferEvents: Array<TransferEvent>;
    adapterBlacklistAddressesAddedEvent?: Maybe<AdapterBlacklistAddressesAddedEvent>;
    adapterBlacklistAddressesAddedEvents: Array<AdapterBlacklistAddressesAddedEvent>;
    adapterBlacklistAddressesRemovedEvent?: Maybe<AdapterBlacklistAddressesRemovedEvent>;
    adapterBlacklistAddressesRemovedEvents: Array<AdapterBlacklistAddressesRemovedEvent>;
    adapterWhitelistAddressesAddedEvent?: Maybe<AdapterWhitelistAddressesAddedEvent>;
    adapterWhitelistAddressesAddedEvents: Array<AdapterWhitelistAddressesAddedEvent>;
    adapterWhitelistAddressesRemovedEvent?: Maybe<AdapterWhitelistAddressesRemovedEvent>;
    adapterWhitelistAddressesRemovedEvents: Array<AdapterWhitelistAddressesRemovedEvent>;
    assetBlacklistAddressesAddedEvent?: Maybe<AssetBlacklistAddressesAddedEvent>;
    assetBlacklistAddressesAddedEvents: Array<AssetBlacklistAddressesAddedEvent>;
    assetBlacklistAddressesRemovedEvent?: Maybe<AssetBlacklistAddressesRemovedEvent>;
    assetBlacklistAddressesRemovedEvents: Array<AssetBlacklistAddressesRemovedEvent>;
    assetWhitelistAddressesAddedEvent?: Maybe<AssetWhitelistAddressesAddedEvent>;
    assetWhitelistAddressesAddedEvents: Array<AssetWhitelistAddressesAddedEvent>;
    assetWhitelistAddressesRemovedEvent?: Maybe<AssetWhitelistAddressesRemovedEvent>;
    assetWhitelistAddressesRemovedEvents: Array<AssetWhitelistAddressesRemovedEvent>;
    buySharesCallerWhitelistAddressesAddedEvent?: Maybe<BuySharesCallerWhitelistAddressesAddedEvent>;
    buySharesCallerWhitelistAddressesAddedEvents: Array<BuySharesCallerWhitelistAddressesAddedEvent>;
    buySharesCallerWhitelistAddressesRemovedEvent?: Maybe<BuySharesCallerWhitelistAddressesRemovedEvent>;
    buySharesCallerWhitelistAddressesRemovedEvents: Array<BuySharesCallerWhitelistAddressesRemovedEvent>;
    guaranteedRedemptionFundSettingsSetEvent?: Maybe<GuaranteedRedemptionFundSettingsSetEvent>;
    guaranteedRedemptionFundSettingsSetEvents: Array<GuaranteedRedemptionFundSettingsSetEvent>;
    investorWhitelistAddressesAddedEvent?: Maybe<InvestorWhitelistAddressesAddedEvent>;
    investorWhitelistAddressesAddedEvents: Array<InvestorWhitelistAddressesAddedEvent>;
    investorWhitelistAddressesRemovedEvent?: Maybe<InvestorWhitelistAddressesRemovedEvent>;
    investorWhitelistAddressesRemovedEvents: Array<InvestorWhitelistAddressesRemovedEvent>;
    maxConcentrationSetEvent?: Maybe<MaxConcentrationSetEvent>;
    maxConcentrationSetEvents: Array<MaxConcentrationSetEvent>;
    minMaxInvestmentFundSettingsSetEvent?: Maybe<MinMaxInvestmentFundSettingsSetEvent>;
    minMaxInvestmentFundSettingsSetEvents: Array<MinMaxInvestmentFundSettingsSetEvent>;
    managementFeeSettingsAddedEvent?: Maybe<ManagementFeeSettingsAddedEvent>;
    managementFeeSettingsAddedEvents: Array<ManagementFeeSettingsAddedEvent>;
    managementFeeSettledEvent?: Maybe<ManagementFeeSettledEvent>;
    managementFeeSettledEvents: Array<ManagementFeeSettledEvent>;
    managementFeeActivatedForMigratedFundEvent?: Maybe<ManagementFeeActivatedForMigratedFundEvent>;
    managementFeeActivatedForMigratedFundEvents: Array<ManagementFeeActivatedForMigratedFundEvent>;
    performanceFeeSettingsAddedEvent?: Maybe<PerformanceFeeSettingsAddedEvent>;
    performanceFeeSettingsAddedEvents: Array<PerformanceFeeSettingsAddedEvent>;
    performanceFeeActivatedForFundEvent?: Maybe<PerformanceFeeActivatedForFundEvent>;
    performanceFeeActivatedForFundEvents: Array<PerformanceFeeActivatedForFundEvent>;
    performanceFeeSharePriceUpdatedEvent?: Maybe<PerformanceFeeSharePriceUpdatedEvent>;
    performanceFeeSharePriceUpdatedEvents: Array<PerformanceFeeSharePriceUpdatedEvent>;
    performanceFeePaidOutEvent?: Maybe<PerformanceFeePaidOutEvent>;
    performanceFeePaidOutEvents: Array<PerformanceFeePaidOutEvent>;
    performanceFeePerformanceUpdatedEvent?: Maybe<PerformanceFeePerformanceUpdatedEvent>;
    performanceFeePerformanceUpdatedEvents: Array<PerformanceFeePerformanceUpdatedEvent>;
    entranceRateDirectFeeSettingsAddedEvent?: Maybe<EntranceRateDirectFeeSettingsAddedEvent>;
    entranceRateDirectFeeSettingsAddedEvents: Array<EntranceRateDirectFeeSettingsAddedEvent>;
    entranceRateDirectFeeSettledEvent?: Maybe<EntranceRateDirectFeeSettledEvent>;
    entranceRateDirectFeeSettledEvents: Array<EntranceRateDirectFeeSettledEvent>;
    entranceRateBurnFeeSettingsAddedEvent?: Maybe<EntranceRateBurnFeeSettingsAddedEvent>;
    entranceRateBurnFeeSettingsAddedEvents: Array<EntranceRateBurnFeeSettingsAddedEvent>;
    entranceRateBurnFeeSettledEvent?: Maybe<EntranceRateBurnFeeSettledEvent>;
    entranceRateBurnFeeSettledEvents: Array<EntranceRateBurnFeeSettledEvent>;
    overridePauseSetEvent?: Maybe<OverridePauseSetEvent>;
    overridePauseSetEvents: Array<OverridePauseSetEvent>;
    preRedeemSharesHookFailedEvent?: Maybe<PreRedeemSharesHookFailedEvent>;
    preRedeemSharesHookFailedEvents: Array<PreRedeemSharesHookFailedEvent>;
    vaultProxyDeployedEvent?: Maybe<VaultProxyDeployedEvent>;
    vaultProxyDeployedEvents: Array<VaultProxyDeployedEvent>;
    comptrollerProxyDeployedEvent?: Maybe<ComptrollerProxyDeployedEvent>;
    comptrollerProxyDeployedEvents: Array<ComptrollerProxyDeployedEvent>;
    comptrollerLibSetEvent?: Maybe<ComptrollerLibSetEvent>;
    comptrollerLibSetEvents: Array<ComptrollerLibSetEvent>;
    adapterRegisteredEvent?: Maybe<AdapterRegisteredEvent>;
    adapterRegisteredEvents: Array<AdapterRegisteredEvent>;
    adapterDeregisteredEvent?: Maybe<AdapterDeregisteredEvent>;
    adapterDeregisteredEvents: Array<AdapterDeregisteredEvent>;
    trackedAssetsLimitSetEvent?: Maybe<TrackedAssetsLimitSetEvent>;
    trackedAssetsLimitSetEvents: Array<TrackedAssetsLimitSetEvent>;
    policyRegisteredEvent?: Maybe<PolicyRegisteredEvent>;
    policyRegisteredEvents: Array<PolicyRegisteredEvent>;
    policyDeregisteredEvent?: Maybe<PolicyDeregisteredEvent>;
    policyDeregisteredEvents: Array<PolicyDeregisteredEvent>;
    guaranteedRedemptionAdapterAddedEvent?: Maybe<GuaranteedRedemptionAdapterAddedEvent>;
    guaranteedRedemptionAdapterAddedEvents: Array<GuaranteedRedemptionAdapterAddedEvent>;
    guaranteedRedemptionAdapterRemovedEvent?: Maybe<GuaranteedRedemptionAdapterRemovedEvent>;
    guaranteedRedemptionAdapterRemovedEvents: Array<GuaranteedRedemptionAdapterRemovedEvent>;
    guaranteedRedemptionRedemptionWindowBufferSetEvent?: Maybe<GuaranteedRedemptionRedemptionWindowBufferSetEvent>;
    guaranteedRedemptionRedemptionWindowBufferSetEvents: Array<GuaranteedRedemptionRedemptionWindowBufferSetEvent>;
    fundDeployerSetEvent?: Maybe<FundDeployerSetEvent>;
    fundDeployerSetEvents: Array<FundDeployerSetEvent>;
    valueInterpreterSetEvent?: Maybe<ValueInterpreterSetEvent>;
    valueInterpreterSetEvents: Array<ValueInterpreterSetEvent>;
    ownershipTransferredEvent?: Maybe<OwnershipTransferredEvent>;
    ownershipTransferredEvents: Array<OwnershipTransferredEvent>;
    derivativeAddedEvent?: Maybe<DerivativeAddedEvent>;
    derivativeAddedEvents: Array<DerivativeAddedEvent>;
    derivativeRemovedEvent?: Maybe<DerivativeRemovedEvent>;
    derivativeRemovedEvents: Array<DerivativeRemovedEvent>;
    derivativeUpdatedEvent?: Maybe<DerivativeUpdatedEvent>;
    derivativeUpdatedEvents: Array<DerivativeUpdatedEvent>;
    aggregatorUpdatedEvent?: Maybe<AggregatorUpdatedEvent>;
    aggregatorUpdatedEvents: Array<AggregatorUpdatedEvent>;
    ethUsdAggregatorSetEvent?: Maybe<EthUsdAggregatorSetEvent>;
    ethUsdAggregatorSetEvents: Array<EthUsdAggregatorSetEvent>;
    primitiveAddedEvent?: Maybe<PrimitiveAddedEvent>;
    primitiveAddedEvents: Array<PrimitiveAddedEvent>;
    primitiveRemovedEvent?: Maybe<PrimitiveRemovedEvent>;
    primitiveRemovedEvents: Array<PrimitiveRemovedEvent>;
    feeRegisteredEvent?: Maybe<FeeRegisteredEvent>;
    feeRegisteredEvents: Array<FeeRegisteredEvent>;
    feeDeregisteredEvent?: Maybe<FeeDeregisteredEvent>;
    feeDeregisteredEvents: Array<FeeDeregisteredEvent>;
    migrationTimelockSetEvent?: Maybe<MigrationTimelockSetEvent>;
    migrationTimelockSetEvents: Array<MigrationTimelockSetEvent>;
    nominatedOwnerRemovedEvent?: Maybe<NominatedOwnerRemovedEvent>;
    nominatedOwnerRemovedEvents: Array<NominatedOwnerRemovedEvent>;
    nominatedOwnerSetEvent?: Maybe<NominatedOwnerSetEvent>;
    nominatedOwnerSetEvents: Array<NominatedOwnerSetEvent>;
    dispatcherOwnershipTransferredEvent?: Maybe<DispatcherOwnershipTransferredEvent>;
    dispatcherOwnershipTransferredEvents: Array<DispatcherOwnershipTransferredEvent>;
    sharesTokenSymbolSetEvent?: Maybe<SharesTokenSymbolSetEvent>;
    sharesTokenSymbolSetEvents: Array<SharesTokenSymbolSetEvent>;
    releaseStatusSetEvent?: Maybe<ReleaseStatusSetEvent>;
    releaseStatusSetEvents: Array<ReleaseStatusSetEvent>;
    vaultCallRegisteredEvent?: Maybe<VaultCallRegisteredEvent>;
    vaultCallRegisteredEvents: Array<VaultCallRegisteredEvent>;
    vaultCallDeregisteredEvent?: Maybe<VaultCallDeregisteredEvent>;
    vaultCallDeregisteredEvents: Array<VaultCallDeregisteredEvent>;
    transaction?: Maybe<Transaction>;
    transactions: Array<Transaction>;
    integrationManager?: Maybe<IntegrationManager>;
    integrationManagers: Array<IntegrationManager>;
    policyManager?: Maybe<PolicyManager>;
    policyManagers: Array<PolicyManager>;
    feeManager?: Maybe<FeeManager>;
    feeManagers: Array<FeeManager>;
    guaranteedRedemption?: Maybe<GuaranteedRedemption>;
    guaranteedRedemptions: Array<GuaranteedRedemption>;
    fund?: Maybe<Fund>;
    funds: Array<Fund>;
    comptrollerProxy?: Maybe<ComptrollerProxy>;
    comptrollerProxies: Array<ComptrollerProxy>;
    hourlyFundState?: Maybe<HourlyFundState>;
    hourlyFundStates: Array<HourlyFundState>;
    dailyFundState?: Maybe<DailyFundState>;
    dailyFundStates: Array<DailyFundState>;
    monthlyFundState?: Maybe<MonthlyFundState>;
    monthlyFundStates: Array<MonthlyFundState>;
    migration?: Maybe<Migration>;
    migrations: Array<Migration>;
    release?: Maybe<Release>;
    releases: Array<Release>;
    account?: Maybe<Account>;
    accounts: Array<Account>;
    investment?: Maybe<Investment>;
    investments: Array<Investment>;
    investmentState?: Maybe<InvestmentState>;
    investmentStates: Array<InvestmentState>;
    fee?: Maybe<Fee>;
    fees: Array<Fee>;
    managementFeeSetting?: Maybe<ManagementFeeSetting>;
    managementFeeSettings: Array<ManagementFeeSetting>;
    performanceFeeSetting?: Maybe<PerformanceFeeSetting>;
    performanceFeeSettings: Array<PerformanceFeeSetting>;
    entranceRateDirectFeeSetting?: Maybe<EntranceRateDirectFeeSetting>;
    entranceRateDirectFeeSettings: Array<EntranceRateDirectFeeSetting>;
    entranceRateBurnFeeSetting?: Maybe<EntranceRateBurnFeeSetting>;
    entranceRateBurnFeeSettings: Array<EntranceRateBurnFeeSetting>;
    integrationAdapter?: Maybe<IntegrationAdapter>;
    integrationAdapters: Array<IntegrationAdapter>;
    policy?: Maybe<Policy>;
    policies: Array<Policy>;
    adapterBlacklistSetting?: Maybe<AdapterBlacklistSetting>;
    adapterBlacklistSettings: Array<AdapterBlacklistSetting>;
    adapterWhitelistSetting?: Maybe<AdapterWhitelistSetting>;
    adapterWhitelistSettings: Array<AdapterWhitelistSetting>;
    assetBlacklistSetting?: Maybe<AssetBlacklistSetting>;
    assetBlacklistSettings: Array<AssetBlacklistSetting>;
    assetWhitelistSetting?: Maybe<AssetWhitelistSetting>;
    assetWhitelistSettings: Array<AssetWhitelistSetting>;
    buySharesCallerWhitelistSetting?: Maybe<BuySharesCallerWhitelistSetting>;
    buySharesCallerWhitelistSettings: Array<BuySharesCallerWhitelistSetting>;
    guaranteedRedemptionSetting?: Maybe<GuaranteedRedemptionSetting>;
    guaranteedRedemptionSettings: Array<GuaranteedRedemptionSetting>;
    investorWhitelistSetting?: Maybe<InvestorWhitelistSetting>;
    investorWhitelistSettings: Array<InvestorWhitelistSetting>;
    maxConcentrationSetting?: Maybe<MaxConcentrationSetting>;
    maxConcentrationSettings: Array<MaxConcentrationSetting>;
    minMaxInvestmentSetting?: Maybe<MinMaxInvestmentSetting>;
    minMaxInvestmentSettings: Array<MinMaxInvestmentSetting>;
    unknownPolicySetting?: Maybe<UnknownPolicySetting>;
    unknownPolicySettings: Array<UnknownPolicySetting>;
    shareState?: Maybe<ShareState>;
    shareStates: Array<ShareState>;
    portfolioState?: Maybe<PortfolioState>;
    portfolioStates: Array<PortfolioState>;
    holdingState?: Maybe<HoldingState>;
    holdingStates: Array<HoldingState>;
    fundState?: Maybe<FundState>;
    fundStates: Array<FundState>;
    feeState?: Maybe<FeeState>;
    feeStates: Array<FeeState>;
    managementFeeState?: Maybe<ManagementFeeState>;
    managementFeeStates: Array<ManagementFeeState>;
    performanceFeeState?: Maybe<PerformanceFeeState>;
    performanceFeeStates: Array<PerformanceFeeState>;
    entranceRateDirectFeeState?: Maybe<EntranceRateDirectFeeState>;
    entranceRateDirectFeeStates: Array<EntranceRateDirectFeeState>;
    entranceRateBurnFeeState?: Maybe<EntranceRateBurnFeeState>;
    entranceRateBurnFeeStates: Array<EntranceRateBurnFeeState>;
    tokenSwapTrade?: Maybe<TokenSwapTrade>;
    tokenSwapTrades: Array<TokenSwapTrade>;
    multiTokenSwapTrade?: Maybe<MultiTokenSwapTrade>;
    multiTokenSwapTrades: Array<MultiTokenSwapTrade>;
    lendTrade?: Maybe<LendTrade>;
    lendTrades: Array<LendTrade>;
    multiLendTrade?: Maybe<MultiLendTrade>;
    multiLendTrades: Array<MultiLendTrade>;
    redeemTrade?: Maybe<RedeemTrade>;
    redeemTrades: Array<RedeemTrade>;
    multiRedeemTrade?: Maybe<MultiRedeemTrade>;
    multiRedeemTrades: Array<MultiRedeemTrade>;
    addTrackedAssetsTrade?: Maybe<AddTrackedAssetsTrade>;
    addTrackedAssetsTrades: Array<AddTrackedAssetsTrade>;
    removeTrackedAssetsTrade?: Maybe<RemoveTrackedAssetsTrade>;
    removeTrackedAssetsTrades: Array<RemoveTrackedAssetsTrade>;
    approveAssetsTrade?: Maybe<ApproveAssetsTrade>;
    approveAssetsTrades: Array<ApproveAssetsTrade>;
    stakeTrade?: Maybe<StakeTrade>;
    stakeTrades: Array<StakeTrade>;
    unstakeTrade?: Maybe<UnstakeTrade>;
    unstakeTrades: Array<UnstakeTrade>;
    claimRewardsTrade?: Maybe<ClaimRewardsTrade>;
    claimRewardsTrades: Array<ClaimRewardsTrade>;
    claimRewardsAndReinvestTrade?: Maybe<ClaimRewardsAndReinvestTrade>;
    claimRewardsAndReinvestTrades: Array<ClaimRewardsAndReinvestTrade>;
    claimRewardsAndSwapTrade?: Maybe<ClaimRewardsAndSwapTrade>;
    claimRewardsAndSwapTrades: Array<ClaimRewardsAndSwapTrade>;
    lendAndStakeTrade?: Maybe<LendAndStakeTrade>;
    lendAndStakeTrades: Array<LendAndStakeTrade>;
    unstakeAndRedeemTrade?: Maybe<UnstakeAndRedeemTrade>;
    unstakeAndRedeemTrades: Array<UnstakeAndRedeemTrade>;
    asset?: Maybe<Asset>;
    assets: Array<Asset>;
    currency?: Maybe<Currency>;
    currencies: Array<Currency>;
    curvePoolAssetDetail?: Maybe<CurvePoolAssetDetail>;
    curvePoolAssetDetails: Array<CurvePoolAssetDetail>;
    uniswapV2PoolAssetDetail?: Maybe<UniswapV2PoolAssetDetail>;
    uniswapV2PoolAssetDetails: Array<UniswapV2PoolAssetDetail>;
    assetAmount?: Maybe<AssetAmount>;
    assetAmounts: Array<AssetAmount>;
    assetPrice?: Maybe<AssetPrice>;
    assetPrices: Array<AssetPrice>;
    currencyPrice?: Maybe<CurrencyPrice>;
    currencyPrices: Array<CurrencyPrice>;
    hourlyAssetPriceCandle?: Maybe<HourlyAssetPriceCandle>;
    hourlyAssetPriceCandles: Array<HourlyAssetPriceCandle>;
    dailyAssetPriceCandle?: Maybe<DailyAssetPriceCandle>;
    dailyAssetPriceCandles: Array<DailyAssetPriceCandle>;
    monthlyAssetPriceCandle?: Maybe<MonthlyAssetPriceCandle>;
    monthlyAssetPriceCandles: Array<MonthlyAssetPriceCandle>;
    hourlyCurrencyPriceCandle?: Maybe<HourlyCurrencyPriceCandle>;
    hourlyCurrencyPriceCandles: Array<HourlyCurrencyPriceCandle>;
    dailyCurrencyPriceCandle?: Maybe<DailyCurrencyPriceCandle>;
    dailyCurrencyPriceCandles: Array<DailyCurrencyPriceCandle>;
    monthlyCurrencyPriceCandle?: Maybe<MonthlyCurrencyPriceCandle>;
    monthlyCurrencyPriceCandles: Array<MonthlyCurrencyPriceCandle>;
    hourlyPriceCandleGroup?: Maybe<HourlyPriceCandleGroup>;
    hourlyPriceCandleGroups: Array<HourlyPriceCandleGroup>;
    dailyPriceCandleGroup?: Maybe<DailyPriceCandleGroup>;
    dailyPriceCandleGroups: Array<DailyPriceCandleGroup>;
    monthlyPriceCandleGroup?: Maybe<MonthlyPriceCandleGroup>;
    monthlyPriceCandleGroups: Array<MonthlyPriceCandleGroup>;
    chainlinkAggregatorProxy?: Maybe<ChainlinkAggregatorProxy>;
    chainlinkAggregatorProxies: Array<ChainlinkAggregatorProxy>;
    cron?: Maybe<Cron>;
    crons: Array<Cron>;
    network?: Maybe<Network>;
    networks: Array<Network>;
    networkState?: Maybe<NetworkState>;
    networkStates: Array<NetworkState>;
    networkAssetHolding?: Maybe<NetworkAssetHolding>;
    networkAssetHoldings: Array<NetworkAssetHolding>;
    eventInterface?: Maybe<EventInterface>;
    eventInterfaces: Array<EventInterface>;
    networkEventInterface?: Maybe<NetworkEventInterface>;
    networkEventInterfaces: Array<NetworkEventInterface>;
    fundEventInterface?: Maybe<FundEventInterface>;
    fundEventInterfaces: Array<FundEventInterface>;
    comptrollerEventInterface?: Maybe<ComptrollerEventInterface>;
    comptrollerEventInterfaces: Array<ComptrollerEventInterface>;
    sharesChangeInterface?: Maybe<SharesChangeInterface>;
    sharesChangeInterfaces: Array<SharesChangeInterface>;
    feeSharesChangeInterface?: Maybe<FeeSharesChangeInterface>;
    feeSharesChangeInterfaces: Array<FeeSharesChangeInterface>;
    investmentSharesChangeInterface?: Maybe<InvestmentSharesChangeInterface>;
    investmentSharesChangeInterfaces: Array<InvestmentSharesChangeInterface>;
    fundStateInterface?: Maybe<FundStateInterface>;
    fundStateInterfaces: Array<FundStateInterface>;
    feeSettingInterface?: Maybe<FeeSettingInterface>;
    feeSettingInterfaces: Array<FeeSettingInterface>;
    policySettingInterface?: Maybe<PolicySettingInterface>;
    policySettingInterfaces: Array<PolicySettingInterface>;
    individualFeeStateInterface?: Maybe<IndividualFeeStateInterface>;
    individualFeeStateInterfaces: Array<IndividualFeeStateInterface>;
    periodicFundStateInterface?: Maybe<PeriodicFundStateInterface>;
    periodicFundStateInterfaces: Array<PeriodicFundStateInterface>;
    trade?: Maybe<Trade>;
    trades: Array<Trade>;
    /** Access to subgraph metadata */
    _meta?: Maybe<_Meta_>;
};
export declare type QueryNewFundCreatedEventArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type QueryNewFundCreatedEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<NewFundCreatedEvent_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<NewFundCreatedEvent_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type QueryVaultProxySetEventArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type QueryVaultProxySetEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<VaultProxySetEvent_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<VaultProxySetEvent_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type QuerySharesBoughtEventArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type QuerySharesBoughtEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<SharesBoughtEvent_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<SharesBoughtEvent_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type QuerySharesRedeemedEventArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type QuerySharesRedeemedEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<SharesRedeemedEvent_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<SharesRedeemedEvent_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type QueryAssetWithdrawnEventArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type QueryAssetWithdrawnEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<AssetWithdrawnEvent_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<AssetWithdrawnEvent_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type QueryTrackedAssetAddedEventArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type QueryTrackedAssetAddedEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<TrackedAssetAddedEvent_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<TrackedAssetAddedEvent_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type QueryTrackedAssetRemovedEventArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type QueryTrackedAssetRemovedEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<TrackedAssetRemovedEvent_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<TrackedAssetRemovedEvent_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type QueryAuthUserAddedForFundEventArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type QueryAuthUserAddedForFundEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<AuthUserAddedForFundEvent_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<AuthUserAddedForFundEvent_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type QueryAuthUserRemovedForFundEventArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type QueryAuthUserRemovedForFundEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<AuthUserRemovedForFundEvent_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<AuthUserRemovedForFundEvent_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type QueryCallOnIntegrationExecutedForFundEventArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type QueryCallOnIntegrationExecutedForFundEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<CallOnIntegrationExecutedForFundEvent_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<CallOnIntegrationExecutedForFundEvent_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type QueryMigrationSignaledEventArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type QueryMigrationSignaledEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<MigrationSignaledEvent_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<MigrationSignaledEvent_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type QueryMigrationCancelledEventArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type QueryMigrationCancelledEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<MigrationCancelledEvent_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<MigrationCancelledEvent_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type QueryMigrationExecutedEventArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type QueryMigrationExecutedEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<MigrationExecutedEvent_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<MigrationExecutedEvent_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type QueryMigrationInCancelHookFailedEventArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type QueryMigrationInCancelHookFailedEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<MigrationInCancelHookFailedEvent_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<MigrationInCancelHookFailedEvent_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type QueryMigrationOutHookFailedEventArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type QueryMigrationOutHookFailedEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<MigrationOutHookFailedEvent_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<MigrationOutHookFailedEvent_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type QueryFeeEnabledForFundEventArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type QueryFeeEnabledForFundEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<FeeEnabledForFundEvent_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<FeeEnabledForFundEvent_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type QueryFeesRecipientSetForFundEventArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type QueryFeesRecipientSetForFundEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<FeesRecipientSetForFundEvent_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<FeesRecipientSetForFundEvent_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type QueryFeeSettledForFundEventArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type QueryFeeSettledForFundEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<FeeSettledForFundEvent_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<FeeSettledForFundEvent_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type QueryAllSharesOutstandingForcePaidForFundEventArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type QueryAllSharesOutstandingForcePaidForFundEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<AllSharesOutstandingForcePaidForFundEvent_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<AllSharesOutstandingForcePaidForFundEvent_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type QuerySharesOutstandingPaidForFundEventArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type QuerySharesOutstandingPaidForFundEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<SharesOutstandingPaidForFundEvent_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<SharesOutstandingPaidForFundEvent_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type QueryMigratedSharesDuePaidEventArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type QueryMigratedSharesDuePaidEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<MigratedSharesDuePaidEvent_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<MigratedSharesDuePaidEvent_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type QueryPolicyEnabledForFundEventArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type QueryPolicyEnabledForFundEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<PolicyEnabledForFundEvent_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<PolicyEnabledForFundEvent_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type QueryPolicyDisabledForFundEventArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type QueryPolicyDisabledForFundEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<PolicyDisabledForFundEvent_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<PolicyDisabledForFundEvent_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type QueryAccessorSetEventArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type QueryAccessorSetEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<AccessorSetEvent_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<AccessorSetEvent_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type QueryOwnerSetEventArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type QueryOwnerSetEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<OwnerSetEvent_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<OwnerSetEvent_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type QueryMigratorSetEventArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type QueryMigratorSetEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<MigratorSetEvent_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<MigratorSetEvent_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type QueryVaultLibSetEventArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type QueryVaultLibSetEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<VaultLibSetEvent_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<VaultLibSetEvent_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type QueryApprovalEventArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type QueryApprovalEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<ApprovalEvent_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<ApprovalEvent_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type QueryTransferEventArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type QueryTransferEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<TransferEvent_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<TransferEvent_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type QueryAdapterBlacklistAddressesAddedEventArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type QueryAdapterBlacklistAddressesAddedEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<AdapterBlacklistAddressesAddedEvent_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<AdapterBlacklistAddressesAddedEvent_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type QueryAdapterBlacklistAddressesRemovedEventArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type QueryAdapterBlacklistAddressesRemovedEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<AdapterBlacklistAddressesRemovedEvent_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<AdapterBlacklistAddressesRemovedEvent_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type QueryAdapterWhitelistAddressesAddedEventArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type QueryAdapterWhitelistAddressesAddedEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<AdapterWhitelistAddressesAddedEvent_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<AdapterWhitelistAddressesAddedEvent_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type QueryAdapterWhitelistAddressesRemovedEventArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type QueryAdapterWhitelistAddressesRemovedEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<AdapterWhitelistAddressesRemovedEvent_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<AdapterWhitelistAddressesRemovedEvent_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type QueryAssetBlacklistAddressesAddedEventArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type QueryAssetBlacklistAddressesAddedEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<AssetBlacklistAddressesAddedEvent_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<AssetBlacklistAddressesAddedEvent_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type QueryAssetBlacklistAddressesRemovedEventArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type QueryAssetBlacklistAddressesRemovedEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<AssetBlacklistAddressesRemovedEvent_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<AssetBlacklistAddressesRemovedEvent_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type QueryAssetWhitelistAddressesAddedEventArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type QueryAssetWhitelistAddressesAddedEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<AssetWhitelistAddressesAddedEvent_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<AssetWhitelistAddressesAddedEvent_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type QueryAssetWhitelistAddressesRemovedEventArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type QueryAssetWhitelistAddressesRemovedEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<AssetWhitelistAddressesRemovedEvent_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<AssetWhitelistAddressesRemovedEvent_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type QueryBuySharesCallerWhitelistAddressesAddedEventArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type QueryBuySharesCallerWhitelistAddressesAddedEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<BuySharesCallerWhitelistAddressesAddedEvent_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<BuySharesCallerWhitelistAddressesAddedEvent_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type QueryBuySharesCallerWhitelistAddressesRemovedEventArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type QueryBuySharesCallerWhitelistAddressesRemovedEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<BuySharesCallerWhitelistAddressesRemovedEvent_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<BuySharesCallerWhitelistAddressesRemovedEvent_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type QueryGuaranteedRedemptionFundSettingsSetEventArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type QueryGuaranteedRedemptionFundSettingsSetEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<GuaranteedRedemptionFundSettingsSetEvent_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<GuaranteedRedemptionFundSettingsSetEvent_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type QueryInvestorWhitelistAddressesAddedEventArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type QueryInvestorWhitelistAddressesAddedEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<InvestorWhitelistAddressesAddedEvent_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<InvestorWhitelistAddressesAddedEvent_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type QueryInvestorWhitelistAddressesRemovedEventArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type QueryInvestorWhitelistAddressesRemovedEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<InvestorWhitelistAddressesRemovedEvent_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<InvestorWhitelistAddressesRemovedEvent_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type QueryMaxConcentrationSetEventArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type QueryMaxConcentrationSetEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<MaxConcentrationSetEvent_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<MaxConcentrationSetEvent_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type QueryMinMaxInvestmentFundSettingsSetEventArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type QueryMinMaxInvestmentFundSettingsSetEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<MinMaxInvestmentFundSettingsSetEvent_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<MinMaxInvestmentFundSettingsSetEvent_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type QueryManagementFeeSettingsAddedEventArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type QueryManagementFeeSettingsAddedEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<ManagementFeeSettingsAddedEvent_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<ManagementFeeSettingsAddedEvent_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type QueryManagementFeeSettledEventArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type QueryManagementFeeSettledEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<ManagementFeeSettledEvent_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<ManagementFeeSettledEvent_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type QueryManagementFeeActivatedForMigratedFundEventArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type QueryManagementFeeActivatedForMigratedFundEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<ManagementFeeActivatedForMigratedFundEvent_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<ManagementFeeActivatedForMigratedFundEvent_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type QueryPerformanceFeeSettingsAddedEventArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type QueryPerformanceFeeSettingsAddedEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<PerformanceFeeSettingsAddedEvent_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<PerformanceFeeSettingsAddedEvent_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type QueryPerformanceFeeActivatedForFundEventArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type QueryPerformanceFeeActivatedForFundEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<PerformanceFeeActivatedForFundEvent_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<PerformanceFeeActivatedForFundEvent_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type QueryPerformanceFeeSharePriceUpdatedEventArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type QueryPerformanceFeeSharePriceUpdatedEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<PerformanceFeeSharePriceUpdatedEvent_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<PerformanceFeeSharePriceUpdatedEvent_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type QueryPerformanceFeePaidOutEventArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type QueryPerformanceFeePaidOutEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<PerformanceFeePaidOutEvent_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<PerformanceFeePaidOutEvent_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type QueryPerformanceFeePerformanceUpdatedEventArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type QueryPerformanceFeePerformanceUpdatedEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<PerformanceFeePerformanceUpdatedEvent_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<PerformanceFeePerformanceUpdatedEvent_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type QueryEntranceRateDirectFeeSettingsAddedEventArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type QueryEntranceRateDirectFeeSettingsAddedEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<EntranceRateDirectFeeSettingsAddedEvent_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<EntranceRateDirectFeeSettingsAddedEvent_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type QueryEntranceRateDirectFeeSettledEventArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type QueryEntranceRateDirectFeeSettledEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<EntranceRateDirectFeeSettledEvent_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<EntranceRateDirectFeeSettledEvent_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type QueryEntranceRateBurnFeeSettingsAddedEventArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type QueryEntranceRateBurnFeeSettingsAddedEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<EntranceRateBurnFeeSettingsAddedEvent_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<EntranceRateBurnFeeSettingsAddedEvent_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type QueryEntranceRateBurnFeeSettledEventArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type QueryEntranceRateBurnFeeSettledEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<EntranceRateBurnFeeSettledEvent_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<EntranceRateBurnFeeSettledEvent_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type QueryOverridePauseSetEventArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type QueryOverridePauseSetEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<OverridePauseSetEvent_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<OverridePauseSetEvent_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type QueryPreRedeemSharesHookFailedEventArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type QueryPreRedeemSharesHookFailedEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<PreRedeemSharesHookFailedEvent_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<PreRedeemSharesHookFailedEvent_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type QueryVaultProxyDeployedEventArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type QueryVaultProxyDeployedEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<VaultProxyDeployedEvent_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<VaultProxyDeployedEvent_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type QueryComptrollerProxyDeployedEventArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type QueryComptrollerProxyDeployedEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<ComptrollerProxyDeployedEvent_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<ComptrollerProxyDeployedEvent_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type QueryComptrollerLibSetEventArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type QueryComptrollerLibSetEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<ComptrollerLibSetEvent_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<ComptrollerLibSetEvent_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type QueryAdapterRegisteredEventArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type QueryAdapterRegisteredEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<AdapterRegisteredEvent_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<AdapterRegisteredEvent_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type QueryAdapterDeregisteredEventArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type QueryAdapterDeregisteredEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<AdapterDeregisteredEvent_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<AdapterDeregisteredEvent_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type QueryTrackedAssetsLimitSetEventArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type QueryTrackedAssetsLimitSetEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<TrackedAssetsLimitSetEvent_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<TrackedAssetsLimitSetEvent_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type QueryPolicyRegisteredEventArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type QueryPolicyRegisteredEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<PolicyRegisteredEvent_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<PolicyRegisteredEvent_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type QueryPolicyDeregisteredEventArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type QueryPolicyDeregisteredEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<PolicyDeregisteredEvent_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<PolicyDeregisteredEvent_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type QueryGuaranteedRedemptionAdapterAddedEventArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type QueryGuaranteedRedemptionAdapterAddedEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<GuaranteedRedemptionAdapterAddedEvent_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<GuaranteedRedemptionAdapterAddedEvent_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type QueryGuaranteedRedemptionAdapterRemovedEventArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type QueryGuaranteedRedemptionAdapterRemovedEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<GuaranteedRedemptionAdapterRemovedEvent_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<GuaranteedRedemptionAdapterRemovedEvent_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type QueryGuaranteedRedemptionRedemptionWindowBufferSetEventArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type QueryGuaranteedRedemptionRedemptionWindowBufferSetEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<GuaranteedRedemptionRedemptionWindowBufferSetEvent_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<GuaranteedRedemptionRedemptionWindowBufferSetEvent_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type QueryFundDeployerSetEventArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type QueryFundDeployerSetEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<FundDeployerSetEvent_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<FundDeployerSetEvent_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type QueryValueInterpreterSetEventArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type QueryValueInterpreterSetEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<ValueInterpreterSetEvent_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<ValueInterpreterSetEvent_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type QueryOwnershipTransferredEventArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type QueryOwnershipTransferredEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<OwnershipTransferredEvent_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<OwnershipTransferredEvent_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type QueryDerivativeAddedEventArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type QueryDerivativeAddedEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<DerivativeAddedEvent_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<DerivativeAddedEvent_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type QueryDerivativeRemovedEventArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type QueryDerivativeRemovedEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<DerivativeRemovedEvent_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<DerivativeRemovedEvent_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type QueryDerivativeUpdatedEventArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type QueryDerivativeUpdatedEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<DerivativeUpdatedEvent_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<DerivativeUpdatedEvent_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type QueryAggregatorUpdatedEventArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type QueryAggregatorUpdatedEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<AggregatorUpdatedEvent_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<AggregatorUpdatedEvent_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type QueryEthUsdAggregatorSetEventArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type QueryEthUsdAggregatorSetEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<EthUsdAggregatorSetEvent_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<EthUsdAggregatorSetEvent_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type QueryPrimitiveAddedEventArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type QueryPrimitiveAddedEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<PrimitiveAddedEvent_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<PrimitiveAddedEvent_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type QueryPrimitiveRemovedEventArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type QueryPrimitiveRemovedEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<PrimitiveRemovedEvent_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<PrimitiveRemovedEvent_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type QueryFeeRegisteredEventArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type QueryFeeRegisteredEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<FeeRegisteredEvent_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<FeeRegisteredEvent_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type QueryFeeDeregisteredEventArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type QueryFeeDeregisteredEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<FeeDeregisteredEvent_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<FeeDeregisteredEvent_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type QueryMigrationTimelockSetEventArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type QueryMigrationTimelockSetEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<MigrationTimelockSetEvent_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<MigrationTimelockSetEvent_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type QueryNominatedOwnerRemovedEventArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type QueryNominatedOwnerRemovedEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<NominatedOwnerRemovedEvent_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<NominatedOwnerRemovedEvent_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type QueryNominatedOwnerSetEventArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type QueryNominatedOwnerSetEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<NominatedOwnerSetEvent_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<NominatedOwnerSetEvent_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type QueryDispatcherOwnershipTransferredEventArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type QueryDispatcherOwnershipTransferredEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<DispatcherOwnershipTransferredEvent_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<DispatcherOwnershipTransferredEvent_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type QuerySharesTokenSymbolSetEventArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type QuerySharesTokenSymbolSetEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<SharesTokenSymbolSetEvent_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<SharesTokenSymbolSetEvent_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type QueryReleaseStatusSetEventArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type QueryReleaseStatusSetEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<ReleaseStatusSetEvent_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<ReleaseStatusSetEvent_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type QueryVaultCallRegisteredEventArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type QueryVaultCallRegisteredEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<VaultCallRegisteredEvent_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<VaultCallRegisteredEvent_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type QueryVaultCallDeregisteredEventArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type QueryVaultCallDeregisteredEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<VaultCallDeregisteredEvent_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<VaultCallDeregisteredEvent_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type QueryTransactionArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type QueryTransactionsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<Transaction_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<Transaction_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type QueryIntegrationManagerArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type QueryIntegrationManagersArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<IntegrationManager_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<IntegrationManager_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type QueryPolicyManagerArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type QueryPolicyManagersArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<PolicyManager_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<PolicyManager_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type QueryFeeManagerArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type QueryFeeManagersArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<FeeManager_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<FeeManager_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type QueryGuaranteedRedemptionArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type QueryGuaranteedRedemptionsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<GuaranteedRedemption_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<GuaranteedRedemption_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type QueryFundArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type QueryFundsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<Fund_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<Fund_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type QueryComptrollerProxyArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type QueryComptrollerProxiesArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<ComptrollerProxy_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<ComptrollerProxy_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type QueryHourlyFundStateArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type QueryHourlyFundStatesArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<HourlyFundState_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<HourlyFundState_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type QueryDailyFundStateArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type QueryDailyFundStatesArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<DailyFundState_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<DailyFundState_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type QueryMonthlyFundStateArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type QueryMonthlyFundStatesArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<MonthlyFundState_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<MonthlyFundState_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type QueryMigrationArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type QueryMigrationsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<Migration_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<Migration_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type QueryReleaseArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type QueryReleasesArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<Release_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<Release_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type QueryAccountArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type QueryAccountsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<Account_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<Account_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type QueryInvestmentArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type QueryInvestmentsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<Investment_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<Investment_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type QueryInvestmentStateArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type QueryInvestmentStatesArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<InvestmentState_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<InvestmentState_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type QueryFeeArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type QueryFeesArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<Fee_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<Fee_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type QueryManagementFeeSettingArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type QueryManagementFeeSettingsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<ManagementFeeSetting_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<ManagementFeeSetting_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type QueryPerformanceFeeSettingArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type QueryPerformanceFeeSettingsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<PerformanceFeeSetting_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<PerformanceFeeSetting_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type QueryEntranceRateDirectFeeSettingArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type QueryEntranceRateDirectFeeSettingsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<EntranceRateDirectFeeSetting_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<EntranceRateDirectFeeSetting_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type QueryEntranceRateBurnFeeSettingArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type QueryEntranceRateBurnFeeSettingsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<EntranceRateBurnFeeSetting_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<EntranceRateBurnFeeSetting_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type QueryIntegrationAdapterArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type QueryIntegrationAdaptersArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<IntegrationAdapter_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<IntegrationAdapter_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type QueryPolicyArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type QueryPoliciesArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<Policy_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<Policy_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type QueryAdapterBlacklistSettingArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type QueryAdapterBlacklistSettingsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<AdapterBlacklistSetting_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<AdapterBlacklistSetting_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type QueryAdapterWhitelistSettingArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type QueryAdapterWhitelistSettingsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<AdapterWhitelistSetting_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<AdapterWhitelistSetting_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type QueryAssetBlacklistSettingArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type QueryAssetBlacklistSettingsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<AssetBlacklistSetting_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<AssetBlacklistSetting_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type QueryAssetWhitelistSettingArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type QueryAssetWhitelistSettingsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<AssetWhitelistSetting_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<AssetWhitelistSetting_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type QueryBuySharesCallerWhitelistSettingArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type QueryBuySharesCallerWhitelistSettingsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<BuySharesCallerWhitelistSetting_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<BuySharesCallerWhitelistSetting_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type QueryGuaranteedRedemptionSettingArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type QueryGuaranteedRedemptionSettingsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<GuaranteedRedemptionSetting_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<GuaranteedRedemptionSetting_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type QueryInvestorWhitelistSettingArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type QueryInvestorWhitelistSettingsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<InvestorWhitelistSetting_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<InvestorWhitelistSetting_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type QueryMaxConcentrationSettingArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type QueryMaxConcentrationSettingsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<MaxConcentrationSetting_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<MaxConcentrationSetting_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type QueryMinMaxInvestmentSettingArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type QueryMinMaxInvestmentSettingsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<MinMaxInvestmentSetting_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<MinMaxInvestmentSetting_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type QueryUnknownPolicySettingArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type QueryUnknownPolicySettingsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<UnknownPolicySetting_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<UnknownPolicySetting_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type QueryShareStateArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type QueryShareStatesArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<ShareState_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<ShareState_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type QueryPortfolioStateArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type QueryPortfolioStatesArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<PortfolioState_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<PortfolioState_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type QueryHoldingStateArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type QueryHoldingStatesArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<HoldingState_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<HoldingState_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type QueryFundStateArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type QueryFundStatesArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<FundState_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<FundState_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type QueryFeeStateArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type QueryFeeStatesArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<FeeState_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<FeeState_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type QueryManagementFeeStateArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type QueryManagementFeeStatesArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<ManagementFeeState_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<ManagementFeeState_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type QueryPerformanceFeeStateArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type QueryPerformanceFeeStatesArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<PerformanceFeeState_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<PerformanceFeeState_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type QueryEntranceRateDirectFeeStateArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type QueryEntranceRateDirectFeeStatesArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<EntranceRateDirectFeeState_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<EntranceRateDirectFeeState_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type QueryEntranceRateBurnFeeStateArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type QueryEntranceRateBurnFeeStatesArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<EntranceRateBurnFeeState_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<EntranceRateBurnFeeState_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type QueryTokenSwapTradeArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type QueryTokenSwapTradesArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<TokenSwapTrade_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<TokenSwapTrade_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type QueryMultiTokenSwapTradeArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type QueryMultiTokenSwapTradesArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<MultiTokenSwapTrade_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<MultiTokenSwapTrade_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type QueryLendTradeArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type QueryLendTradesArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<LendTrade_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<LendTrade_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type QueryMultiLendTradeArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type QueryMultiLendTradesArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<MultiLendTrade_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<MultiLendTrade_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type QueryRedeemTradeArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type QueryRedeemTradesArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<RedeemTrade_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<RedeemTrade_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type QueryMultiRedeemTradeArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type QueryMultiRedeemTradesArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<MultiRedeemTrade_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<MultiRedeemTrade_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type QueryAddTrackedAssetsTradeArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type QueryAddTrackedAssetsTradesArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<AddTrackedAssetsTrade_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<AddTrackedAssetsTrade_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type QueryRemoveTrackedAssetsTradeArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type QueryRemoveTrackedAssetsTradesArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<RemoveTrackedAssetsTrade_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<RemoveTrackedAssetsTrade_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type QueryApproveAssetsTradeArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type QueryApproveAssetsTradesArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<ApproveAssetsTrade_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<ApproveAssetsTrade_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type QueryStakeTradeArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type QueryStakeTradesArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<StakeTrade_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<StakeTrade_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type QueryUnstakeTradeArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type QueryUnstakeTradesArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<UnstakeTrade_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<UnstakeTrade_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type QueryClaimRewardsTradeArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type QueryClaimRewardsTradesArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<ClaimRewardsTrade_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<ClaimRewardsTrade_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type QueryClaimRewardsAndReinvestTradeArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type QueryClaimRewardsAndReinvestTradesArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<ClaimRewardsAndReinvestTrade_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<ClaimRewardsAndReinvestTrade_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type QueryClaimRewardsAndSwapTradeArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type QueryClaimRewardsAndSwapTradesArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<ClaimRewardsAndSwapTrade_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<ClaimRewardsAndSwapTrade_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type QueryLendAndStakeTradeArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type QueryLendAndStakeTradesArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<LendAndStakeTrade_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<LendAndStakeTrade_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type QueryUnstakeAndRedeemTradeArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type QueryUnstakeAndRedeemTradesArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<UnstakeAndRedeemTrade_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<UnstakeAndRedeemTrade_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type QueryAssetArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type QueryAssetsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<Asset_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<Asset_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type QueryCurrencyArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type QueryCurrenciesArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<Currency_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<Currency_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type QueryCurvePoolAssetDetailArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type QueryCurvePoolAssetDetailsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<CurvePoolAssetDetail_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<CurvePoolAssetDetail_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type QueryUniswapV2PoolAssetDetailArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type QueryUniswapV2PoolAssetDetailsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<UniswapV2PoolAssetDetail_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<UniswapV2PoolAssetDetail_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type QueryAssetAmountArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type QueryAssetAmountsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<AssetAmount_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<AssetAmount_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type QueryAssetPriceArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type QueryAssetPricesArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<AssetPrice_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<AssetPrice_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type QueryCurrencyPriceArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type QueryCurrencyPricesArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<CurrencyPrice_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<CurrencyPrice_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type QueryHourlyAssetPriceCandleArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type QueryHourlyAssetPriceCandlesArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<HourlyAssetPriceCandle_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<HourlyAssetPriceCandle_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type QueryDailyAssetPriceCandleArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type QueryDailyAssetPriceCandlesArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<DailyAssetPriceCandle_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<DailyAssetPriceCandle_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type QueryMonthlyAssetPriceCandleArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type QueryMonthlyAssetPriceCandlesArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<MonthlyAssetPriceCandle_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<MonthlyAssetPriceCandle_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type QueryHourlyCurrencyPriceCandleArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type QueryHourlyCurrencyPriceCandlesArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<HourlyCurrencyPriceCandle_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<HourlyCurrencyPriceCandle_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type QueryDailyCurrencyPriceCandleArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type QueryDailyCurrencyPriceCandlesArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<DailyCurrencyPriceCandle_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<DailyCurrencyPriceCandle_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type QueryMonthlyCurrencyPriceCandleArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type QueryMonthlyCurrencyPriceCandlesArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<MonthlyCurrencyPriceCandle_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<MonthlyCurrencyPriceCandle_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type QueryHourlyPriceCandleGroupArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type QueryHourlyPriceCandleGroupsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<HourlyPriceCandleGroup_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<HourlyPriceCandleGroup_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type QueryDailyPriceCandleGroupArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type QueryDailyPriceCandleGroupsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<DailyPriceCandleGroup_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<DailyPriceCandleGroup_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type QueryMonthlyPriceCandleGroupArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type QueryMonthlyPriceCandleGroupsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<MonthlyPriceCandleGroup_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<MonthlyPriceCandleGroup_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type QueryChainlinkAggregatorProxyArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type QueryChainlinkAggregatorProxiesArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<ChainlinkAggregatorProxy_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<ChainlinkAggregatorProxy_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type QueryCronArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type QueryCronsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<Cron_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<Cron_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type QueryNetworkArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type QueryNetworksArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<Network_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<Network_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type QueryNetworkStateArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type QueryNetworkStatesArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<NetworkState_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<NetworkState_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type QueryNetworkAssetHoldingArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type QueryNetworkAssetHoldingsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<NetworkAssetHolding_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<NetworkAssetHolding_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type QueryEventInterfaceArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type QueryEventInterfacesArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<EventInterface_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<EventInterface_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type QueryNetworkEventInterfaceArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type QueryNetworkEventInterfacesArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<NetworkEventInterface_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<NetworkEventInterface_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type QueryFundEventInterfaceArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type QueryFundEventInterfacesArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<FundEventInterface_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<FundEventInterface_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type QueryComptrollerEventInterfaceArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type QueryComptrollerEventInterfacesArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<ComptrollerEventInterface_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<ComptrollerEventInterface_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type QuerySharesChangeInterfaceArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type QuerySharesChangeInterfacesArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<SharesChangeInterface_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<SharesChangeInterface_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type QueryFeeSharesChangeInterfaceArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type QueryFeeSharesChangeInterfacesArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<FeeSharesChangeInterface_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<FeeSharesChangeInterface_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type QueryInvestmentSharesChangeInterfaceArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type QueryInvestmentSharesChangeInterfacesArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<InvestmentSharesChangeInterface_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<InvestmentSharesChangeInterface_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type QueryFundStateInterfaceArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type QueryFundStateInterfacesArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<FundStateInterface_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<FundStateInterface_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type QueryFeeSettingInterfaceArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type QueryFeeSettingInterfacesArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<FeeSettingInterface_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<FeeSettingInterface_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type QueryPolicySettingInterfaceArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type QueryPolicySettingInterfacesArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<PolicySettingInterface_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<PolicySettingInterface_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type QueryIndividualFeeStateInterfaceArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type QueryIndividualFeeStateInterfacesArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<IndividualFeeStateInterface_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<IndividualFeeStateInterface_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type QueryPeriodicFundStateInterfaceArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type QueryPeriodicFundStateInterfacesArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<PeriodicFundStateInterface_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<PeriodicFundStateInterface_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type QueryTradeArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type QueryTradesArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<Trade_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<Trade_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type Query_MetaArgs = {
    block?: Maybe<Block_Height>;
};
export declare type RedeemTrade = Trade & {
    __typename?: 'RedeemTrade';
    id: Scalars['ID'];
    fund: Fund;
    adapter: IntegrationAdapter;
    method: IntegrationMethod;
    incomingAssetAmount: AssetAmount;
    outgoingAssetAmount: AssetAmount;
    price: Scalars['BigDecimal'];
    timestamp: Scalars['BigInt'];
    fundState: FundState;
};
export declare type RedeemTrade_Filter = {
    id?: Maybe<Scalars['ID']>;
    id_not?: Maybe<Scalars['ID']>;
    id_gt?: Maybe<Scalars['ID']>;
    id_lt?: Maybe<Scalars['ID']>;
    id_gte?: Maybe<Scalars['ID']>;
    id_lte?: Maybe<Scalars['ID']>;
    id_in?: Maybe<Array<Scalars['ID']>>;
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    fund?: Maybe<Scalars['String']>;
    fund_not?: Maybe<Scalars['String']>;
    fund_gt?: Maybe<Scalars['String']>;
    fund_lt?: Maybe<Scalars['String']>;
    fund_gte?: Maybe<Scalars['String']>;
    fund_lte?: Maybe<Scalars['String']>;
    fund_in?: Maybe<Array<Scalars['String']>>;
    fund_not_in?: Maybe<Array<Scalars['String']>>;
    fund_contains?: Maybe<Scalars['String']>;
    fund_not_contains?: Maybe<Scalars['String']>;
    fund_starts_with?: Maybe<Scalars['String']>;
    fund_not_starts_with?: Maybe<Scalars['String']>;
    fund_ends_with?: Maybe<Scalars['String']>;
    fund_not_ends_with?: Maybe<Scalars['String']>;
    adapter?: Maybe<Scalars['String']>;
    adapter_not?: Maybe<Scalars['String']>;
    adapter_gt?: Maybe<Scalars['String']>;
    adapter_lt?: Maybe<Scalars['String']>;
    adapter_gte?: Maybe<Scalars['String']>;
    adapter_lte?: Maybe<Scalars['String']>;
    adapter_in?: Maybe<Array<Scalars['String']>>;
    adapter_not_in?: Maybe<Array<Scalars['String']>>;
    adapter_contains?: Maybe<Scalars['String']>;
    adapter_not_contains?: Maybe<Scalars['String']>;
    adapter_starts_with?: Maybe<Scalars['String']>;
    adapter_not_starts_with?: Maybe<Scalars['String']>;
    adapter_ends_with?: Maybe<Scalars['String']>;
    adapter_not_ends_with?: Maybe<Scalars['String']>;
    method?: Maybe<IntegrationMethod>;
    method_not?: Maybe<IntegrationMethod>;
    incomingAssetAmount?: Maybe<Scalars['String']>;
    incomingAssetAmount_not?: Maybe<Scalars['String']>;
    incomingAssetAmount_gt?: Maybe<Scalars['String']>;
    incomingAssetAmount_lt?: Maybe<Scalars['String']>;
    incomingAssetAmount_gte?: Maybe<Scalars['String']>;
    incomingAssetAmount_lte?: Maybe<Scalars['String']>;
    incomingAssetAmount_in?: Maybe<Array<Scalars['String']>>;
    incomingAssetAmount_not_in?: Maybe<Array<Scalars['String']>>;
    incomingAssetAmount_contains?: Maybe<Scalars['String']>;
    incomingAssetAmount_not_contains?: Maybe<Scalars['String']>;
    incomingAssetAmount_starts_with?: Maybe<Scalars['String']>;
    incomingAssetAmount_not_starts_with?: Maybe<Scalars['String']>;
    incomingAssetAmount_ends_with?: Maybe<Scalars['String']>;
    incomingAssetAmount_not_ends_with?: Maybe<Scalars['String']>;
    outgoingAssetAmount?: Maybe<Scalars['String']>;
    outgoingAssetAmount_not?: Maybe<Scalars['String']>;
    outgoingAssetAmount_gt?: Maybe<Scalars['String']>;
    outgoingAssetAmount_lt?: Maybe<Scalars['String']>;
    outgoingAssetAmount_gte?: Maybe<Scalars['String']>;
    outgoingAssetAmount_lte?: Maybe<Scalars['String']>;
    outgoingAssetAmount_in?: Maybe<Array<Scalars['String']>>;
    outgoingAssetAmount_not_in?: Maybe<Array<Scalars['String']>>;
    outgoingAssetAmount_contains?: Maybe<Scalars['String']>;
    outgoingAssetAmount_not_contains?: Maybe<Scalars['String']>;
    outgoingAssetAmount_starts_with?: Maybe<Scalars['String']>;
    outgoingAssetAmount_not_starts_with?: Maybe<Scalars['String']>;
    outgoingAssetAmount_ends_with?: Maybe<Scalars['String']>;
    outgoingAssetAmount_not_ends_with?: Maybe<Scalars['String']>;
    price?: Maybe<Scalars['BigDecimal']>;
    price_not?: Maybe<Scalars['BigDecimal']>;
    price_gt?: Maybe<Scalars['BigDecimal']>;
    price_lt?: Maybe<Scalars['BigDecimal']>;
    price_gte?: Maybe<Scalars['BigDecimal']>;
    price_lte?: Maybe<Scalars['BigDecimal']>;
    price_in?: Maybe<Array<Scalars['BigDecimal']>>;
    price_not_in?: Maybe<Array<Scalars['BigDecimal']>>;
    timestamp?: Maybe<Scalars['BigInt']>;
    timestamp_not?: Maybe<Scalars['BigInt']>;
    timestamp_gt?: Maybe<Scalars['BigInt']>;
    timestamp_lt?: Maybe<Scalars['BigInt']>;
    timestamp_gte?: Maybe<Scalars['BigInt']>;
    timestamp_lte?: Maybe<Scalars['BigInt']>;
    timestamp_in?: Maybe<Array<Scalars['BigInt']>>;
    timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;
    fundState?: Maybe<Scalars['String']>;
    fundState_not?: Maybe<Scalars['String']>;
    fundState_gt?: Maybe<Scalars['String']>;
    fundState_lt?: Maybe<Scalars['String']>;
    fundState_gte?: Maybe<Scalars['String']>;
    fundState_lte?: Maybe<Scalars['String']>;
    fundState_in?: Maybe<Array<Scalars['String']>>;
    fundState_not_in?: Maybe<Array<Scalars['String']>>;
    fundState_contains?: Maybe<Scalars['String']>;
    fundState_not_contains?: Maybe<Scalars['String']>;
    fundState_starts_with?: Maybe<Scalars['String']>;
    fundState_not_starts_with?: Maybe<Scalars['String']>;
    fundState_ends_with?: Maybe<Scalars['String']>;
    fundState_not_ends_with?: Maybe<Scalars['String']>;
};
export declare enum RedeemTrade_OrderBy {
    Id = "id",
    Fund = "fund",
    Adapter = "adapter",
    Method = "method",
    IncomingAssetAmount = "incomingAssetAmount",
    OutgoingAssetAmount = "outgoingAssetAmount",
    Price = "price",
    Timestamp = "timestamp",
    FundState = "fundState"
}
export declare type Release = {
    __typename?: 'Release';
    id: Scalars['ID'];
    current: Scalars['Boolean'];
    open: Scalars['BigInt'];
    close?: Maybe<Scalars['BigInt']>;
    funds: Array<Fund>;
    assets: Array<Asset>;
    network: Network;
    adapterBlacklist: Scalars['String'];
    adapterWhitelist: Scalars['String'];
    aggregatedDerivativePriceFeed: Scalars['String'];
    alphaHomoraV1Adapter: Scalars['String'];
    aaveAdapter: Scalars['String'];
    assetBlacklist: Scalars['String'];
    assetWhitelist: Scalars['String'];
    buySharesCallerWhitelist: Scalars['String'];
    chaiAdapter: Scalars['String'];
    chaiIntegratee: Scalars['String'];
    chainlinkPriceFeed: Scalars['String'];
    compoundAdapter: Scalars['String'];
    comptrollerLib: Scalars['String'];
    dispatcher: Scalars['String'];
    entranceRateBurnFee: Scalars['String'];
    entranceRateDirectFee: Scalars['String'];
    feeManager: Scalars['String'];
    fundActionsWrapper: Scalars['String'];
    fundDeployer: Scalars['String'];
    guaranteedRedemption: Scalars['String'];
    idleAdapter: Scalars['String'];
    idlePriceFeed: Scalars['String'];
    integrationManager: Scalars['String'];
    investorWhitelist: Scalars['String'];
    kyberAdapter: Scalars['String'];
    kyberIntegratee: Scalars['String'];
    managementFee: Scalars['String'];
    maxConcentration: Scalars['String'];
    minMaxInvestment: Scalars['String'];
    paraSwapAdapter: Scalars['String'];
    paraSwapV4Adapter: Scalars['String'];
    performanceFee: Scalars['String'];
    policyManager: Scalars['String'];
    synthetixAdapter: Scalars['String'];
    synthetixAddressResolver: Scalars['String'];
    synthetixDelegateApprovals: Scalars['String'];
    synthetixIntegratee: Scalars['String'];
    trackedAssetsAdapter: Scalars['String'];
    uniswapV2Adapter: Scalars['String'];
    uniswapV2Integratee: Scalars['String'];
    yearnVaultV2Adapter: Scalars['String'];
    valueInterpreter: Scalars['String'];
    vaultLib: Scalars['String'];
    wethToken: Scalars['String'];
    zeroExV2Adapter: Scalars['String'];
    aavePriceFeed: Scalars['String'];
    alphaHomoraV1PriceFeed: Scalars['String'];
    chaiPriceFeed: Scalars['String'];
    compoundPriceFeed: Scalars['String'];
    curvePriceFeed: Scalars['String'];
    curveExchangeAdapter: Scalars['String'];
    curveLiquidityAaveAdapter: Scalars['String'];
    curveLiquiditySethAdapter: Scalars['String'];
    curveLiquidityStethAdapter: Scalars['String'];
    lidoStethPriceFeed: Scalars['String'];
    stakehoundEthPriceFeed: Scalars['String'];
    synthetixPriceFeed: Scalars['String'];
    uniswapV2PoolPriceFeed: Scalars['String'];
    wdgldPriceFeed: Scalars['String'];
    yearnVaultV2PriceFeed: Scalars['String'];
};
export declare type ReleaseFundsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<Fund_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<Fund_Filter>;
};
export declare type ReleaseAssetsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<Asset_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<Asset_Filter>;
};
export declare type ReleaseStatusSetEvent = EventInterface & NetworkEventInterface & {
    __typename?: 'ReleaseStatusSetEvent';
    id: Scalars['ID'];
    timestamp: Scalars['BigInt'];
    transaction: Transaction;
    prevStatus: Scalars['Int'];
    nextStatus: Scalars['Int'];
};
export declare type ReleaseStatusSetEvent_Filter = {
    id?: Maybe<Scalars['ID']>;
    id_not?: Maybe<Scalars['ID']>;
    id_gt?: Maybe<Scalars['ID']>;
    id_lt?: Maybe<Scalars['ID']>;
    id_gte?: Maybe<Scalars['ID']>;
    id_lte?: Maybe<Scalars['ID']>;
    id_in?: Maybe<Array<Scalars['ID']>>;
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    timestamp?: Maybe<Scalars['BigInt']>;
    timestamp_not?: Maybe<Scalars['BigInt']>;
    timestamp_gt?: Maybe<Scalars['BigInt']>;
    timestamp_lt?: Maybe<Scalars['BigInt']>;
    timestamp_gte?: Maybe<Scalars['BigInt']>;
    timestamp_lte?: Maybe<Scalars['BigInt']>;
    timestamp_in?: Maybe<Array<Scalars['BigInt']>>;
    timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;
    transaction?: Maybe<Scalars['String']>;
    transaction_not?: Maybe<Scalars['String']>;
    transaction_gt?: Maybe<Scalars['String']>;
    transaction_lt?: Maybe<Scalars['String']>;
    transaction_gte?: Maybe<Scalars['String']>;
    transaction_lte?: Maybe<Scalars['String']>;
    transaction_in?: Maybe<Array<Scalars['String']>>;
    transaction_not_in?: Maybe<Array<Scalars['String']>>;
    transaction_contains?: Maybe<Scalars['String']>;
    transaction_not_contains?: Maybe<Scalars['String']>;
    transaction_starts_with?: Maybe<Scalars['String']>;
    transaction_not_starts_with?: Maybe<Scalars['String']>;
    transaction_ends_with?: Maybe<Scalars['String']>;
    transaction_not_ends_with?: Maybe<Scalars['String']>;
    prevStatus?: Maybe<Scalars['Int']>;
    prevStatus_not?: Maybe<Scalars['Int']>;
    prevStatus_gt?: Maybe<Scalars['Int']>;
    prevStatus_lt?: Maybe<Scalars['Int']>;
    prevStatus_gte?: Maybe<Scalars['Int']>;
    prevStatus_lte?: Maybe<Scalars['Int']>;
    prevStatus_in?: Maybe<Array<Scalars['Int']>>;
    prevStatus_not_in?: Maybe<Array<Scalars['Int']>>;
    nextStatus?: Maybe<Scalars['Int']>;
    nextStatus_not?: Maybe<Scalars['Int']>;
    nextStatus_gt?: Maybe<Scalars['Int']>;
    nextStatus_lt?: Maybe<Scalars['Int']>;
    nextStatus_gte?: Maybe<Scalars['Int']>;
    nextStatus_lte?: Maybe<Scalars['Int']>;
    nextStatus_in?: Maybe<Array<Scalars['Int']>>;
    nextStatus_not_in?: Maybe<Array<Scalars['Int']>>;
};
export declare enum ReleaseStatusSetEvent_OrderBy {
    Id = "id",
    Timestamp = "timestamp",
    Transaction = "transaction",
    PrevStatus = "prevStatus",
    NextStatus = "nextStatus"
}
export declare type Release_Filter = {
    id?: Maybe<Scalars['ID']>;
    id_not?: Maybe<Scalars['ID']>;
    id_gt?: Maybe<Scalars['ID']>;
    id_lt?: Maybe<Scalars['ID']>;
    id_gte?: Maybe<Scalars['ID']>;
    id_lte?: Maybe<Scalars['ID']>;
    id_in?: Maybe<Array<Scalars['ID']>>;
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    current?: Maybe<Scalars['Boolean']>;
    current_not?: Maybe<Scalars['Boolean']>;
    current_in?: Maybe<Array<Scalars['Boolean']>>;
    current_not_in?: Maybe<Array<Scalars['Boolean']>>;
    open?: Maybe<Scalars['BigInt']>;
    open_not?: Maybe<Scalars['BigInt']>;
    open_gt?: Maybe<Scalars['BigInt']>;
    open_lt?: Maybe<Scalars['BigInt']>;
    open_gte?: Maybe<Scalars['BigInt']>;
    open_lte?: Maybe<Scalars['BigInt']>;
    open_in?: Maybe<Array<Scalars['BigInt']>>;
    open_not_in?: Maybe<Array<Scalars['BigInt']>>;
    close?: Maybe<Scalars['BigInt']>;
    close_not?: Maybe<Scalars['BigInt']>;
    close_gt?: Maybe<Scalars['BigInt']>;
    close_lt?: Maybe<Scalars['BigInt']>;
    close_gte?: Maybe<Scalars['BigInt']>;
    close_lte?: Maybe<Scalars['BigInt']>;
    close_in?: Maybe<Array<Scalars['BigInt']>>;
    close_not_in?: Maybe<Array<Scalars['BigInt']>>;
    network?: Maybe<Scalars['String']>;
    network_not?: Maybe<Scalars['String']>;
    network_gt?: Maybe<Scalars['String']>;
    network_lt?: Maybe<Scalars['String']>;
    network_gte?: Maybe<Scalars['String']>;
    network_lte?: Maybe<Scalars['String']>;
    network_in?: Maybe<Array<Scalars['String']>>;
    network_not_in?: Maybe<Array<Scalars['String']>>;
    network_contains?: Maybe<Scalars['String']>;
    network_not_contains?: Maybe<Scalars['String']>;
    network_starts_with?: Maybe<Scalars['String']>;
    network_not_starts_with?: Maybe<Scalars['String']>;
    network_ends_with?: Maybe<Scalars['String']>;
    network_not_ends_with?: Maybe<Scalars['String']>;
    adapterBlacklist?: Maybe<Scalars['String']>;
    adapterBlacklist_not?: Maybe<Scalars['String']>;
    adapterBlacklist_gt?: Maybe<Scalars['String']>;
    adapterBlacklist_lt?: Maybe<Scalars['String']>;
    adapterBlacklist_gte?: Maybe<Scalars['String']>;
    adapterBlacklist_lte?: Maybe<Scalars['String']>;
    adapterBlacklist_in?: Maybe<Array<Scalars['String']>>;
    adapterBlacklist_not_in?: Maybe<Array<Scalars['String']>>;
    adapterBlacklist_contains?: Maybe<Scalars['String']>;
    adapterBlacklist_not_contains?: Maybe<Scalars['String']>;
    adapterBlacklist_starts_with?: Maybe<Scalars['String']>;
    adapterBlacklist_not_starts_with?: Maybe<Scalars['String']>;
    adapterBlacklist_ends_with?: Maybe<Scalars['String']>;
    adapterBlacklist_not_ends_with?: Maybe<Scalars['String']>;
    adapterWhitelist?: Maybe<Scalars['String']>;
    adapterWhitelist_not?: Maybe<Scalars['String']>;
    adapterWhitelist_gt?: Maybe<Scalars['String']>;
    adapterWhitelist_lt?: Maybe<Scalars['String']>;
    adapterWhitelist_gte?: Maybe<Scalars['String']>;
    adapterWhitelist_lte?: Maybe<Scalars['String']>;
    adapterWhitelist_in?: Maybe<Array<Scalars['String']>>;
    adapterWhitelist_not_in?: Maybe<Array<Scalars['String']>>;
    adapterWhitelist_contains?: Maybe<Scalars['String']>;
    adapterWhitelist_not_contains?: Maybe<Scalars['String']>;
    adapterWhitelist_starts_with?: Maybe<Scalars['String']>;
    adapterWhitelist_not_starts_with?: Maybe<Scalars['String']>;
    adapterWhitelist_ends_with?: Maybe<Scalars['String']>;
    adapterWhitelist_not_ends_with?: Maybe<Scalars['String']>;
    aggregatedDerivativePriceFeed?: Maybe<Scalars['String']>;
    aggregatedDerivativePriceFeed_not?: Maybe<Scalars['String']>;
    aggregatedDerivativePriceFeed_gt?: Maybe<Scalars['String']>;
    aggregatedDerivativePriceFeed_lt?: Maybe<Scalars['String']>;
    aggregatedDerivativePriceFeed_gte?: Maybe<Scalars['String']>;
    aggregatedDerivativePriceFeed_lte?: Maybe<Scalars['String']>;
    aggregatedDerivativePriceFeed_in?: Maybe<Array<Scalars['String']>>;
    aggregatedDerivativePriceFeed_not_in?: Maybe<Array<Scalars['String']>>;
    aggregatedDerivativePriceFeed_contains?: Maybe<Scalars['String']>;
    aggregatedDerivativePriceFeed_not_contains?: Maybe<Scalars['String']>;
    aggregatedDerivativePriceFeed_starts_with?: Maybe<Scalars['String']>;
    aggregatedDerivativePriceFeed_not_starts_with?: Maybe<Scalars['String']>;
    aggregatedDerivativePriceFeed_ends_with?: Maybe<Scalars['String']>;
    aggregatedDerivativePriceFeed_not_ends_with?: Maybe<Scalars['String']>;
    alphaHomoraV1Adapter?: Maybe<Scalars['String']>;
    alphaHomoraV1Adapter_not?: Maybe<Scalars['String']>;
    alphaHomoraV1Adapter_gt?: Maybe<Scalars['String']>;
    alphaHomoraV1Adapter_lt?: Maybe<Scalars['String']>;
    alphaHomoraV1Adapter_gte?: Maybe<Scalars['String']>;
    alphaHomoraV1Adapter_lte?: Maybe<Scalars['String']>;
    alphaHomoraV1Adapter_in?: Maybe<Array<Scalars['String']>>;
    alphaHomoraV1Adapter_not_in?: Maybe<Array<Scalars['String']>>;
    alphaHomoraV1Adapter_contains?: Maybe<Scalars['String']>;
    alphaHomoraV1Adapter_not_contains?: Maybe<Scalars['String']>;
    alphaHomoraV1Adapter_starts_with?: Maybe<Scalars['String']>;
    alphaHomoraV1Adapter_not_starts_with?: Maybe<Scalars['String']>;
    alphaHomoraV1Adapter_ends_with?: Maybe<Scalars['String']>;
    alphaHomoraV1Adapter_not_ends_with?: Maybe<Scalars['String']>;
    aaveAdapter?: Maybe<Scalars['String']>;
    aaveAdapter_not?: Maybe<Scalars['String']>;
    aaveAdapter_gt?: Maybe<Scalars['String']>;
    aaveAdapter_lt?: Maybe<Scalars['String']>;
    aaveAdapter_gte?: Maybe<Scalars['String']>;
    aaveAdapter_lte?: Maybe<Scalars['String']>;
    aaveAdapter_in?: Maybe<Array<Scalars['String']>>;
    aaveAdapter_not_in?: Maybe<Array<Scalars['String']>>;
    aaveAdapter_contains?: Maybe<Scalars['String']>;
    aaveAdapter_not_contains?: Maybe<Scalars['String']>;
    aaveAdapter_starts_with?: Maybe<Scalars['String']>;
    aaveAdapter_not_starts_with?: Maybe<Scalars['String']>;
    aaveAdapter_ends_with?: Maybe<Scalars['String']>;
    aaveAdapter_not_ends_with?: Maybe<Scalars['String']>;
    assetBlacklist?: Maybe<Scalars['String']>;
    assetBlacklist_not?: Maybe<Scalars['String']>;
    assetBlacklist_gt?: Maybe<Scalars['String']>;
    assetBlacklist_lt?: Maybe<Scalars['String']>;
    assetBlacklist_gte?: Maybe<Scalars['String']>;
    assetBlacklist_lte?: Maybe<Scalars['String']>;
    assetBlacklist_in?: Maybe<Array<Scalars['String']>>;
    assetBlacklist_not_in?: Maybe<Array<Scalars['String']>>;
    assetBlacklist_contains?: Maybe<Scalars['String']>;
    assetBlacklist_not_contains?: Maybe<Scalars['String']>;
    assetBlacklist_starts_with?: Maybe<Scalars['String']>;
    assetBlacklist_not_starts_with?: Maybe<Scalars['String']>;
    assetBlacklist_ends_with?: Maybe<Scalars['String']>;
    assetBlacklist_not_ends_with?: Maybe<Scalars['String']>;
    assetWhitelist?: Maybe<Scalars['String']>;
    assetWhitelist_not?: Maybe<Scalars['String']>;
    assetWhitelist_gt?: Maybe<Scalars['String']>;
    assetWhitelist_lt?: Maybe<Scalars['String']>;
    assetWhitelist_gte?: Maybe<Scalars['String']>;
    assetWhitelist_lte?: Maybe<Scalars['String']>;
    assetWhitelist_in?: Maybe<Array<Scalars['String']>>;
    assetWhitelist_not_in?: Maybe<Array<Scalars['String']>>;
    assetWhitelist_contains?: Maybe<Scalars['String']>;
    assetWhitelist_not_contains?: Maybe<Scalars['String']>;
    assetWhitelist_starts_with?: Maybe<Scalars['String']>;
    assetWhitelist_not_starts_with?: Maybe<Scalars['String']>;
    assetWhitelist_ends_with?: Maybe<Scalars['String']>;
    assetWhitelist_not_ends_with?: Maybe<Scalars['String']>;
    buySharesCallerWhitelist?: Maybe<Scalars['String']>;
    buySharesCallerWhitelist_not?: Maybe<Scalars['String']>;
    buySharesCallerWhitelist_gt?: Maybe<Scalars['String']>;
    buySharesCallerWhitelist_lt?: Maybe<Scalars['String']>;
    buySharesCallerWhitelist_gte?: Maybe<Scalars['String']>;
    buySharesCallerWhitelist_lte?: Maybe<Scalars['String']>;
    buySharesCallerWhitelist_in?: Maybe<Array<Scalars['String']>>;
    buySharesCallerWhitelist_not_in?: Maybe<Array<Scalars['String']>>;
    buySharesCallerWhitelist_contains?: Maybe<Scalars['String']>;
    buySharesCallerWhitelist_not_contains?: Maybe<Scalars['String']>;
    buySharesCallerWhitelist_starts_with?: Maybe<Scalars['String']>;
    buySharesCallerWhitelist_not_starts_with?: Maybe<Scalars['String']>;
    buySharesCallerWhitelist_ends_with?: Maybe<Scalars['String']>;
    buySharesCallerWhitelist_not_ends_with?: Maybe<Scalars['String']>;
    chaiAdapter?: Maybe<Scalars['String']>;
    chaiAdapter_not?: Maybe<Scalars['String']>;
    chaiAdapter_gt?: Maybe<Scalars['String']>;
    chaiAdapter_lt?: Maybe<Scalars['String']>;
    chaiAdapter_gte?: Maybe<Scalars['String']>;
    chaiAdapter_lte?: Maybe<Scalars['String']>;
    chaiAdapter_in?: Maybe<Array<Scalars['String']>>;
    chaiAdapter_not_in?: Maybe<Array<Scalars['String']>>;
    chaiAdapter_contains?: Maybe<Scalars['String']>;
    chaiAdapter_not_contains?: Maybe<Scalars['String']>;
    chaiAdapter_starts_with?: Maybe<Scalars['String']>;
    chaiAdapter_not_starts_with?: Maybe<Scalars['String']>;
    chaiAdapter_ends_with?: Maybe<Scalars['String']>;
    chaiAdapter_not_ends_with?: Maybe<Scalars['String']>;
    chaiIntegratee?: Maybe<Scalars['String']>;
    chaiIntegratee_not?: Maybe<Scalars['String']>;
    chaiIntegratee_gt?: Maybe<Scalars['String']>;
    chaiIntegratee_lt?: Maybe<Scalars['String']>;
    chaiIntegratee_gte?: Maybe<Scalars['String']>;
    chaiIntegratee_lte?: Maybe<Scalars['String']>;
    chaiIntegratee_in?: Maybe<Array<Scalars['String']>>;
    chaiIntegratee_not_in?: Maybe<Array<Scalars['String']>>;
    chaiIntegratee_contains?: Maybe<Scalars['String']>;
    chaiIntegratee_not_contains?: Maybe<Scalars['String']>;
    chaiIntegratee_starts_with?: Maybe<Scalars['String']>;
    chaiIntegratee_not_starts_with?: Maybe<Scalars['String']>;
    chaiIntegratee_ends_with?: Maybe<Scalars['String']>;
    chaiIntegratee_not_ends_with?: Maybe<Scalars['String']>;
    chainlinkPriceFeed?: Maybe<Scalars['String']>;
    chainlinkPriceFeed_not?: Maybe<Scalars['String']>;
    chainlinkPriceFeed_gt?: Maybe<Scalars['String']>;
    chainlinkPriceFeed_lt?: Maybe<Scalars['String']>;
    chainlinkPriceFeed_gte?: Maybe<Scalars['String']>;
    chainlinkPriceFeed_lte?: Maybe<Scalars['String']>;
    chainlinkPriceFeed_in?: Maybe<Array<Scalars['String']>>;
    chainlinkPriceFeed_not_in?: Maybe<Array<Scalars['String']>>;
    chainlinkPriceFeed_contains?: Maybe<Scalars['String']>;
    chainlinkPriceFeed_not_contains?: Maybe<Scalars['String']>;
    chainlinkPriceFeed_starts_with?: Maybe<Scalars['String']>;
    chainlinkPriceFeed_not_starts_with?: Maybe<Scalars['String']>;
    chainlinkPriceFeed_ends_with?: Maybe<Scalars['String']>;
    chainlinkPriceFeed_not_ends_with?: Maybe<Scalars['String']>;
    compoundAdapter?: Maybe<Scalars['String']>;
    compoundAdapter_not?: Maybe<Scalars['String']>;
    compoundAdapter_gt?: Maybe<Scalars['String']>;
    compoundAdapter_lt?: Maybe<Scalars['String']>;
    compoundAdapter_gte?: Maybe<Scalars['String']>;
    compoundAdapter_lte?: Maybe<Scalars['String']>;
    compoundAdapter_in?: Maybe<Array<Scalars['String']>>;
    compoundAdapter_not_in?: Maybe<Array<Scalars['String']>>;
    compoundAdapter_contains?: Maybe<Scalars['String']>;
    compoundAdapter_not_contains?: Maybe<Scalars['String']>;
    compoundAdapter_starts_with?: Maybe<Scalars['String']>;
    compoundAdapter_not_starts_with?: Maybe<Scalars['String']>;
    compoundAdapter_ends_with?: Maybe<Scalars['String']>;
    compoundAdapter_not_ends_with?: Maybe<Scalars['String']>;
    comptrollerLib?: Maybe<Scalars['String']>;
    comptrollerLib_not?: Maybe<Scalars['String']>;
    comptrollerLib_gt?: Maybe<Scalars['String']>;
    comptrollerLib_lt?: Maybe<Scalars['String']>;
    comptrollerLib_gte?: Maybe<Scalars['String']>;
    comptrollerLib_lte?: Maybe<Scalars['String']>;
    comptrollerLib_in?: Maybe<Array<Scalars['String']>>;
    comptrollerLib_not_in?: Maybe<Array<Scalars['String']>>;
    comptrollerLib_contains?: Maybe<Scalars['String']>;
    comptrollerLib_not_contains?: Maybe<Scalars['String']>;
    comptrollerLib_starts_with?: Maybe<Scalars['String']>;
    comptrollerLib_not_starts_with?: Maybe<Scalars['String']>;
    comptrollerLib_ends_with?: Maybe<Scalars['String']>;
    comptrollerLib_not_ends_with?: Maybe<Scalars['String']>;
    dispatcher?: Maybe<Scalars['String']>;
    dispatcher_not?: Maybe<Scalars['String']>;
    dispatcher_gt?: Maybe<Scalars['String']>;
    dispatcher_lt?: Maybe<Scalars['String']>;
    dispatcher_gte?: Maybe<Scalars['String']>;
    dispatcher_lte?: Maybe<Scalars['String']>;
    dispatcher_in?: Maybe<Array<Scalars['String']>>;
    dispatcher_not_in?: Maybe<Array<Scalars['String']>>;
    dispatcher_contains?: Maybe<Scalars['String']>;
    dispatcher_not_contains?: Maybe<Scalars['String']>;
    dispatcher_starts_with?: Maybe<Scalars['String']>;
    dispatcher_not_starts_with?: Maybe<Scalars['String']>;
    dispatcher_ends_with?: Maybe<Scalars['String']>;
    dispatcher_not_ends_with?: Maybe<Scalars['String']>;
    entranceRateBurnFee?: Maybe<Scalars['String']>;
    entranceRateBurnFee_not?: Maybe<Scalars['String']>;
    entranceRateBurnFee_gt?: Maybe<Scalars['String']>;
    entranceRateBurnFee_lt?: Maybe<Scalars['String']>;
    entranceRateBurnFee_gte?: Maybe<Scalars['String']>;
    entranceRateBurnFee_lte?: Maybe<Scalars['String']>;
    entranceRateBurnFee_in?: Maybe<Array<Scalars['String']>>;
    entranceRateBurnFee_not_in?: Maybe<Array<Scalars['String']>>;
    entranceRateBurnFee_contains?: Maybe<Scalars['String']>;
    entranceRateBurnFee_not_contains?: Maybe<Scalars['String']>;
    entranceRateBurnFee_starts_with?: Maybe<Scalars['String']>;
    entranceRateBurnFee_not_starts_with?: Maybe<Scalars['String']>;
    entranceRateBurnFee_ends_with?: Maybe<Scalars['String']>;
    entranceRateBurnFee_not_ends_with?: Maybe<Scalars['String']>;
    entranceRateDirectFee?: Maybe<Scalars['String']>;
    entranceRateDirectFee_not?: Maybe<Scalars['String']>;
    entranceRateDirectFee_gt?: Maybe<Scalars['String']>;
    entranceRateDirectFee_lt?: Maybe<Scalars['String']>;
    entranceRateDirectFee_gte?: Maybe<Scalars['String']>;
    entranceRateDirectFee_lte?: Maybe<Scalars['String']>;
    entranceRateDirectFee_in?: Maybe<Array<Scalars['String']>>;
    entranceRateDirectFee_not_in?: Maybe<Array<Scalars['String']>>;
    entranceRateDirectFee_contains?: Maybe<Scalars['String']>;
    entranceRateDirectFee_not_contains?: Maybe<Scalars['String']>;
    entranceRateDirectFee_starts_with?: Maybe<Scalars['String']>;
    entranceRateDirectFee_not_starts_with?: Maybe<Scalars['String']>;
    entranceRateDirectFee_ends_with?: Maybe<Scalars['String']>;
    entranceRateDirectFee_not_ends_with?: Maybe<Scalars['String']>;
    feeManager?: Maybe<Scalars['String']>;
    feeManager_not?: Maybe<Scalars['String']>;
    feeManager_gt?: Maybe<Scalars['String']>;
    feeManager_lt?: Maybe<Scalars['String']>;
    feeManager_gte?: Maybe<Scalars['String']>;
    feeManager_lte?: Maybe<Scalars['String']>;
    feeManager_in?: Maybe<Array<Scalars['String']>>;
    feeManager_not_in?: Maybe<Array<Scalars['String']>>;
    feeManager_contains?: Maybe<Scalars['String']>;
    feeManager_not_contains?: Maybe<Scalars['String']>;
    feeManager_starts_with?: Maybe<Scalars['String']>;
    feeManager_not_starts_with?: Maybe<Scalars['String']>;
    feeManager_ends_with?: Maybe<Scalars['String']>;
    feeManager_not_ends_with?: Maybe<Scalars['String']>;
    fundActionsWrapper?: Maybe<Scalars['String']>;
    fundActionsWrapper_not?: Maybe<Scalars['String']>;
    fundActionsWrapper_gt?: Maybe<Scalars['String']>;
    fundActionsWrapper_lt?: Maybe<Scalars['String']>;
    fundActionsWrapper_gte?: Maybe<Scalars['String']>;
    fundActionsWrapper_lte?: Maybe<Scalars['String']>;
    fundActionsWrapper_in?: Maybe<Array<Scalars['String']>>;
    fundActionsWrapper_not_in?: Maybe<Array<Scalars['String']>>;
    fundActionsWrapper_contains?: Maybe<Scalars['String']>;
    fundActionsWrapper_not_contains?: Maybe<Scalars['String']>;
    fundActionsWrapper_starts_with?: Maybe<Scalars['String']>;
    fundActionsWrapper_not_starts_with?: Maybe<Scalars['String']>;
    fundActionsWrapper_ends_with?: Maybe<Scalars['String']>;
    fundActionsWrapper_not_ends_with?: Maybe<Scalars['String']>;
    fundDeployer?: Maybe<Scalars['String']>;
    fundDeployer_not?: Maybe<Scalars['String']>;
    fundDeployer_gt?: Maybe<Scalars['String']>;
    fundDeployer_lt?: Maybe<Scalars['String']>;
    fundDeployer_gte?: Maybe<Scalars['String']>;
    fundDeployer_lte?: Maybe<Scalars['String']>;
    fundDeployer_in?: Maybe<Array<Scalars['String']>>;
    fundDeployer_not_in?: Maybe<Array<Scalars['String']>>;
    fundDeployer_contains?: Maybe<Scalars['String']>;
    fundDeployer_not_contains?: Maybe<Scalars['String']>;
    fundDeployer_starts_with?: Maybe<Scalars['String']>;
    fundDeployer_not_starts_with?: Maybe<Scalars['String']>;
    fundDeployer_ends_with?: Maybe<Scalars['String']>;
    fundDeployer_not_ends_with?: Maybe<Scalars['String']>;
    guaranteedRedemption?: Maybe<Scalars['String']>;
    guaranteedRedemption_not?: Maybe<Scalars['String']>;
    guaranteedRedemption_gt?: Maybe<Scalars['String']>;
    guaranteedRedemption_lt?: Maybe<Scalars['String']>;
    guaranteedRedemption_gte?: Maybe<Scalars['String']>;
    guaranteedRedemption_lte?: Maybe<Scalars['String']>;
    guaranteedRedemption_in?: Maybe<Array<Scalars['String']>>;
    guaranteedRedemption_not_in?: Maybe<Array<Scalars['String']>>;
    guaranteedRedemption_contains?: Maybe<Scalars['String']>;
    guaranteedRedemption_not_contains?: Maybe<Scalars['String']>;
    guaranteedRedemption_starts_with?: Maybe<Scalars['String']>;
    guaranteedRedemption_not_starts_with?: Maybe<Scalars['String']>;
    guaranteedRedemption_ends_with?: Maybe<Scalars['String']>;
    guaranteedRedemption_not_ends_with?: Maybe<Scalars['String']>;
    idleAdapter?: Maybe<Scalars['String']>;
    idleAdapter_not?: Maybe<Scalars['String']>;
    idleAdapter_gt?: Maybe<Scalars['String']>;
    idleAdapter_lt?: Maybe<Scalars['String']>;
    idleAdapter_gte?: Maybe<Scalars['String']>;
    idleAdapter_lte?: Maybe<Scalars['String']>;
    idleAdapter_in?: Maybe<Array<Scalars['String']>>;
    idleAdapter_not_in?: Maybe<Array<Scalars['String']>>;
    idleAdapter_contains?: Maybe<Scalars['String']>;
    idleAdapter_not_contains?: Maybe<Scalars['String']>;
    idleAdapter_starts_with?: Maybe<Scalars['String']>;
    idleAdapter_not_starts_with?: Maybe<Scalars['String']>;
    idleAdapter_ends_with?: Maybe<Scalars['String']>;
    idleAdapter_not_ends_with?: Maybe<Scalars['String']>;
    idlePriceFeed?: Maybe<Scalars['String']>;
    idlePriceFeed_not?: Maybe<Scalars['String']>;
    idlePriceFeed_gt?: Maybe<Scalars['String']>;
    idlePriceFeed_lt?: Maybe<Scalars['String']>;
    idlePriceFeed_gte?: Maybe<Scalars['String']>;
    idlePriceFeed_lte?: Maybe<Scalars['String']>;
    idlePriceFeed_in?: Maybe<Array<Scalars['String']>>;
    idlePriceFeed_not_in?: Maybe<Array<Scalars['String']>>;
    idlePriceFeed_contains?: Maybe<Scalars['String']>;
    idlePriceFeed_not_contains?: Maybe<Scalars['String']>;
    idlePriceFeed_starts_with?: Maybe<Scalars['String']>;
    idlePriceFeed_not_starts_with?: Maybe<Scalars['String']>;
    idlePriceFeed_ends_with?: Maybe<Scalars['String']>;
    idlePriceFeed_not_ends_with?: Maybe<Scalars['String']>;
    integrationManager?: Maybe<Scalars['String']>;
    integrationManager_not?: Maybe<Scalars['String']>;
    integrationManager_gt?: Maybe<Scalars['String']>;
    integrationManager_lt?: Maybe<Scalars['String']>;
    integrationManager_gte?: Maybe<Scalars['String']>;
    integrationManager_lte?: Maybe<Scalars['String']>;
    integrationManager_in?: Maybe<Array<Scalars['String']>>;
    integrationManager_not_in?: Maybe<Array<Scalars['String']>>;
    integrationManager_contains?: Maybe<Scalars['String']>;
    integrationManager_not_contains?: Maybe<Scalars['String']>;
    integrationManager_starts_with?: Maybe<Scalars['String']>;
    integrationManager_not_starts_with?: Maybe<Scalars['String']>;
    integrationManager_ends_with?: Maybe<Scalars['String']>;
    integrationManager_not_ends_with?: Maybe<Scalars['String']>;
    investorWhitelist?: Maybe<Scalars['String']>;
    investorWhitelist_not?: Maybe<Scalars['String']>;
    investorWhitelist_gt?: Maybe<Scalars['String']>;
    investorWhitelist_lt?: Maybe<Scalars['String']>;
    investorWhitelist_gte?: Maybe<Scalars['String']>;
    investorWhitelist_lte?: Maybe<Scalars['String']>;
    investorWhitelist_in?: Maybe<Array<Scalars['String']>>;
    investorWhitelist_not_in?: Maybe<Array<Scalars['String']>>;
    investorWhitelist_contains?: Maybe<Scalars['String']>;
    investorWhitelist_not_contains?: Maybe<Scalars['String']>;
    investorWhitelist_starts_with?: Maybe<Scalars['String']>;
    investorWhitelist_not_starts_with?: Maybe<Scalars['String']>;
    investorWhitelist_ends_with?: Maybe<Scalars['String']>;
    investorWhitelist_not_ends_with?: Maybe<Scalars['String']>;
    kyberAdapter?: Maybe<Scalars['String']>;
    kyberAdapter_not?: Maybe<Scalars['String']>;
    kyberAdapter_gt?: Maybe<Scalars['String']>;
    kyberAdapter_lt?: Maybe<Scalars['String']>;
    kyberAdapter_gte?: Maybe<Scalars['String']>;
    kyberAdapter_lte?: Maybe<Scalars['String']>;
    kyberAdapter_in?: Maybe<Array<Scalars['String']>>;
    kyberAdapter_not_in?: Maybe<Array<Scalars['String']>>;
    kyberAdapter_contains?: Maybe<Scalars['String']>;
    kyberAdapter_not_contains?: Maybe<Scalars['String']>;
    kyberAdapter_starts_with?: Maybe<Scalars['String']>;
    kyberAdapter_not_starts_with?: Maybe<Scalars['String']>;
    kyberAdapter_ends_with?: Maybe<Scalars['String']>;
    kyberAdapter_not_ends_with?: Maybe<Scalars['String']>;
    kyberIntegratee?: Maybe<Scalars['String']>;
    kyberIntegratee_not?: Maybe<Scalars['String']>;
    kyberIntegratee_gt?: Maybe<Scalars['String']>;
    kyberIntegratee_lt?: Maybe<Scalars['String']>;
    kyberIntegratee_gte?: Maybe<Scalars['String']>;
    kyberIntegratee_lte?: Maybe<Scalars['String']>;
    kyberIntegratee_in?: Maybe<Array<Scalars['String']>>;
    kyberIntegratee_not_in?: Maybe<Array<Scalars['String']>>;
    kyberIntegratee_contains?: Maybe<Scalars['String']>;
    kyberIntegratee_not_contains?: Maybe<Scalars['String']>;
    kyberIntegratee_starts_with?: Maybe<Scalars['String']>;
    kyberIntegratee_not_starts_with?: Maybe<Scalars['String']>;
    kyberIntegratee_ends_with?: Maybe<Scalars['String']>;
    kyberIntegratee_not_ends_with?: Maybe<Scalars['String']>;
    managementFee?: Maybe<Scalars['String']>;
    managementFee_not?: Maybe<Scalars['String']>;
    managementFee_gt?: Maybe<Scalars['String']>;
    managementFee_lt?: Maybe<Scalars['String']>;
    managementFee_gte?: Maybe<Scalars['String']>;
    managementFee_lte?: Maybe<Scalars['String']>;
    managementFee_in?: Maybe<Array<Scalars['String']>>;
    managementFee_not_in?: Maybe<Array<Scalars['String']>>;
    managementFee_contains?: Maybe<Scalars['String']>;
    managementFee_not_contains?: Maybe<Scalars['String']>;
    managementFee_starts_with?: Maybe<Scalars['String']>;
    managementFee_not_starts_with?: Maybe<Scalars['String']>;
    managementFee_ends_with?: Maybe<Scalars['String']>;
    managementFee_not_ends_with?: Maybe<Scalars['String']>;
    maxConcentration?: Maybe<Scalars['String']>;
    maxConcentration_not?: Maybe<Scalars['String']>;
    maxConcentration_gt?: Maybe<Scalars['String']>;
    maxConcentration_lt?: Maybe<Scalars['String']>;
    maxConcentration_gte?: Maybe<Scalars['String']>;
    maxConcentration_lte?: Maybe<Scalars['String']>;
    maxConcentration_in?: Maybe<Array<Scalars['String']>>;
    maxConcentration_not_in?: Maybe<Array<Scalars['String']>>;
    maxConcentration_contains?: Maybe<Scalars['String']>;
    maxConcentration_not_contains?: Maybe<Scalars['String']>;
    maxConcentration_starts_with?: Maybe<Scalars['String']>;
    maxConcentration_not_starts_with?: Maybe<Scalars['String']>;
    maxConcentration_ends_with?: Maybe<Scalars['String']>;
    maxConcentration_not_ends_with?: Maybe<Scalars['String']>;
    minMaxInvestment?: Maybe<Scalars['String']>;
    minMaxInvestment_not?: Maybe<Scalars['String']>;
    minMaxInvestment_gt?: Maybe<Scalars['String']>;
    minMaxInvestment_lt?: Maybe<Scalars['String']>;
    minMaxInvestment_gte?: Maybe<Scalars['String']>;
    minMaxInvestment_lte?: Maybe<Scalars['String']>;
    minMaxInvestment_in?: Maybe<Array<Scalars['String']>>;
    minMaxInvestment_not_in?: Maybe<Array<Scalars['String']>>;
    minMaxInvestment_contains?: Maybe<Scalars['String']>;
    minMaxInvestment_not_contains?: Maybe<Scalars['String']>;
    minMaxInvestment_starts_with?: Maybe<Scalars['String']>;
    minMaxInvestment_not_starts_with?: Maybe<Scalars['String']>;
    minMaxInvestment_ends_with?: Maybe<Scalars['String']>;
    minMaxInvestment_not_ends_with?: Maybe<Scalars['String']>;
    paraSwapAdapter?: Maybe<Scalars['String']>;
    paraSwapAdapter_not?: Maybe<Scalars['String']>;
    paraSwapAdapter_gt?: Maybe<Scalars['String']>;
    paraSwapAdapter_lt?: Maybe<Scalars['String']>;
    paraSwapAdapter_gte?: Maybe<Scalars['String']>;
    paraSwapAdapter_lte?: Maybe<Scalars['String']>;
    paraSwapAdapter_in?: Maybe<Array<Scalars['String']>>;
    paraSwapAdapter_not_in?: Maybe<Array<Scalars['String']>>;
    paraSwapAdapter_contains?: Maybe<Scalars['String']>;
    paraSwapAdapter_not_contains?: Maybe<Scalars['String']>;
    paraSwapAdapter_starts_with?: Maybe<Scalars['String']>;
    paraSwapAdapter_not_starts_with?: Maybe<Scalars['String']>;
    paraSwapAdapter_ends_with?: Maybe<Scalars['String']>;
    paraSwapAdapter_not_ends_with?: Maybe<Scalars['String']>;
    paraSwapV4Adapter?: Maybe<Scalars['String']>;
    paraSwapV4Adapter_not?: Maybe<Scalars['String']>;
    paraSwapV4Adapter_gt?: Maybe<Scalars['String']>;
    paraSwapV4Adapter_lt?: Maybe<Scalars['String']>;
    paraSwapV4Adapter_gte?: Maybe<Scalars['String']>;
    paraSwapV4Adapter_lte?: Maybe<Scalars['String']>;
    paraSwapV4Adapter_in?: Maybe<Array<Scalars['String']>>;
    paraSwapV4Adapter_not_in?: Maybe<Array<Scalars['String']>>;
    paraSwapV4Adapter_contains?: Maybe<Scalars['String']>;
    paraSwapV4Adapter_not_contains?: Maybe<Scalars['String']>;
    paraSwapV4Adapter_starts_with?: Maybe<Scalars['String']>;
    paraSwapV4Adapter_not_starts_with?: Maybe<Scalars['String']>;
    paraSwapV4Adapter_ends_with?: Maybe<Scalars['String']>;
    paraSwapV4Adapter_not_ends_with?: Maybe<Scalars['String']>;
    performanceFee?: Maybe<Scalars['String']>;
    performanceFee_not?: Maybe<Scalars['String']>;
    performanceFee_gt?: Maybe<Scalars['String']>;
    performanceFee_lt?: Maybe<Scalars['String']>;
    performanceFee_gte?: Maybe<Scalars['String']>;
    performanceFee_lte?: Maybe<Scalars['String']>;
    performanceFee_in?: Maybe<Array<Scalars['String']>>;
    performanceFee_not_in?: Maybe<Array<Scalars['String']>>;
    performanceFee_contains?: Maybe<Scalars['String']>;
    performanceFee_not_contains?: Maybe<Scalars['String']>;
    performanceFee_starts_with?: Maybe<Scalars['String']>;
    performanceFee_not_starts_with?: Maybe<Scalars['String']>;
    performanceFee_ends_with?: Maybe<Scalars['String']>;
    performanceFee_not_ends_with?: Maybe<Scalars['String']>;
    policyManager?: Maybe<Scalars['String']>;
    policyManager_not?: Maybe<Scalars['String']>;
    policyManager_gt?: Maybe<Scalars['String']>;
    policyManager_lt?: Maybe<Scalars['String']>;
    policyManager_gte?: Maybe<Scalars['String']>;
    policyManager_lte?: Maybe<Scalars['String']>;
    policyManager_in?: Maybe<Array<Scalars['String']>>;
    policyManager_not_in?: Maybe<Array<Scalars['String']>>;
    policyManager_contains?: Maybe<Scalars['String']>;
    policyManager_not_contains?: Maybe<Scalars['String']>;
    policyManager_starts_with?: Maybe<Scalars['String']>;
    policyManager_not_starts_with?: Maybe<Scalars['String']>;
    policyManager_ends_with?: Maybe<Scalars['String']>;
    policyManager_not_ends_with?: Maybe<Scalars['String']>;
    synthetixAdapter?: Maybe<Scalars['String']>;
    synthetixAdapter_not?: Maybe<Scalars['String']>;
    synthetixAdapter_gt?: Maybe<Scalars['String']>;
    synthetixAdapter_lt?: Maybe<Scalars['String']>;
    synthetixAdapter_gte?: Maybe<Scalars['String']>;
    synthetixAdapter_lte?: Maybe<Scalars['String']>;
    synthetixAdapter_in?: Maybe<Array<Scalars['String']>>;
    synthetixAdapter_not_in?: Maybe<Array<Scalars['String']>>;
    synthetixAdapter_contains?: Maybe<Scalars['String']>;
    synthetixAdapter_not_contains?: Maybe<Scalars['String']>;
    synthetixAdapter_starts_with?: Maybe<Scalars['String']>;
    synthetixAdapter_not_starts_with?: Maybe<Scalars['String']>;
    synthetixAdapter_ends_with?: Maybe<Scalars['String']>;
    synthetixAdapter_not_ends_with?: Maybe<Scalars['String']>;
    synthetixAddressResolver?: Maybe<Scalars['String']>;
    synthetixAddressResolver_not?: Maybe<Scalars['String']>;
    synthetixAddressResolver_gt?: Maybe<Scalars['String']>;
    synthetixAddressResolver_lt?: Maybe<Scalars['String']>;
    synthetixAddressResolver_gte?: Maybe<Scalars['String']>;
    synthetixAddressResolver_lte?: Maybe<Scalars['String']>;
    synthetixAddressResolver_in?: Maybe<Array<Scalars['String']>>;
    synthetixAddressResolver_not_in?: Maybe<Array<Scalars['String']>>;
    synthetixAddressResolver_contains?: Maybe<Scalars['String']>;
    synthetixAddressResolver_not_contains?: Maybe<Scalars['String']>;
    synthetixAddressResolver_starts_with?: Maybe<Scalars['String']>;
    synthetixAddressResolver_not_starts_with?: Maybe<Scalars['String']>;
    synthetixAddressResolver_ends_with?: Maybe<Scalars['String']>;
    synthetixAddressResolver_not_ends_with?: Maybe<Scalars['String']>;
    synthetixDelegateApprovals?: Maybe<Scalars['String']>;
    synthetixDelegateApprovals_not?: Maybe<Scalars['String']>;
    synthetixDelegateApprovals_gt?: Maybe<Scalars['String']>;
    synthetixDelegateApprovals_lt?: Maybe<Scalars['String']>;
    synthetixDelegateApprovals_gte?: Maybe<Scalars['String']>;
    synthetixDelegateApprovals_lte?: Maybe<Scalars['String']>;
    synthetixDelegateApprovals_in?: Maybe<Array<Scalars['String']>>;
    synthetixDelegateApprovals_not_in?: Maybe<Array<Scalars['String']>>;
    synthetixDelegateApprovals_contains?: Maybe<Scalars['String']>;
    synthetixDelegateApprovals_not_contains?: Maybe<Scalars['String']>;
    synthetixDelegateApprovals_starts_with?: Maybe<Scalars['String']>;
    synthetixDelegateApprovals_not_starts_with?: Maybe<Scalars['String']>;
    synthetixDelegateApprovals_ends_with?: Maybe<Scalars['String']>;
    synthetixDelegateApprovals_not_ends_with?: Maybe<Scalars['String']>;
    synthetixIntegratee?: Maybe<Scalars['String']>;
    synthetixIntegratee_not?: Maybe<Scalars['String']>;
    synthetixIntegratee_gt?: Maybe<Scalars['String']>;
    synthetixIntegratee_lt?: Maybe<Scalars['String']>;
    synthetixIntegratee_gte?: Maybe<Scalars['String']>;
    synthetixIntegratee_lte?: Maybe<Scalars['String']>;
    synthetixIntegratee_in?: Maybe<Array<Scalars['String']>>;
    synthetixIntegratee_not_in?: Maybe<Array<Scalars['String']>>;
    synthetixIntegratee_contains?: Maybe<Scalars['String']>;
    synthetixIntegratee_not_contains?: Maybe<Scalars['String']>;
    synthetixIntegratee_starts_with?: Maybe<Scalars['String']>;
    synthetixIntegratee_not_starts_with?: Maybe<Scalars['String']>;
    synthetixIntegratee_ends_with?: Maybe<Scalars['String']>;
    synthetixIntegratee_not_ends_with?: Maybe<Scalars['String']>;
    trackedAssetsAdapter?: Maybe<Scalars['String']>;
    trackedAssetsAdapter_not?: Maybe<Scalars['String']>;
    trackedAssetsAdapter_gt?: Maybe<Scalars['String']>;
    trackedAssetsAdapter_lt?: Maybe<Scalars['String']>;
    trackedAssetsAdapter_gte?: Maybe<Scalars['String']>;
    trackedAssetsAdapter_lte?: Maybe<Scalars['String']>;
    trackedAssetsAdapter_in?: Maybe<Array<Scalars['String']>>;
    trackedAssetsAdapter_not_in?: Maybe<Array<Scalars['String']>>;
    trackedAssetsAdapter_contains?: Maybe<Scalars['String']>;
    trackedAssetsAdapter_not_contains?: Maybe<Scalars['String']>;
    trackedAssetsAdapter_starts_with?: Maybe<Scalars['String']>;
    trackedAssetsAdapter_not_starts_with?: Maybe<Scalars['String']>;
    trackedAssetsAdapter_ends_with?: Maybe<Scalars['String']>;
    trackedAssetsAdapter_not_ends_with?: Maybe<Scalars['String']>;
    uniswapV2Adapter?: Maybe<Scalars['String']>;
    uniswapV2Adapter_not?: Maybe<Scalars['String']>;
    uniswapV2Adapter_gt?: Maybe<Scalars['String']>;
    uniswapV2Adapter_lt?: Maybe<Scalars['String']>;
    uniswapV2Adapter_gte?: Maybe<Scalars['String']>;
    uniswapV2Adapter_lte?: Maybe<Scalars['String']>;
    uniswapV2Adapter_in?: Maybe<Array<Scalars['String']>>;
    uniswapV2Adapter_not_in?: Maybe<Array<Scalars['String']>>;
    uniswapV2Adapter_contains?: Maybe<Scalars['String']>;
    uniswapV2Adapter_not_contains?: Maybe<Scalars['String']>;
    uniswapV2Adapter_starts_with?: Maybe<Scalars['String']>;
    uniswapV2Adapter_not_starts_with?: Maybe<Scalars['String']>;
    uniswapV2Adapter_ends_with?: Maybe<Scalars['String']>;
    uniswapV2Adapter_not_ends_with?: Maybe<Scalars['String']>;
    uniswapV2Integratee?: Maybe<Scalars['String']>;
    uniswapV2Integratee_not?: Maybe<Scalars['String']>;
    uniswapV2Integratee_gt?: Maybe<Scalars['String']>;
    uniswapV2Integratee_lt?: Maybe<Scalars['String']>;
    uniswapV2Integratee_gte?: Maybe<Scalars['String']>;
    uniswapV2Integratee_lte?: Maybe<Scalars['String']>;
    uniswapV2Integratee_in?: Maybe<Array<Scalars['String']>>;
    uniswapV2Integratee_not_in?: Maybe<Array<Scalars['String']>>;
    uniswapV2Integratee_contains?: Maybe<Scalars['String']>;
    uniswapV2Integratee_not_contains?: Maybe<Scalars['String']>;
    uniswapV2Integratee_starts_with?: Maybe<Scalars['String']>;
    uniswapV2Integratee_not_starts_with?: Maybe<Scalars['String']>;
    uniswapV2Integratee_ends_with?: Maybe<Scalars['String']>;
    uniswapV2Integratee_not_ends_with?: Maybe<Scalars['String']>;
    yearnVaultV2Adapter?: Maybe<Scalars['String']>;
    yearnVaultV2Adapter_not?: Maybe<Scalars['String']>;
    yearnVaultV2Adapter_gt?: Maybe<Scalars['String']>;
    yearnVaultV2Adapter_lt?: Maybe<Scalars['String']>;
    yearnVaultV2Adapter_gte?: Maybe<Scalars['String']>;
    yearnVaultV2Adapter_lte?: Maybe<Scalars['String']>;
    yearnVaultV2Adapter_in?: Maybe<Array<Scalars['String']>>;
    yearnVaultV2Adapter_not_in?: Maybe<Array<Scalars['String']>>;
    yearnVaultV2Adapter_contains?: Maybe<Scalars['String']>;
    yearnVaultV2Adapter_not_contains?: Maybe<Scalars['String']>;
    yearnVaultV2Adapter_starts_with?: Maybe<Scalars['String']>;
    yearnVaultV2Adapter_not_starts_with?: Maybe<Scalars['String']>;
    yearnVaultV2Adapter_ends_with?: Maybe<Scalars['String']>;
    yearnVaultV2Adapter_not_ends_with?: Maybe<Scalars['String']>;
    valueInterpreter?: Maybe<Scalars['String']>;
    valueInterpreter_not?: Maybe<Scalars['String']>;
    valueInterpreter_gt?: Maybe<Scalars['String']>;
    valueInterpreter_lt?: Maybe<Scalars['String']>;
    valueInterpreter_gte?: Maybe<Scalars['String']>;
    valueInterpreter_lte?: Maybe<Scalars['String']>;
    valueInterpreter_in?: Maybe<Array<Scalars['String']>>;
    valueInterpreter_not_in?: Maybe<Array<Scalars['String']>>;
    valueInterpreter_contains?: Maybe<Scalars['String']>;
    valueInterpreter_not_contains?: Maybe<Scalars['String']>;
    valueInterpreter_starts_with?: Maybe<Scalars['String']>;
    valueInterpreter_not_starts_with?: Maybe<Scalars['String']>;
    valueInterpreter_ends_with?: Maybe<Scalars['String']>;
    valueInterpreter_not_ends_with?: Maybe<Scalars['String']>;
    vaultLib?: Maybe<Scalars['String']>;
    vaultLib_not?: Maybe<Scalars['String']>;
    vaultLib_gt?: Maybe<Scalars['String']>;
    vaultLib_lt?: Maybe<Scalars['String']>;
    vaultLib_gte?: Maybe<Scalars['String']>;
    vaultLib_lte?: Maybe<Scalars['String']>;
    vaultLib_in?: Maybe<Array<Scalars['String']>>;
    vaultLib_not_in?: Maybe<Array<Scalars['String']>>;
    vaultLib_contains?: Maybe<Scalars['String']>;
    vaultLib_not_contains?: Maybe<Scalars['String']>;
    vaultLib_starts_with?: Maybe<Scalars['String']>;
    vaultLib_not_starts_with?: Maybe<Scalars['String']>;
    vaultLib_ends_with?: Maybe<Scalars['String']>;
    vaultLib_not_ends_with?: Maybe<Scalars['String']>;
    wethToken?: Maybe<Scalars['String']>;
    wethToken_not?: Maybe<Scalars['String']>;
    wethToken_gt?: Maybe<Scalars['String']>;
    wethToken_lt?: Maybe<Scalars['String']>;
    wethToken_gte?: Maybe<Scalars['String']>;
    wethToken_lte?: Maybe<Scalars['String']>;
    wethToken_in?: Maybe<Array<Scalars['String']>>;
    wethToken_not_in?: Maybe<Array<Scalars['String']>>;
    wethToken_contains?: Maybe<Scalars['String']>;
    wethToken_not_contains?: Maybe<Scalars['String']>;
    wethToken_starts_with?: Maybe<Scalars['String']>;
    wethToken_not_starts_with?: Maybe<Scalars['String']>;
    wethToken_ends_with?: Maybe<Scalars['String']>;
    wethToken_not_ends_with?: Maybe<Scalars['String']>;
    zeroExV2Adapter?: Maybe<Scalars['String']>;
    zeroExV2Adapter_not?: Maybe<Scalars['String']>;
    zeroExV2Adapter_gt?: Maybe<Scalars['String']>;
    zeroExV2Adapter_lt?: Maybe<Scalars['String']>;
    zeroExV2Adapter_gte?: Maybe<Scalars['String']>;
    zeroExV2Adapter_lte?: Maybe<Scalars['String']>;
    zeroExV2Adapter_in?: Maybe<Array<Scalars['String']>>;
    zeroExV2Adapter_not_in?: Maybe<Array<Scalars['String']>>;
    zeroExV2Adapter_contains?: Maybe<Scalars['String']>;
    zeroExV2Adapter_not_contains?: Maybe<Scalars['String']>;
    zeroExV2Adapter_starts_with?: Maybe<Scalars['String']>;
    zeroExV2Adapter_not_starts_with?: Maybe<Scalars['String']>;
    zeroExV2Adapter_ends_with?: Maybe<Scalars['String']>;
    zeroExV2Adapter_not_ends_with?: Maybe<Scalars['String']>;
    aavePriceFeed?: Maybe<Scalars['String']>;
    aavePriceFeed_not?: Maybe<Scalars['String']>;
    aavePriceFeed_gt?: Maybe<Scalars['String']>;
    aavePriceFeed_lt?: Maybe<Scalars['String']>;
    aavePriceFeed_gte?: Maybe<Scalars['String']>;
    aavePriceFeed_lte?: Maybe<Scalars['String']>;
    aavePriceFeed_in?: Maybe<Array<Scalars['String']>>;
    aavePriceFeed_not_in?: Maybe<Array<Scalars['String']>>;
    aavePriceFeed_contains?: Maybe<Scalars['String']>;
    aavePriceFeed_not_contains?: Maybe<Scalars['String']>;
    aavePriceFeed_starts_with?: Maybe<Scalars['String']>;
    aavePriceFeed_not_starts_with?: Maybe<Scalars['String']>;
    aavePriceFeed_ends_with?: Maybe<Scalars['String']>;
    aavePriceFeed_not_ends_with?: Maybe<Scalars['String']>;
    alphaHomoraV1PriceFeed?: Maybe<Scalars['String']>;
    alphaHomoraV1PriceFeed_not?: Maybe<Scalars['String']>;
    alphaHomoraV1PriceFeed_gt?: Maybe<Scalars['String']>;
    alphaHomoraV1PriceFeed_lt?: Maybe<Scalars['String']>;
    alphaHomoraV1PriceFeed_gte?: Maybe<Scalars['String']>;
    alphaHomoraV1PriceFeed_lte?: Maybe<Scalars['String']>;
    alphaHomoraV1PriceFeed_in?: Maybe<Array<Scalars['String']>>;
    alphaHomoraV1PriceFeed_not_in?: Maybe<Array<Scalars['String']>>;
    alphaHomoraV1PriceFeed_contains?: Maybe<Scalars['String']>;
    alphaHomoraV1PriceFeed_not_contains?: Maybe<Scalars['String']>;
    alphaHomoraV1PriceFeed_starts_with?: Maybe<Scalars['String']>;
    alphaHomoraV1PriceFeed_not_starts_with?: Maybe<Scalars['String']>;
    alphaHomoraV1PriceFeed_ends_with?: Maybe<Scalars['String']>;
    alphaHomoraV1PriceFeed_not_ends_with?: Maybe<Scalars['String']>;
    chaiPriceFeed?: Maybe<Scalars['String']>;
    chaiPriceFeed_not?: Maybe<Scalars['String']>;
    chaiPriceFeed_gt?: Maybe<Scalars['String']>;
    chaiPriceFeed_lt?: Maybe<Scalars['String']>;
    chaiPriceFeed_gte?: Maybe<Scalars['String']>;
    chaiPriceFeed_lte?: Maybe<Scalars['String']>;
    chaiPriceFeed_in?: Maybe<Array<Scalars['String']>>;
    chaiPriceFeed_not_in?: Maybe<Array<Scalars['String']>>;
    chaiPriceFeed_contains?: Maybe<Scalars['String']>;
    chaiPriceFeed_not_contains?: Maybe<Scalars['String']>;
    chaiPriceFeed_starts_with?: Maybe<Scalars['String']>;
    chaiPriceFeed_not_starts_with?: Maybe<Scalars['String']>;
    chaiPriceFeed_ends_with?: Maybe<Scalars['String']>;
    chaiPriceFeed_not_ends_with?: Maybe<Scalars['String']>;
    compoundPriceFeed?: Maybe<Scalars['String']>;
    compoundPriceFeed_not?: Maybe<Scalars['String']>;
    compoundPriceFeed_gt?: Maybe<Scalars['String']>;
    compoundPriceFeed_lt?: Maybe<Scalars['String']>;
    compoundPriceFeed_gte?: Maybe<Scalars['String']>;
    compoundPriceFeed_lte?: Maybe<Scalars['String']>;
    compoundPriceFeed_in?: Maybe<Array<Scalars['String']>>;
    compoundPriceFeed_not_in?: Maybe<Array<Scalars['String']>>;
    compoundPriceFeed_contains?: Maybe<Scalars['String']>;
    compoundPriceFeed_not_contains?: Maybe<Scalars['String']>;
    compoundPriceFeed_starts_with?: Maybe<Scalars['String']>;
    compoundPriceFeed_not_starts_with?: Maybe<Scalars['String']>;
    compoundPriceFeed_ends_with?: Maybe<Scalars['String']>;
    compoundPriceFeed_not_ends_with?: Maybe<Scalars['String']>;
    curvePriceFeed?: Maybe<Scalars['String']>;
    curvePriceFeed_not?: Maybe<Scalars['String']>;
    curvePriceFeed_gt?: Maybe<Scalars['String']>;
    curvePriceFeed_lt?: Maybe<Scalars['String']>;
    curvePriceFeed_gte?: Maybe<Scalars['String']>;
    curvePriceFeed_lte?: Maybe<Scalars['String']>;
    curvePriceFeed_in?: Maybe<Array<Scalars['String']>>;
    curvePriceFeed_not_in?: Maybe<Array<Scalars['String']>>;
    curvePriceFeed_contains?: Maybe<Scalars['String']>;
    curvePriceFeed_not_contains?: Maybe<Scalars['String']>;
    curvePriceFeed_starts_with?: Maybe<Scalars['String']>;
    curvePriceFeed_not_starts_with?: Maybe<Scalars['String']>;
    curvePriceFeed_ends_with?: Maybe<Scalars['String']>;
    curvePriceFeed_not_ends_with?: Maybe<Scalars['String']>;
    curveExchangeAdapter?: Maybe<Scalars['String']>;
    curveExchangeAdapter_not?: Maybe<Scalars['String']>;
    curveExchangeAdapter_gt?: Maybe<Scalars['String']>;
    curveExchangeAdapter_lt?: Maybe<Scalars['String']>;
    curveExchangeAdapter_gte?: Maybe<Scalars['String']>;
    curveExchangeAdapter_lte?: Maybe<Scalars['String']>;
    curveExchangeAdapter_in?: Maybe<Array<Scalars['String']>>;
    curveExchangeAdapter_not_in?: Maybe<Array<Scalars['String']>>;
    curveExchangeAdapter_contains?: Maybe<Scalars['String']>;
    curveExchangeAdapter_not_contains?: Maybe<Scalars['String']>;
    curveExchangeAdapter_starts_with?: Maybe<Scalars['String']>;
    curveExchangeAdapter_not_starts_with?: Maybe<Scalars['String']>;
    curveExchangeAdapter_ends_with?: Maybe<Scalars['String']>;
    curveExchangeAdapter_not_ends_with?: Maybe<Scalars['String']>;
    curveLiquidityAaveAdapter?: Maybe<Scalars['String']>;
    curveLiquidityAaveAdapter_not?: Maybe<Scalars['String']>;
    curveLiquidityAaveAdapter_gt?: Maybe<Scalars['String']>;
    curveLiquidityAaveAdapter_lt?: Maybe<Scalars['String']>;
    curveLiquidityAaveAdapter_gte?: Maybe<Scalars['String']>;
    curveLiquidityAaveAdapter_lte?: Maybe<Scalars['String']>;
    curveLiquidityAaveAdapter_in?: Maybe<Array<Scalars['String']>>;
    curveLiquidityAaveAdapter_not_in?: Maybe<Array<Scalars['String']>>;
    curveLiquidityAaveAdapter_contains?: Maybe<Scalars['String']>;
    curveLiquidityAaveAdapter_not_contains?: Maybe<Scalars['String']>;
    curveLiquidityAaveAdapter_starts_with?: Maybe<Scalars['String']>;
    curveLiquidityAaveAdapter_not_starts_with?: Maybe<Scalars['String']>;
    curveLiquidityAaveAdapter_ends_with?: Maybe<Scalars['String']>;
    curveLiquidityAaveAdapter_not_ends_with?: Maybe<Scalars['String']>;
    curveLiquiditySethAdapter?: Maybe<Scalars['String']>;
    curveLiquiditySethAdapter_not?: Maybe<Scalars['String']>;
    curveLiquiditySethAdapter_gt?: Maybe<Scalars['String']>;
    curveLiquiditySethAdapter_lt?: Maybe<Scalars['String']>;
    curveLiquiditySethAdapter_gte?: Maybe<Scalars['String']>;
    curveLiquiditySethAdapter_lte?: Maybe<Scalars['String']>;
    curveLiquiditySethAdapter_in?: Maybe<Array<Scalars['String']>>;
    curveLiquiditySethAdapter_not_in?: Maybe<Array<Scalars['String']>>;
    curveLiquiditySethAdapter_contains?: Maybe<Scalars['String']>;
    curveLiquiditySethAdapter_not_contains?: Maybe<Scalars['String']>;
    curveLiquiditySethAdapter_starts_with?: Maybe<Scalars['String']>;
    curveLiquiditySethAdapter_not_starts_with?: Maybe<Scalars['String']>;
    curveLiquiditySethAdapter_ends_with?: Maybe<Scalars['String']>;
    curveLiquiditySethAdapter_not_ends_with?: Maybe<Scalars['String']>;
    curveLiquidityStethAdapter?: Maybe<Scalars['String']>;
    curveLiquidityStethAdapter_not?: Maybe<Scalars['String']>;
    curveLiquidityStethAdapter_gt?: Maybe<Scalars['String']>;
    curveLiquidityStethAdapter_lt?: Maybe<Scalars['String']>;
    curveLiquidityStethAdapter_gte?: Maybe<Scalars['String']>;
    curveLiquidityStethAdapter_lte?: Maybe<Scalars['String']>;
    curveLiquidityStethAdapter_in?: Maybe<Array<Scalars['String']>>;
    curveLiquidityStethAdapter_not_in?: Maybe<Array<Scalars['String']>>;
    curveLiquidityStethAdapter_contains?: Maybe<Scalars['String']>;
    curveLiquidityStethAdapter_not_contains?: Maybe<Scalars['String']>;
    curveLiquidityStethAdapter_starts_with?: Maybe<Scalars['String']>;
    curveLiquidityStethAdapter_not_starts_with?: Maybe<Scalars['String']>;
    curveLiquidityStethAdapter_ends_with?: Maybe<Scalars['String']>;
    curveLiquidityStethAdapter_not_ends_with?: Maybe<Scalars['String']>;
    lidoStethPriceFeed?: Maybe<Scalars['String']>;
    lidoStethPriceFeed_not?: Maybe<Scalars['String']>;
    lidoStethPriceFeed_gt?: Maybe<Scalars['String']>;
    lidoStethPriceFeed_lt?: Maybe<Scalars['String']>;
    lidoStethPriceFeed_gte?: Maybe<Scalars['String']>;
    lidoStethPriceFeed_lte?: Maybe<Scalars['String']>;
    lidoStethPriceFeed_in?: Maybe<Array<Scalars['String']>>;
    lidoStethPriceFeed_not_in?: Maybe<Array<Scalars['String']>>;
    lidoStethPriceFeed_contains?: Maybe<Scalars['String']>;
    lidoStethPriceFeed_not_contains?: Maybe<Scalars['String']>;
    lidoStethPriceFeed_starts_with?: Maybe<Scalars['String']>;
    lidoStethPriceFeed_not_starts_with?: Maybe<Scalars['String']>;
    lidoStethPriceFeed_ends_with?: Maybe<Scalars['String']>;
    lidoStethPriceFeed_not_ends_with?: Maybe<Scalars['String']>;
    stakehoundEthPriceFeed?: Maybe<Scalars['String']>;
    stakehoundEthPriceFeed_not?: Maybe<Scalars['String']>;
    stakehoundEthPriceFeed_gt?: Maybe<Scalars['String']>;
    stakehoundEthPriceFeed_lt?: Maybe<Scalars['String']>;
    stakehoundEthPriceFeed_gte?: Maybe<Scalars['String']>;
    stakehoundEthPriceFeed_lte?: Maybe<Scalars['String']>;
    stakehoundEthPriceFeed_in?: Maybe<Array<Scalars['String']>>;
    stakehoundEthPriceFeed_not_in?: Maybe<Array<Scalars['String']>>;
    stakehoundEthPriceFeed_contains?: Maybe<Scalars['String']>;
    stakehoundEthPriceFeed_not_contains?: Maybe<Scalars['String']>;
    stakehoundEthPriceFeed_starts_with?: Maybe<Scalars['String']>;
    stakehoundEthPriceFeed_not_starts_with?: Maybe<Scalars['String']>;
    stakehoundEthPriceFeed_ends_with?: Maybe<Scalars['String']>;
    stakehoundEthPriceFeed_not_ends_with?: Maybe<Scalars['String']>;
    synthetixPriceFeed?: Maybe<Scalars['String']>;
    synthetixPriceFeed_not?: Maybe<Scalars['String']>;
    synthetixPriceFeed_gt?: Maybe<Scalars['String']>;
    synthetixPriceFeed_lt?: Maybe<Scalars['String']>;
    synthetixPriceFeed_gte?: Maybe<Scalars['String']>;
    synthetixPriceFeed_lte?: Maybe<Scalars['String']>;
    synthetixPriceFeed_in?: Maybe<Array<Scalars['String']>>;
    synthetixPriceFeed_not_in?: Maybe<Array<Scalars['String']>>;
    synthetixPriceFeed_contains?: Maybe<Scalars['String']>;
    synthetixPriceFeed_not_contains?: Maybe<Scalars['String']>;
    synthetixPriceFeed_starts_with?: Maybe<Scalars['String']>;
    synthetixPriceFeed_not_starts_with?: Maybe<Scalars['String']>;
    synthetixPriceFeed_ends_with?: Maybe<Scalars['String']>;
    synthetixPriceFeed_not_ends_with?: Maybe<Scalars['String']>;
    uniswapV2PoolPriceFeed?: Maybe<Scalars['String']>;
    uniswapV2PoolPriceFeed_not?: Maybe<Scalars['String']>;
    uniswapV2PoolPriceFeed_gt?: Maybe<Scalars['String']>;
    uniswapV2PoolPriceFeed_lt?: Maybe<Scalars['String']>;
    uniswapV2PoolPriceFeed_gte?: Maybe<Scalars['String']>;
    uniswapV2PoolPriceFeed_lte?: Maybe<Scalars['String']>;
    uniswapV2PoolPriceFeed_in?: Maybe<Array<Scalars['String']>>;
    uniswapV2PoolPriceFeed_not_in?: Maybe<Array<Scalars['String']>>;
    uniswapV2PoolPriceFeed_contains?: Maybe<Scalars['String']>;
    uniswapV2PoolPriceFeed_not_contains?: Maybe<Scalars['String']>;
    uniswapV2PoolPriceFeed_starts_with?: Maybe<Scalars['String']>;
    uniswapV2PoolPriceFeed_not_starts_with?: Maybe<Scalars['String']>;
    uniswapV2PoolPriceFeed_ends_with?: Maybe<Scalars['String']>;
    uniswapV2PoolPriceFeed_not_ends_with?: Maybe<Scalars['String']>;
    wdgldPriceFeed?: Maybe<Scalars['String']>;
    wdgldPriceFeed_not?: Maybe<Scalars['String']>;
    wdgldPriceFeed_gt?: Maybe<Scalars['String']>;
    wdgldPriceFeed_lt?: Maybe<Scalars['String']>;
    wdgldPriceFeed_gte?: Maybe<Scalars['String']>;
    wdgldPriceFeed_lte?: Maybe<Scalars['String']>;
    wdgldPriceFeed_in?: Maybe<Array<Scalars['String']>>;
    wdgldPriceFeed_not_in?: Maybe<Array<Scalars['String']>>;
    wdgldPriceFeed_contains?: Maybe<Scalars['String']>;
    wdgldPriceFeed_not_contains?: Maybe<Scalars['String']>;
    wdgldPriceFeed_starts_with?: Maybe<Scalars['String']>;
    wdgldPriceFeed_not_starts_with?: Maybe<Scalars['String']>;
    wdgldPriceFeed_ends_with?: Maybe<Scalars['String']>;
    wdgldPriceFeed_not_ends_with?: Maybe<Scalars['String']>;
    yearnVaultV2PriceFeed?: Maybe<Scalars['String']>;
    yearnVaultV2PriceFeed_not?: Maybe<Scalars['String']>;
    yearnVaultV2PriceFeed_gt?: Maybe<Scalars['String']>;
    yearnVaultV2PriceFeed_lt?: Maybe<Scalars['String']>;
    yearnVaultV2PriceFeed_gte?: Maybe<Scalars['String']>;
    yearnVaultV2PriceFeed_lte?: Maybe<Scalars['String']>;
    yearnVaultV2PriceFeed_in?: Maybe<Array<Scalars['String']>>;
    yearnVaultV2PriceFeed_not_in?: Maybe<Array<Scalars['String']>>;
    yearnVaultV2PriceFeed_contains?: Maybe<Scalars['String']>;
    yearnVaultV2PriceFeed_not_contains?: Maybe<Scalars['String']>;
    yearnVaultV2PriceFeed_starts_with?: Maybe<Scalars['String']>;
    yearnVaultV2PriceFeed_not_starts_with?: Maybe<Scalars['String']>;
    yearnVaultV2PriceFeed_ends_with?: Maybe<Scalars['String']>;
    yearnVaultV2PriceFeed_not_ends_with?: Maybe<Scalars['String']>;
};
export declare enum Release_OrderBy {
    Id = "id",
    Current = "current",
    Open = "open",
    Close = "close",
    Funds = "funds",
    Assets = "assets",
    Network = "network",
    AdapterBlacklist = "adapterBlacklist",
    AdapterWhitelist = "adapterWhitelist",
    AggregatedDerivativePriceFeed = "aggregatedDerivativePriceFeed",
    AlphaHomoraV1Adapter = "alphaHomoraV1Adapter",
    AaveAdapter = "aaveAdapter",
    AssetBlacklist = "assetBlacklist",
    AssetWhitelist = "assetWhitelist",
    BuySharesCallerWhitelist = "buySharesCallerWhitelist",
    ChaiAdapter = "chaiAdapter",
    ChaiIntegratee = "chaiIntegratee",
    ChainlinkPriceFeed = "chainlinkPriceFeed",
    CompoundAdapter = "compoundAdapter",
    ComptrollerLib = "comptrollerLib",
    Dispatcher = "dispatcher",
    EntranceRateBurnFee = "entranceRateBurnFee",
    EntranceRateDirectFee = "entranceRateDirectFee",
    FeeManager = "feeManager",
    FundActionsWrapper = "fundActionsWrapper",
    FundDeployer = "fundDeployer",
    GuaranteedRedemption = "guaranteedRedemption",
    IdleAdapter = "idleAdapter",
    IdlePriceFeed = "idlePriceFeed",
    IntegrationManager = "integrationManager",
    InvestorWhitelist = "investorWhitelist",
    KyberAdapter = "kyberAdapter",
    KyberIntegratee = "kyberIntegratee",
    ManagementFee = "managementFee",
    MaxConcentration = "maxConcentration",
    MinMaxInvestment = "minMaxInvestment",
    ParaSwapAdapter = "paraSwapAdapter",
    ParaSwapV4Adapter = "paraSwapV4Adapter",
    PerformanceFee = "performanceFee",
    PolicyManager = "policyManager",
    SynthetixAdapter = "synthetixAdapter",
    SynthetixAddressResolver = "synthetixAddressResolver",
    SynthetixDelegateApprovals = "synthetixDelegateApprovals",
    SynthetixIntegratee = "synthetixIntegratee",
    TrackedAssetsAdapter = "trackedAssetsAdapter",
    UniswapV2Adapter = "uniswapV2Adapter",
    UniswapV2Integratee = "uniswapV2Integratee",
    YearnVaultV2Adapter = "yearnVaultV2Adapter",
    ValueInterpreter = "valueInterpreter",
    VaultLib = "vaultLib",
    WethToken = "wethToken",
    ZeroExV2Adapter = "zeroExV2Adapter",
    AavePriceFeed = "aavePriceFeed",
    AlphaHomoraV1PriceFeed = "alphaHomoraV1PriceFeed",
    ChaiPriceFeed = "chaiPriceFeed",
    CompoundPriceFeed = "compoundPriceFeed",
    CurvePriceFeed = "curvePriceFeed",
    CurveExchangeAdapter = "curveExchangeAdapter",
    CurveLiquidityAaveAdapter = "curveLiquidityAaveAdapter",
    CurveLiquiditySethAdapter = "curveLiquiditySethAdapter",
    CurveLiquidityStethAdapter = "curveLiquidityStethAdapter",
    LidoStethPriceFeed = "lidoStethPriceFeed",
    StakehoundEthPriceFeed = "stakehoundEthPriceFeed",
    SynthetixPriceFeed = "synthetixPriceFeed",
    UniswapV2PoolPriceFeed = "uniswapV2PoolPriceFeed",
    WdgldPriceFeed = "wdgldPriceFeed",
    YearnVaultV2PriceFeed = "yearnVaultV2PriceFeed"
}
export declare type RemoveTrackedAssetsTrade = Trade & {
    __typename?: 'RemoveTrackedAssetsTrade';
    id: Scalars['ID'];
    fund: Fund;
    adapter: IntegrationAdapter;
    method: IntegrationMethod;
    outgoingAssetAmounts: Array<AssetAmount>;
    timestamp: Scalars['BigInt'];
    fundState: FundState;
};
export declare type RemoveTrackedAssetsTradeOutgoingAssetAmountsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<AssetAmount_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<AssetAmount_Filter>;
};
export declare type RemoveTrackedAssetsTrade_Filter = {
    id?: Maybe<Scalars['ID']>;
    id_not?: Maybe<Scalars['ID']>;
    id_gt?: Maybe<Scalars['ID']>;
    id_lt?: Maybe<Scalars['ID']>;
    id_gte?: Maybe<Scalars['ID']>;
    id_lte?: Maybe<Scalars['ID']>;
    id_in?: Maybe<Array<Scalars['ID']>>;
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    fund?: Maybe<Scalars['String']>;
    fund_not?: Maybe<Scalars['String']>;
    fund_gt?: Maybe<Scalars['String']>;
    fund_lt?: Maybe<Scalars['String']>;
    fund_gte?: Maybe<Scalars['String']>;
    fund_lte?: Maybe<Scalars['String']>;
    fund_in?: Maybe<Array<Scalars['String']>>;
    fund_not_in?: Maybe<Array<Scalars['String']>>;
    fund_contains?: Maybe<Scalars['String']>;
    fund_not_contains?: Maybe<Scalars['String']>;
    fund_starts_with?: Maybe<Scalars['String']>;
    fund_not_starts_with?: Maybe<Scalars['String']>;
    fund_ends_with?: Maybe<Scalars['String']>;
    fund_not_ends_with?: Maybe<Scalars['String']>;
    adapter?: Maybe<Scalars['String']>;
    adapter_not?: Maybe<Scalars['String']>;
    adapter_gt?: Maybe<Scalars['String']>;
    adapter_lt?: Maybe<Scalars['String']>;
    adapter_gte?: Maybe<Scalars['String']>;
    adapter_lte?: Maybe<Scalars['String']>;
    adapter_in?: Maybe<Array<Scalars['String']>>;
    adapter_not_in?: Maybe<Array<Scalars['String']>>;
    adapter_contains?: Maybe<Scalars['String']>;
    adapter_not_contains?: Maybe<Scalars['String']>;
    adapter_starts_with?: Maybe<Scalars['String']>;
    adapter_not_starts_with?: Maybe<Scalars['String']>;
    adapter_ends_with?: Maybe<Scalars['String']>;
    adapter_not_ends_with?: Maybe<Scalars['String']>;
    method?: Maybe<IntegrationMethod>;
    method_not?: Maybe<IntegrationMethod>;
    outgoingAssetAmounts?: Maybe<Array<Scalars['String']>>;
    outgoingAssetAmounts_not?: Maybe<Array<Scalars['String']>>;
    outgoingAssetAmounts_contains?: Maybe<Array<Scalars['String']>>;
    outgoingAssetAmounts_not_contains?: Maybe<Array<Scalars['String']>>;
    timestamp?: Maybe<Scalars['BigInt']>;
    timestamp_not?: Maybe<Scalars['BigInt']>;
    timestamp_gt?: Maybe<Scalars['BigInt']>;
    timestamp_lt?: Maybe<Scalars['BigInt']>;
    timestamp_gte?: Maybe<Scalars['BigInt']>;
    timestamp_lte?: Maybe<Scalars['BigInt']>;
    timestamp_in?: Maybe<Array<Scalars['BigInt']>>;
    timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;
    fundState?: Maybe<Scalars['String']>;
    fundState_not?: Maybe<Scalars['String']>;
    fundState_gt?: Maybe<Scalars['String']>;
    fundState_lt?: Maybe<Scalars['String']>;
    fundState_gte?: Maybe<Scalars['String']>;
    fundState_lte?: Maybe<Scalars['String']>;
    fundState_in?: Maybe<Array<Scalars['String']>>;
    fundState_not_in?: Maybe<Array<Scalars['String']>>;
    fundState_contains?: Maybe<Scalars['String']>;
    fundState_not_contains?: Maybe<Scalars['String']>;
    fundState_starts_with?: Maybe<Scalars['String']>;
    fundState_not_starts_with?: Maybe<Scalars['String']>;
    fundState_ends_with?: Maybe<Scalars['String']>;
    fundState_not_ends_with?: Maybe<Scalars['String']>;
};
export declare enum RemoveTrackedAssetsTrade_OrderBy {
    Id = "id",
    Fund = "fund",
    Adapter = "adapter",
    Method = "method",
    OutgoingAssetAmounts = "outgoingAssetAmounts",
    Timestamp = "timestamp",
    FundState = "fundState"
}
export declare enum SettlementType {
    None = "None",
    Direct = "Direct",
    Mint = "Mint",
    Burn = "Burn",
    MintSharesOutstanding = "MintSharesOutstanding",
    BurnSharesOutstanding = "BurnSharesOutstanding",
    Unknown = "Unknown"
}
export declare enum ShareChangeType {
    SharesBought = "SharesBought",
    SharesRedeemed = "SharesRedeemed",
    FeeSettledForFund = "FeeSettledForFund",
    AllSharesOutstandingForcePaidForFund = "AllSharesOutstandingForcePaidForFund",
    SharesOutstandingPaidForFund = "SharesOutstandingPaidForFund",
    MigratedSharesDuePaid = "MigratedSharesDuePaid"
}
export declare type ShareState = FundStateInterface & {
    __typename?: 'ShareState';
    id: Scalars['ID'];
    fund: Fund;
    timestamp: Scalars['BigInt'];
    totalSupply: Scalars['BigDecimal'];
    outstandingForFees: Scalars['BigDecimal'];
    events: Array<FundEventInterface>;
};
export declare type ShareStateEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<FundEventInterface_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<FundEventInterface_Filter>;
};
export declare type ShareState_Filter = {
    id?: Maybe<Scalars['ID']>;
    id_not?: Maybe<Scalars['ID']>;
    id_gt?: Maybe<Scalars['ID']>;
    id_lt?: Maybe<Scalars['ID']>;
    id_gte?: Maybe<Scalars['ID']>;
    id_lte?: Maybe<Scalars['ID']>;
    id_in?: Maybe<Array<Scalars['ID']>>;
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    fund?: Maybe<Scalars['String']>;
    fund_not?: Maybe<Scalars['String']>;
    fund_gt?: Maybe<Scalars['String']>;
    fund_lt?: Maybe<Scalars['String']>;
    fund_gte?: Maybe<Scalars['String']>;
    fund_lte?: Maybe<Scalars['String']>;
    fund_in?: Maybe<Array<Scalars['String']>>;
    fund_not_in?: Maybe<Array<Scalars['String']>>;
    fund_contains?: Maybe<Scalars['String']>;
    fund_not_contains?: Maybe<Scalars['String']>;
    fund_starts_with?: Maybe<Scalars['String']>;
    fund_not_starts_with?: Maybe<Scalars['String']>;
    fund_ends_with?: Maybe<Scalars['String']>;
    fund_not_ends_with?: Maybe<Scalars['String']>;
    timestamp?: Maybe<Scalars['BigInt']>;
    timestamp_not?: Maybe<Scalars['BigInt']>;
    timestamp_gt?: Maybe<Scalars['BigInt']>;
    timestamp_lt?: Maybe<Scalars['BigInt']>;
    timestamp_gte?: Maybe<Scalars['BigInt']>;
    timestamp_lte?: Maybe<Scalars['BigInt']>;
    timestamp_in?: Maybe<Array<Scalars['BigInt']>>;
    timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;
    totalSupply?: Maybe<Scalars['BigDecimal']>;
    totalSupply_not?: Maybe<Scalars['BigDecimal']>;
    totalSupply_gt?: Maybe<Scalars['BigDecimal']>;
    totalSupply_lt?: Maybe<Scalars['BigDecimal']>;
    totalSupply_gte?: Maybe<Scalars['BigDecimal']>;
    totalSupply_lte?: Maybe<Scalars['BigDecimal']>;
    totalSupply_in?: Maybe<Array<Scalars['BigDecimal']>>;
    totalSupply_not_in?: Maybe<Array<Scalars['BigDecimal']>>;
    outstandingForFees?: Maybe<Scalars['BigDecimal']>;
    outstandingForFees_not?: Maybe<Scalars['BigDecimal']>;
    outstandingForFees_gt?: Maybe<Scalars['BigDecimal']>;
    outstandingForFees_lt?: Maybe<Scalars['BigDecimal']>;
    outstandingForFees_gte?: Maybe<Scalars['BigDecimal']>;
    outstandingForFees_lte?: Maybe<Scalars['BigDecimal']>;
    outstandingForFees_in?: Maybe<Array<Scalars['BigDecimal']>>;
    outstandingForFees_not_in?: Maybe<Array<Scalars['BigDecimal']>>;
    events?: Maybe<Array<Scalars['String']>>;
    events_not?: Maybe<Array<Scalars['String']>>;
    events_contains?: Maybe<Array<Scalars['String']>>;
    events_not_contains?: Maybe<Array<Scalars['String']>>;
};
export declare enum ShareState_OrderBy {
    Id = "id",
    Fund = "fund",
    Timestamp = "timestamp",
    TotalSupply = "totalSupply",
    OutstandingForFees = "outstandingForFees",
    Events = "events"
}
export declare type SharesBoughtEvent = EventInterface & FundEventInterface & SharesChangeInterface & InvestmentSharesChangeInterface & {
    __typename?: 'SharesBoughtEvent';
    id: Scalars['ID'];
    fund: Fund;
    type: ShareChangeType;
    investor: Account;
    investmentState: InvestmentState;
    shares: Scalars['BigDecimal'];
    asset: Asset;
    investmentAmount: Scalars['BigDecimal'];
    sharesIssued: Scalars['BigDecimal'];
    timestamp: Scalars['BigInt'];
    fundState: FundState;
    transaction: Transaction;
};
export declare type SharesBoughtEvent_Filter = {
    id?: Maybe<Scalars['ID']>;
    id_not?: Maybe<Scalars['ID']>;
    id_gt?: Maybe<Scalars['ID']>;
    id_lt?: Maybe<Scalars['ID']>;
    id_gte?: Maybe<Scalars['ID']>;
    id_lte?: Maybe<Scalars['ID']>;
    id_in?: Maybe<Array<Scalars['ID']>>;
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    fund?: Maybe<Scalars['String']>;
    fund_not?: Maybe<Scalars['String']>;
    fund_gt?: Maybe<Scalars['String']>;
    fund_lt?: Maybe<Scalars['String']>;
    fund_gte?: Maybe<Scalars['String']>;
    fund_lte?: Maybe<Scalars['String']>;
    fund_in?: Maybe<Array<Scalars['String']>>;
    fund_not_in?: Maybe<Array<Scalars['String']>>;
    fund_contains?: Maybe<Scalars['String']>;
    fund_not_contains?: Maybe<Scalars['String']>;
    fund_starts_with?: Maybe<Scalars['String']>;
    fund_not_starts_with?: Maybe<Scalars['String']>;
    fund_ends_with?: Maybe<Scalars['String']>;
    fund_not_ends_with?: Maybe<Scalars['String']>;
    type?: Maybe<ShareChangeType>;
    type_not?: Maybe<ShareChangeType>;
    investor?: Maybe<Scalars['String']>;
    investor_not?: Maybe<Scalars['String']>;
    investor_gt?: Maybe<Scalars['String']>;
    investor_lt?: Maybe<Scalars['String']>;
    investor_gte?: Maybe<Scalars['String']>;
    investor_lte?: Maybe<Scalars['String']>;
    investor_in?: Maybe<Array<Scalars['String']>>;
    investor_not_in?: Maybe<Array<Scalars['String']>>;
    investor_contains?: Maybe<Scalars['String']>;
    investor_not_contains?: Maybe<Scalars['String']>;
    investor_starts_with?: Maybe<Scalars['String']>;
    investor_not_starts_with?: Maybe<Scalars['String']>;
    investor_ends_with?: Maybe<Scalars['String']>;
    investor_not_ends_with?: Maybe<Scalars['String']>;
    investmentState?: Maybe<Scalars['String']>;
    investmentState_not?: Maybe<Scalars['String']>;
    investmentState_gt?: Maybe<Scalars['String']>;
    investmentState_lt?: Maybe<Scalars['String']>;
    investmentState_gte?: Maybe<Scalars['String']>;
    investmentState_lte?: Maybe<Scalars['String']>;
    investmentState_in?: Maybe<Array<Scalars['String']>>;
    investmentState_not_in?: Maybe<Array<Scalars['String']>>;
    investmentState_contains?: Maybe<Scalars['String']>;
    investmentState_not_contains?: Maybe<Scalars['String']>;
    investmentState_starts_with?: Maybe<Scalars['String']>;
    investmentState_not_starts_with?: Maybe<Scalars['String']>;
    investmentState_ends_with?: Maybe<Scalars['String']>;
    investmentState_not_ends_with?: Maybe<Scalars['String']>;
    shares?: Maybe<Scalars['BigDecimal']>;
    shares_not?: Maybe<Scalars['BigDecimal']>;
    shares_gt?: Maybe<Scalars['BigDecimal']>;
    shares_lt?: Maybe<Scalars['BigDecimal']>;
    shares_gte?: Maybe<Scalars['BigDecimal']>;
    shares_lte?: Maybe<Scalars['BigDecimal']>;
    shares_in?: Maybe<Array<Scalars['BigDecimal']>>;
    shares_not_in?: Maybe<Array<Scalars['BigDecimal']>>;
    asset?: Maybe<Scalars['String']>;
    asset_not?: Maybe<Scalars['String']>;
    asset_gt?: Maybe<Scalars['String']>;
    asset_lt?: Maybe<Scalars['String']>;
    asset_gte?: Maybe<Scalars['String']>;
    asset_lte?: Maybe<Scalars['String']>;
    asset_in?: Maybe<Array<Scalars['String']>>;
    asset_not_in?: Maybe<Array<Scalars['String']>>;
    asset_contains?: Maybe<Scalars['String']>;
    asset_not_contains?: Maybe<Scalars['String']>;
    asset_starts_with?: Maybe<Scalars['String']>;
    asset_not_starts_with?: Maybe<Scalars['String']>;
    asset_ends_with?: Maybe<Scalars['String']>;
    asset_not_ends_with?: Maybe<Scalars['String']>;
    investmentAmount?: Maybe<Scalars['BigDecimal']>;
    investmentAmount_not?: Maybe<Scalars['BigDecimal']>;
    investmentAmount_gt?: Maybe<Scalars['BigDecimal']>;
    investmentAmount_lt?: Maybe<Scalars['BigDecimal']>;
    investmentAmount_gte?: Maybe<Scalars['BigDecimal']>;
    investmentAmount_lte?: Maybe<Scalars['BigDecimal']>;
    investmentAmount_in?: Maybe<Array<Scalars['BigDecimal']>>;
    investmentAmount_not_in?: Maybe<Array<Scalars['BigDecimal']>>;
    sharesIssued?: Maybe<Scalars['BigDecimal']>;
    sharesIssued_not?: Maybe<Scalars['BigDecimal']>;
    sharesIssued_gt?: Maybe<Scalars['BigDecimal']>;
    sharesIssued_lt?: Maybe<Scalars['BigDecimal']>;
    sharesIssued_gte?: Maybe<Scalars['BigDecimal']>;
    sharesIssued_lte?: Maybe<Scalars['BigDecimal']>;
    sharesIssued_in?: Maybe<Array<Scalars['BigDecimal']>>;
    sharesIssued_not_in?: Maybe<Array<Scalars['BigDecimal']>>;
    timestamp?: Maybe<Scalars['BigInt']>;
    timestamp_not?: Maybe<Scalars['BigInt']>;
    timestamp_gt?: Maybe<Scalars['BigInt']>;
    timestamp_lt?: Maybe<Scalars['BigInt']>;
    timestamp_gte?: Maybe<Scalars['BigInt']>;
    timestamp_lte?: Maybe<Scalars['BigInt']>;
    timestamp_in?: Maybe<Array<Scalars['BigInt']>>;
    timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;
    fundState?: Maybe<Scalars['String']>;
    fundState_not?: Maybe<Scalars['String']>;
    fundState_gt?: Maybe<Scalars['String']>;
    fundState_lt?: Maybe<Scalars['String']>;
    fundState_gte?: Maybe<Scalars['String']>;
    fundState_lte?: Maybe<Scalars['String']>;
    fundState_in?: Maybe<Array<Scalars['String']>>;
    fundState_not_in?: Maybe<Array<Scalars['String']>>;
    fundState_contains?: Maybe<Scalars['String']>;
    fundState_not_contains?: Maybe<Scalars['String']>;
    fundState_starts_with?: Maybe<Scalars['String']>;
    fundState_not_starts_with?: Maybe<Scalars['String']>;
    fundState_ends_with?: Maybe<Scalars['String']>;
    fundState_not_ends_with?: Maybe<Scalars['String']>;
    transaction?: Maybe<Scalars['String']>;
    transaction_not?: Maybe<Scalars['String']>;
    transaction_gt?: Maybe<Scalars['String']>;
    transaction_lt?: Maybe<Scalars['String']>;
    transaction_gte?: Maybe<Scalars['String']>;
    transaction_lte?: Maybe<Scalars['String']>;
    transaction_in?: Maybe<Array<Scalars['String']>>;
    transaction_not_in?: Maybe<Array<Scalars['String']>>;
    transaction_contains?: Maybe<Scalars['String']>;
    transaction_not_contains?: Maybe<Scalars['String']>;
    transaction_starts_with?: Maybe<Scalars['String']>;
    transaction_not_starts_with?: Maybe<Scalars['String']>;
    transaction_ends_with?: Maybe<Scalars['String']>;
    transaction_not_ends_with?: Maybe<Scalars['String']>;
};
export declare enum SharesBoughtEvent_OrderBy {
    Id = "id",
    Fund = "fund",
    Type = "type",
    Investor = "investor",
    InvestmentState = "investmentState",
    Shares = "shares",
    Asset = "asset",
    InvestmentAmount = "investmentAmount",
    SharesIssued = "sharesIssued",
    Timestamp = "timestamp",
    FundState = "fundState",
    Transaction = "transaction"
}
export declare type SharesChangeInterface = {
    id: Scalars['ID'];
    fund: Fund;
    investor: Account;
    timestamp: Scalars['BigInt'];
    type: ShareChangeType;
    investmentState: InvestmentState;
    shares: Scalars['BigDecimal'];
    fundState: FundState;
    transaction: Transaction;
};
export declare type SharesChangeInterface_Filter = {
    id?: Maybe<Scalars['ID']>;
    id_not?: Maybe<Scalars['ID']>;
    id_gt?: Maybe<Scalars['ID']>;
    id_lt?: Maybe<Scalars['ID']>;
    id_gte?: Maybe<Scalars['ID']>;
    id_lte?: Maybe<Scalars['ID']>;
    id_in?: Maybe<Array<Scalars['ID']>>;
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    fund?: Maybe<Scalars['String']>;
    fund_not?: Maybe<Scalars['String']>;
    fund_gt?: Maybe<Scalars['String']>;
    fund_lt?: Maybe<Scalars['String']>;
    fund_gte?: Maybe<Scalars['String']>;
    fund_lte?: Maybe<Scalars['String']>;
    fund_in?: Maybe<Array<Scalars['String']>>;
    fund_not_in?: Maybe<Array<Scalars['String']>>;
    fund_contains?: Maybe<Scalars['String']>;
    fund_not_contains?: Maybe<Scalars['String']>;
    fund_starts_with?: Maybe<Scalars['String']>;
    fund_not_starts_with?: Maybe<Scalars['String']>;
    fund_ends_with?: Maybe<Scalars['String']>;
    fund_not_ends_with?: Maybe<Scalars['String']>;
    investor?: Maybe<Scalars['String']>;
    investor_not?: Maybe<Scalars['String']>;
    investor_gt?: Maybe<Scalars['String']>;
    investor_lt?: Maybe<Scalars['String']>;
    investor_gte?: Maybe<Scalars['String']>;
    investor_lte?: Maybe<Scalars['String']>;
    investor_in?: Maybe<Array<Scalars['String']>>;
    investor_not_in?: Maybe<Array<Scalars['String']>>;
    investor_contains?: Maybe<Scalars['String']>;
    investor_not_contains?: Maybe<Scalars['String']>;
    investor_starts_with?: Maybe<Scalars['String']>;
    investor_not_starts_with?: Maybe<Scalars['String']>;
    investor_ends_with?: Maybe<Scalars['String']>;
    investor_not_ends_with?: Maybe<Scalars['String']>;
    timestamp?: Maybe<Scalars['BigInt']>;
    timestamp_not?: Maybe<Scalars['BigInt']>;
    timestamp_gt?: Maybe<Scalars['BigInt']>;
    timestamp_lt?: Maybe<Scalars['BigInt']>;
    timestamp_gte?: Maybe<Scalars['BigInt']>;
    timestamp_lte?: Maybe<Scalars['BigInt']>;
    timestamp_in?: Maybe<Array<Scalars['BigInt']>>;
    timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;
    type?: Maybe<ShareChangeType>;
    type_not?: Maybe<ShareChangeType>;
    investmentState?: Maybe<Scalars['String']>;
    investmentState_not?: Maybe<Scalars['String']>;
    investmentState_gt?: Maybe<Scalars['String']>;
    investmentState_lt?: Maybe<Scalars['String']>;
    investmentState_gte?: Maybe<Scalars['String']>;
    investmentState_lte?: Maybe<Scalars['String']>;
    investmentState_in?: Maybe<Array<Scalars['String']>>;
    investmentState_not_in?: Maybe<Array<Scalars['String']>>;
    investmentState_contains?: Maybe<Scalars['String']>;
    investmentState_not_contains?: Maybe<Scalars['String']>;
    investmentState_starts_with?: Maybe<Scalars['String']>;
    investmentState_not_starts_with?: Maybe<Scalars['String']>;
    investmentState_ends_with?: Maybe<Scalars['String']>;
    investmentState_not_ends_with?: Maybe<Scalars['String']>;
    shares?: Maybe<Scalars['BigDecimal']>;
    shares_not?: Maybe<Scalars['BigDecimal']>;
    shares_gt?: Maybe<Scalars['BigDecimal']>;
    shares_lt?: Maybe<Scalars['BigDecimal']>;
    shares_gte?: Maybe<Scalars['BigDecimal']>;
    shares_lte?: Maybe<Scalars['BigDecimal']>;
    shares_in?: Maybe<Array<Scalars['BigDecimal']>>;
    shares_not_in?: Maybe<Array<Scalars['BigDecimal']>>;
    fundState?: Maybe<Scalars['String']>;
    fundState_not?: Maybe<Scalars['String']>;
    fundState_gt?: Maybe<Scalars['String']>;
    fundState_lt?: Maybe<Scalars['String']>;
    fundState_gte?: Maybe<Scalars['String']>;
    fundState_lte?: Maybe<Scalars['String']>;
    fundState_in?: Maybe<Array<Scalars['String']>>;
    fundState_not_in?: Maybe<Array<Scalars['String']>>;
    fundState_contains?: Maybe<Scalars['String']>;
    fundState_not_contains?: Maybe<Scalars['String']>;
    fundState_starts_with?: Maybe<Scalars['String']>;
    fundState_not_starts_with?: Maybe<Scalars['String']>;
    fundState_ends_with?: Maybe<Scalars['String']>;
    fundState_not_ends_with?: Maybe<Scalars['String']>;
    transaction?: Maybe<Scalars['String']>;
    transaction_not?: Maybe<Scalars['String']>;
    transaction_gt?: Maybe<Scalars['String']>;
    transaction_lt?: Maybe<Scalars['String']>;
    transaction_gte?: Maybe<Scalars['String']>;
    transaction_lte?: Maybe<Scalars['String']>;
    transaction_in?: Maybe<Array<Scalars['String']>>;
    transaction_not_in?: Maybe<Array<Scalars['String']>>;
    transaction_contains?: Maybe<Scalars['String']>;
    transaction_not_contains?: Maybe<Scalars['String']>;
    transaction_starts_with?: Maybe<Scalars['String']>;
    transaction_not_starts_with?: Maybe<Scalars['String']>;
    transaction_ends_with?: Maybe<Scalars['String']>;
    transaction_not_ends_with?: Maybe<Scalars['String']>;
};
export declare enum SharesChangeInterface_OrderBy {
    Id = "id",
    Fund = "fund",
    Investor = "investor",
    Timestamp = "timestamp",
    Type = "type",
    InvestmentState = "investmentState",
    Shares = "shares",
    FundState = "fundState",
    Transaction = "transaction"
}
export declare type SharesOutstandingPaidForFundEvent = EventInterface & FundEventInterface & SharesChangeInterface & FeeSharesChangeInterface & {
    __typename?: 'SharesOutstandingPaidForFundEvent';
    id: Scalars['ID'];
    fund: Fund;
    type: ShareChangeType;
    investor: Account;
    timestamp: Scalars['BigInt'];
    transaction: Transaction;
    investmentState: InvestmentState;
    shares: Scalars['BigDecimal'];
    comptrollerProxy: ComptrollerProxy;
    fee: Fee;
    sharesDue: Scalars['BigDecimal'];
    fundState: FundState;
};
export declare type SharesOutstandingPaidForFundEvent_Filter = {
    id?: Maybe<Scalars['ID']>;
    id_not?: Maybe<Scalars['ID']>;
    id_gt?: Maybe<Scalars['ID']>;
    id_lt?: Maybe<Scalars['ID']>;
    id_gte?: Maybe<Scalars['ID']>;
    id_lte?: Maybe<Scalars['ID']>;
    id_in?: Maybe<Array<Scalars['ID']>>;
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    fund?: Maybe<Scalars['String']>;
    fund_not?: Maybe<Scalars['String']>;
    fund_gt?: Maybe<Scalars['String']>;
    fund_lt?: Maybe<Scalars['String']>;
    fund_gte?: Maybe<Scalars['String']>;
    fund_lte?: Maybe<Scalars['String']>;
    fund_in?: Maybe<Array<Scalars['String']>>;
    fund_not_in?: Maybe<Array<Scalars['String']>>;
    fund_contains?: Maybe<Scalars['String']>;
    fund_not_contains?: Maybe<Scalars['String']>;
    fund_starts_with?: Maybe<Scalars['String']>;
    fund_not_starts_with?: Maybe<Scalars['String']>;
    fund_ends_with?: Maybe<Scalars['String']>;
    fund_not_ends_with?: Maybe<Scalars['String']>;
    type?: Maybe<ShareChangeType>;
    type_not?: Maybe<ShareChangeType>;
    investor?: Maybe<Scalars['String']>;
    investor_not?: Maybe<Scalars['String']>;
    investor_gt?: Maybe<Scalars['String']>;
    investor_lt?: Maybe<Scalars['String']>;
    investor_gte?: Maybe<Scalars['String']>;
    investor_lte?: Maybe<Scalars['String']>;
    investor_in?: Maybe<Array<Scalars['String']>>;
    investor_not_in?: Maybe<Array<Scalars['String']>>;
    investor_contains?: Maybe<Scalars['String']>;
    investor_not_contains?: Maybe<Scalars['String']>;
    investor_starts_with?: Maybe<Scalars['String']>;
    investor_not_starts_with?: Maybe<Scalars['String']>;
    investor_ends_with?: Maybe<Scalars['String']>;
    investor_not_ends_with?: Maybe<Scalars['String']>;
    timestamp?: Maybe<Scalars['BigInt']>;
    timestamp_not?: Maybe<Scalars['BigInt']>;
    timestamp_gt?: Maybe<Scalars['BigInt']>;
    timestamp_lt?: Maybe<Scalars['BigInt']>;
    timestamp_gte?: Maybe<Scalars['BigInt']>;
    timestamp_lte?: Maybe<Scalars['BigInt']>;
    timestamp_in?: Maybe<Array<Scalars['BigInt']>>;
    timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;
    transaction?: Maybe<Scalars['String']>;
    transaction_not?: Maybe<Scalars['String']>;
    transaction_gt?: Maybe<Scalars['String']>;
    transaction_lt?: Maybe<Scalars['String']>;
    transaction_gte?: Maybe<Scalars['String']>;
    transaction_lte?: Maybe<Scalars['String']>;
    transaction_in?: Maybe<Array<Scalars['String']>>;
    transaction_not_in?: Maybe<Array<Scalars['String']>>;
    transaction_contains?: Maybe<Scalars['String']>;
    transaction_not_contains?: Maybe<Scalars['String']>;
    transaction_starts_with?: Maybe<Scalars['String']>;
    transaction_not_starts_with?: Maybe<Scalars['String']>;
    transaction_ends_with?: Maybe<Scalars['String']>;
    transaction_not_ends_with?: Maybe<Scalars['String']>;
    investmentState?: Maybe<Scalars['String']>;
    investmentState_not?: Maybe<Scalars['String']>;
    investmentState_gt?: Maybe<Scalars['String']>;
    investmentState_lt?: Maybe<Scalars['String']>;
    investmentState_gte?: Maybe<Scalars['String']>;
    investmentState_lte?: Maybe<Scalars['String']>;
    investmentState_in?: Maybe<Array<Scalars['String']>>;
    investmentState_not_in?: Maybe<Array<Scalars['String']>>;
    investmentState_contains?: Maybe<Scalars['String']>;
    investmentState_not_contains?: Maybe<Scalars['String']>;
    investmentState_starts_with?: Maybe<Scalars['String']>;
    investmentState_not_starts_with?: Maybe<Scalars['String']>;
    investmentState_ends_with?: Maybe<Scalars['String']>;
    investmentState_not_ends_with?: Maybe<Scalars['String']>;
    shares?: Maybe<Scalars['BigDecimal']>;
    shares_not?: Maybe<Scalars['BigDecimal']>;
    shares_gt?: Maybe<Scalars['BigDecimal']>;
    shares_lt?: Maybe<Scalars['BigDecimal']>;
    shares_gte?: Maybe<Scalars['BigDecimal']>;
    shares_lte?: Maybe<Scalars['BigDecimal']>;
    shares_in?: Maybe<Array<Scalars['BigDecimal']>>;
    shares_not_in?: Maybe<Array<Scalars['BigDecimal']>>;
    comptrollerProxy?: Maybe<Scalars['String']>;
    comptrollerProxy_not?: Maybe<Scalars['String']>;
    comptrollerProxy_gt?: Maybe<Scalars['String']>;
    comptrollerProxy_lt?: Maybe<Scalars['String']>;
    comptrollerProxy_gte?: Maybe<Scalars['String']>;
    comptrollerProxy_lte?: Maybe<Scalars['String']>;
    comptrollerProxy_in?: Maybe<Array<Scalars['String']>>;
    comptrollerProxy_not_in?: Maybe<Array<Scalars['String']>>;
    comptrollerProxy_contains?: Maybe<Scalars['String']>;
    comptrollerProxy_not_contains?: Maybe<Scalars['String']>;
    comptrollerProxy_starts_with?: Maybe<Scalars['String']>;
    comptrollerProxy_not_starts_with?: Maybe<Scalars['String']>;
    comptrollerProxy_ends_with?: Maybe<Scalars['String']>;
    comptrollerProxy_not_ends_with?: Maybe<Scalars['String']>;
    fee?: Maybe<Scalars['String']>;
    fee_not?: Maybe<Scalars['String']>;
    fee_gt?: Maybe<Scalars['String']>;
    fee_lt?: Maybe<Scalars['String']>;
    fee_gte?: Maybe<Scalars['String']>;
    fee_lte?: Maybe<Scalars['String']>;
    fee_in?: Maybe<Array<Scalars['String']>>;
    fee_not_in?: Maybe<Array<Scalars['String']>>;
    fee_contains?: Maybe<Scalars['String']>;
    fee_not_contains?: Maybe<Scalars['String']>;
    fee_starts_with?: Maybe<Scalars['String']>;
    fee_not_starts_with?: Maybe<Scalars['String']>;
    fee_ends_with?: Maybe<Scalars['String']>;
    fee_not_ends_with?: Maybe<Scalars['String']>;
    sharesDue?: Maybe<Scalars['BigDecimal']>;
    sharesDue_not?: Maybe<Scalars['BigDecimal']>;
    sharesDue_gt?: Maybe<Scalars['BigDecimal']>;
    sharesDue_lt?: Maybe<Scalars['BigDecimal']>;
    sharesDue_gte?: Maybe<Scalars['BigDecimal']>;
    sharesDue_lte?: Maybe<Scalars['BigDecimal']>;
    sharesDue_in?: Maybe<Array<Scalars['BigDecimal']>>;
    sharesDue_not_in?: Maybe<Array<Scalars['BigDecimal']>>;
    fundState?: Maybe<Scalars['String']>;
    fundState_not?: Maybe<Scalars['String']>;
    fundState_gt?: Maybe<Scalars['String']>;
    fundState_lt?: Maybe<Scalars['String']>;
    fundState_gte?: Maybe<Scalars['String']>;
    fundState_lte?: Maybe<Scalars['String']>;
    fundState_in?: Maybe<Array<Scalars['String']>>;
    fundState_not_in?: Maybe<Array<Scalars['String']>>;
    fundState_contains?: Maybe<Scalars['String']>;
    fundState_not_contains?: Maybe<Scalars['String']>;
    fundState_starts_with?: Maybe<Scalars['String']>;
    fundState_not_starts_with?: Maybe<Scalars['String']>;
    fundState_ends_with?: Maybe<Scalars['String']>;
    fundState_not_ends_with?: Maybe<Scalars['String']>;
};
export declare enum SharesOutstandingPaidForFundEvent_OrderBy {
    Id = "id",
    Fund = "fund",
    Type = "type",
    Investor = "investor",
    Timestamp = "timestamp",
    Transaction = "transaction",
    InvestmentState = "investmentState",
    Shares = "shares",
    ComptrollerProxy = "comptrollerProxy",
    Fee = "fee",
    SharesDue = "sharesDue",
    FundState = "fundState"
}
export declare type SharesRedeemedEvent = EventInterface & FundEventInterface & SharesChangeInterface & InvestmentSharesChangeInterface & {
    __typename?: 'SharesRedeemedEvent';
    id: Scalars['ID'];
    fund: Fund;
    type: ShareChangeType;
    investor: Account;
    investmentState: InvestmentState;
    shares: Scalars['BigDecimal'];
    payoutAssetAmounts: Array<AssetAmount>;
    timestamp: Scalars['BigInt'];
    fundState: FundState;
    transaction: Transaction;
};
export declare type SharesRedeemedEventPayoutAssetAmountsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<AssetAmount_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<AssetAmount_Filter>;
};
export declare type SharesRedeemedEvent_Filter = {
    id?: Maybe<Scalars['ID']>;
    id_not?: Maybe<Scalars['ID']>;
    id_gt?: Maybe<Scalars['ID']>;
    id_lt?: Maybe<Scalars['ID']>;
    id_gte?: Maybe<Scalars['ID']>;
    id_lte?: Maybe<Scalars['ID']>;
    id_in?: Maybe<Array<Scalars['ID']>>;
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    fund?: Maybe<Scalars['String']>;
    fund_not?: Maybe<Scalars['String']>;
    fund_gt?: Maybe<Scalars['String']>;
    fund_lt?: Maybe<Scalars['String']>;
    fund_gte?: Maybe<Scalars['String']>;
    fund_lte?: Maybe<Scalars['String']>;
    fund_in?: Maybe<Array<Scalars['String']>>;
    fund_not_in?: Maybe<Array<Scalars['String']>>;
    fund_contains?: Maybe<Scalars['String']>;
    fund_not_contains?: Maybe<Scalars['String']>;
    fund_starts_with?: Maybe<Scalars['String']>;
    fund_not_starts_with?: Maybe<Scalars['String']>;
    fund_ends_with?: Maybe<Scalars['String']>;
    fund_not_ends_with?: Maybe<Scalars['String']>;
    type?: Maybe<ShareChangeType>;
    type_not?: Maybe<ShareChangeType>;
    investor?: Maybe<Scalars['String']>;
    investor_not?: Maybe<Scalars['String']>;
    investor_gt?: Maybe<Scalars['String']>;
    investor_lt?: Maybe<Scalars['String']>;
    investor_gte?: Maybe<Scalars['String']>;
    investor_lte?: Maybe<Scalars['String']>;
    investor_in?: Maybe<Array<Scalars['String']>>;
    investor_not_in?: Maybe<Array<Scalars['String']>>;
    investor_contains?: Maybe<Scalars['String']>;
    investor_not_contains?: Maybe<Scalars['String']>;
    investor_starts_with?: Maybe<Scalars['String']>;
    investor_not_starts_with?: Maybe<Scalars['String']>;
    investor_ends_with?: Maybe<Scalars['String']>;
    investor_not_ends_with?: Maybe<Scalars['String']>;
    investmentState?: Maybe<Scalars['String']>;
    investmentState_not?: Maybe<Scalars['String']>;
    investmentState_gt?: Maybe<Scalars['String']>;
    investmentState_lt?: Maybe<Scalars['String']>;
    investmentState_gte?: Maybe<Scalars['String']>;
    investmentState_lte?: Maybe<Scalars['String']>;
    investmentState_in?: Maybe<Array<Scalars['String']>>;
    investmentState_not_in?: Maybe<Array<Scalars['String']>>;
    investmentState_contains?: Maybe<Scalars['String']>;
    investmentState_not_contains?: Maybe<Scalars['String']>;
    investmentState_starts_with?: Maybe<Scalars['String']>;
    investmentState_not_starts_with?: Maybe<Scalars['String']>;
    investmentState_ends_with?: Maybe<Scalars['String']>;
    investmentState_not_ends_with?: Maybe<Scalars['String']>;
    shares?: Maybe<Scalars['BigDecimal']>;
    shares_not?: Maybe<Scalars['BigDecimal']>;
    shares_gt?: Maybe<Scalars['BigDecimal']>;
    shares_lt?: Maybe<Scalars['BigDecimal']>;
    shares_gte?: Maybe<Scalars['BigDecimal']>;
    shares_lte?: Maybe<Scalars['BigDecimal']>;
    shares_in?: Maybe<Array<Scalars['BigDecimal']>>;
    shares_not_in?: Maybe<Array<Scalars['BigDecimal']>>;
    payoutAssetAmounts?: Maybe<Array<Scalars['String']>>;
    payoutAssetAmounts_not?: Maybe<Array<Scalars['String']>>;
    payoutAssetAmounts_contains?: Maybe<Array<Scalars['String']>>;
    payoutAssetAmounts_not_contains?: Maybe<Array<Scalars['String']>>;
    timestamp?: Maybe<Scalars['BigInt']>;
    timestamp_not?: Maybe<Scalars['BigInt']>;
    timestamp_gt?: Maybe<Scalars['BigInt']>;
    timestamp_lt?: Maybe<Scalars['BigInt']>;
    timestamp_gte?: Maybe<Scalars['BigInt']>;
    timestamp_lte?: Maybe<Scalars['BigInt']>;
    timestamp_in?: Maybe<Array<Scalars['BigInt']>>;
    timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;
    fundState?: Maybe<Scalars['String']>;
    fundState_not?: Maybe<Scalars['String']>;
    fundState_gt?: Maybe<Scalars['String']>;
    fundState_lt?: Maybe<Scalars['String']>;
    fundState_gte?: Maybe<Scalars['String']>;
    fundState_lte?: Maybe<Scalars['String']>;
    fundState_in?: Maybe<Array<Scalars['String']>>;
    fundState_not_in?: Maybe<Array<Scalars['String']>>;
    fundState_contains?: Maybe<Scalars['String']>;
    fundState_not_contains?: Maybe<Scalars['String']>;
    fundState_starts_with?: Maybe<Scalars['String']>;
    fundState_not_starts_with?: Maybe<Scalars['String']>;
    fundState_ends_with?: Maybe<Scalars['String']>;
    fundState_not_ends_with?: Maybe<Scalars['String']>;
    transaction?: Maybe<Scalars['String']>;
    transaction_not?: Maybe<Scalars['String']>;
    transaction_gt?: Maybe<Scalars['String']>;
    transaction_lt?: Maybe<Scalars['String']>;
    transaction_gte?: Maybe<Scalars['String']>;
    transaction_lte?: Maybe<Scalars['String']>;
    transaction_in?: Maybe<Array<Scalars['String']>>;
    transaction_not_in?: Maybe<Array<Scalars['String']>>;
    transaction_contains?: Maybe<Scalars['String']>;
    transaction_not_contains?: Maybe<Scalars['String']>;
    transaction_starts_with?: Maybe<Scalars['String']>;
    transaction_not_starts_with?: Maybe<Scalars['String']>;
    transaction_ends_with?: Maybe<Scalars['String']>;
    transaction_not_ends_with?: Maybe<Scalars['String']>;
};
export declare enum SharesRedeemedEvent_OrderBy {
    Id = "id",
    Fund = "fund",
    Type = "type",
    Investor = "investor",
    InvestmentState = "investmentState",
    Shares = "shares",
    PayoutAssetAmounts = "payoutAssetAmounts",
    Timestamp = "timestamp",
    FundState = "fundState",
    Transaction = "transaction"
}
export declare type SharesTokenSymbolSetEvent = EventInterface & NetworkEventInterface & {
    __typename?: 'SharesTokenSymbolSetEvent';
    id: Scalars['ID'];
    timestamp: Scalars['BigInt'];
    transaction: Transaction;
    sharesTokenSymbol: Scalars['String'];
};
export declare type SharesTokenSymbolSetEvent_Filter = {
    id?: Maybe<Scalars['ID']>;
    id_not?: Maybe<Scalars['ID']>;
    id_gt?: Maybe<Scalars['ID']>;
    id_lt?: Maybe<Scalars['ID']>;
    id_gte?: Maybe<Scalars['ID']>;
    id_lte?: Maybe<Scalars['ID']>;
    id_in?: Maybe<Array<Scalars['ID']>>;
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    timestamp?: Maybe<Scalars['BigInt']>;
    timestamp_not?: Maybe<Scalars['BigInt']>;
    timestamp_gt?: Maybe<Scalars['BigInt']>;
    timestamp_lt?: Maybe<Scalars['BigInt']>;
    timestamp_gte?: Maybe<Scalars['BigInt']>;
    timestamp_lte?: Maybe<Scalars['BigInt']>;
    timestamp_in?: Maybe<Array<Scalars['BigInt']>>;
    timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;
    transaction?: Maybe<Scalars['String']>;
    transaction_not?: Maybe<Scalars['String']>;
    transaction_gt?: Maybe<Scalars['String']>;
    transaction_lt?: Maybe<Scalars['String']>;
    transaction_gte?: Maybe<Scalars['String']>;
    transaction_lte?: Maybe<Scalars['String']>;
    transaction_in?: Maybe<Array<Scalars['String']>>;
    transaction_not_in?: Maybe<Array<Scalars['String']>>;
    transaction_contains?: Maybe<Scalars['String']>;
    transaction_not_contains?: Maybe<Scalars['String']>;
    transaction_starts_with?: Maybe<Scalars['String']>;
    transaction_not_starts_with?: Maybe<Scalars['String']>;
    transaction_ends_with?: Maybe<Scalars['String']>;
    transaction_not_ends_with?: Maybe<Scalars['String']>;
    sharesTokenSymbol?: Maybe<Scalars['String']>;
    sharesTokenSymbol_not?: Maybe<Scalars['String']>;
    sharesTokenSymbol_gt?: Maybe<Scalars['String']>;
    sharesTokenSymbol_lt?: Maybe<Scalars['String']>;
    sharesTokenSymbol_gte?: Maybe<Scalars['String']>;
    sharesTokenSymbol_lte?: Maybe<Scalars['String']>;
    sharesTokenSymbol_in?: Maybe<Array<Scalars['String']>>;
    sharesTokenSymbol_not_in?: Maybe<Array<Scalars['String']>>;
    sharesTokenSymbol_contains?: Maybe<Scalars['String']>;
    sharesTokenSymbol_not_contains?: Maybe<Scalars['String']>;
    sharesTokenSymbol_starts_with?: Maybe<Scalars['String']>;
    sharesTokenSymbol_not_starts_with?: Maybe<Scalars['String']>;
    sharesTokenSymbol_ends_with?: Maybe<Scalars['String']>;
    sharesTokenSymbol_not_ends_with?: Maybe<Scalars['String']>;
};
export declare enum SharesTokenSymbolSetEvent_OrderBy {
    Id = "id",
    Timestamp = "timestamp",
    Transaction = "transaction",
    SharesTokenSymbol = "sharesTokenSymbol"
}
export declare type StakeTrade = Trade & {
    __typename?: 'StakeTrade';
    id: Scalars['ID'];
    fund: Fund;
    adapter: IntegrationAdapter;
    method: IntegrationMethod;
    incomingAssetAmount: AssetAmount;
    outgoingAssetAmount: AssetAmount;
    timestamp: Scalars['BigInt'];
    fundState: FundState;
};
export declare type StakeTrade_Filter = {
    id?: Maybe<Scalars['ID']>;
    id_not?: Maybe<Scalars['ID']>;
    id_gt?: Maybe<Scalars['ID']>;
    id_lt?: Maybe<Scalars['ID']>;
    id_gte?: Maybe<Scalars['ID']>;
    id_lte?: Maybe<Scalars['ID']>;
    id_in?: Maybe<Array<Scalars['ID']>>;
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    fund?: Maybe<Scalars['String']>;
    fund_not?: Maybe<Scalars['String']>;
    fund_gt?: Maybe<Scalars['String']>;
    fund_lt?: Maybe<Scalars['String']>;
    fund_gte?: Maybe<Scalars['String']>;
    fund_lte?: Maybe<Scalars['String']>;
    fund_in?: Maybe<Array<Scalars['String']>>;
    fund_not_in?: Maybe<Array<Scalars['String']>>;
    fund_contains?: Maybe<Scalars['String']>;
    fund_not_contains?: Maybe<Scalars['String']>;
    fund_starts_with?: Maybe<Scalars['String']>;
    fund_not_starts_with?: Maybe<Scalars['String']>;
    fund_ends_with?: Maybe<Scalars['String']>;
    fund_not_ends_with?: Maybe<Scalars['String']>;
    adapter?: Maybe<Scalars['String']>;
    adapter_not?: Maybe<Scalars['String']>;
    adapter_gt?: Maybe<Scalars['String']>;
    adapter_lt?: Maybe<Scalars['String']>;
    adapter_gte?: Maybe<Scalars['String']>;
    adapter_lte?: Maybe<Scalars['String']>;
    adapter_in?: Maybe<Array<Scalars['String']>>;
    adapter_not_in?: Maybe<Array<Scalars['String']>>;
    adapter_contains?: Maybe<Scalars['String']>;
    adapter_not_contains?: Maybe<Scalars['String']>;
    adapter_starts_with?: Maybe<Scalars['String']>;
    adapter_not_starts_with?: Maybe<Scalars['String']>;
    adapter_ends_with?: Maybe<Scalars['String']>;
    adapter_not_ends_with?: Maybe<Scalars['String']>;
    method?: Maybe<IntegrationMethod>;
    method_not?: Maybe<IntegrationMethod>;
    incomingAssetAmount?: Maybe<Scalars['String']>;
    incomingAssetAmount_not?: Maybe<Scalars['String']>;
    incomingAssetAmount_gt?: Maybe<Scalars['String']>;
    incomingAssetAmount_lt?: Maybe<Scalars['String']>;
    incomingAssetAmount_gte?: Maybe<Scalars['String']>;
    incomingAssetAmount_lte?: Maybe<Scalars['String']>;
    incomingAssetAmount_in?: Maybe<Array<Scalars['String']>>;
    incomingAssetAmount_not_in?: Maybe<Array<Scalars['String']>>;
    incomingAssetAmount_contains?: Maybe<Scalars['String']>;
    incomingAssetAmount_not_contains?: Maybe<Scalars['String']>;
    incomingAssetAmount_starts_with?: Maybe<Scalars['String']>;
    incomingAssetAmount_not_starts_with?: Maybe<Scalars['String']>;
    incomingAssetAmount_ends_with?: Maybe<Scalars['String']>;
    incomingAssetAmount_not_ends_with?: Maybe<Scalars['String']>;
    outgoingAssetAmount?: Maybe<Scalars['String']>;
    outgoingAssetAmount_not?: Maybe<Scalars['String']>;
    outgoingAssetAmount_gt?: Maybe<Scalars['String']>;
    outgoingAssetAmount_lt?: Maybe<Scalars['String']>;
    outgoingAssetAmount_gte?: Maybe<Scalars['String']>;
    outgoingAssetAmount_lte?: Maybe<Scalars['String']>;
    outgoingAssetAmount_in?: Maybe<Array<Scalars['String']>>;
    outgoingAssetAmount_not_in?: Maybe<Array<Scalars['String']>>;
    outgoingAssetAmount_contains?: Maybe<Scalars['String']>;
    outgoingAssetAmount_not_contains?: Maybe<Scalars['String']>;
    outgoingAssetAmount_starts_with?: Maybe<Scalars['String']>;
    outgoingAssetAmount_not_starts_with?: Maybe<Scalars['String']>;
    outgoingAssetAmount_ends_with?: Maybe<Scalars['String']>;
    outgoingAssetAmount_not_ends_with?: Maybe<Scalars['String']>;
    timestamp?: Maybe<Scalars['BigInt']>;
    timestamp_not?: Maybe<Scalars['BigInt']>;
    timestamp_gt?: Maybe<Scalars['BigInt']>;
    timestamp_lt?: Maybe<Scalars['BigInt']>;
    timestamp_gte?: Maybe<Scalars['BigInt']>;
    timestamp_lte?: Maybe<Scalars['BigInt']>;
    timestamp_in?: Maybe<Array<Scalars['BigInt']>>;
    timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;
    fundState?: Maybe<Scalars['String']>;
    fundState_not?: Maybe<Scalars['String']>;
    fundState_gt?: Maybe<Scalars['String']>;
    fundState_lt?: Maybe<Scalars['String']>;
    fundState_gte?: Maybe<Scalars['String']>;
    fundState_lte?: Maybe<Scalars['String']>;
    fundState_in?: Maybe<Array<Scalars['String']>>;
    fundState_not_in?: Maybe<Array<Scalars['String']>>;
    fundState_contains?: Maybe<Scalars['String']>;
    fundState_not_contains?: Maybe<Scalars['String']>;
    fundState_starts_with?: Maybe<Scalars['String']>;
    fundState_not_starts_with?: Maybe<Scalars['String']>;
    fundState_ends_with?: Maybe<Scalars['String']>;
    fundState_not_ends_with?: Maybe<Scalars['String']>;
};
export declare enum StakeTrade_OrderBy {
    Id = "id",
    Fund = "fund",
    Adapter = "adapter",
    Method = "method",
    IncomingAssetAmount = "incomingAssetAmount",
    OutgoingAssetAmount = "outgoingAssetAmount",
    Timestamp = "timestamp",
    FundState = "fundState"
}
export declare type Subscription = {
    __typename?: 'Subscription';
    newFundCreatedEvent?: Maybe<NewFundCreatedEvent>;
    newFundCreatedEvents: Array<NewFundCreatedEvent>;
    vaultProxySetEvent?: Maybe<VaultProxySetEvent>;
    vaultProxySetEvents: Array<VaultProxySetEvent>;
    sharesBoughtEvent?: Maybe<SharesBoughtEvent>;
    sharesBoughtEvents: Array<SharesBoughtEvent>;
    sharesRedeemedEvent?: Maybe<SharesRedeemedEvent>;
    sharesRedeemedEvents: Array<SharesRedeemedEvent>;
    assetWithdrawnEvent?: Maybe<AssetWithdrawnEvent>;
    assetWithdrawnEvents: Array<AssetWithdrawnEvent>;
    trackedAssetAddedEvent?: Maybe<TrackedAssetAddedEvent>;
    trackedAssetAddedEvents: Array<TrackedAssetAddedEvent>;
    trackedAssetRemovedEvent?: Maybe<TrackedAssetRemovedEvent>;
    trackedAssetRemovedEvents: Array<TrackedAssetRemovedEvent>;
    authUserAddedForFundEvent?: Maybe<AuthUserAddedForFundEvent>;
    authUserAddedForFundEvents: Array<AuthUserAddedForFundEvent>;
    authUserRemovedForFundEvent?: Maybe<AuthUserRemovedForFundEvent>;
    authUserRemovedForFundEvents: Array<AuthUserRemovedForFundEvent>;
    callOnIntegrationExecutedForFundEvent?: Maybe<CallOnIntegrationExecutedForFundEvent>;
    callOnIntegrationExecutedForFundEvents: Array<CallOnIntegrationExecutedForFundEvent>;
    migrationSignaledEvent?: Maybe<MigrationSignaledEvent>;
    migrationSignaledEvents: Array<MigrationSignaledEvent>;
    migrationCancelledEvent?: Maybe<MigrationCancelledEvent>;
    migrationCancelledEvents: Array<MigrationCancelledEvent>;
    migrationExecutedEvent?: Maybe<MigrationExecutedEvent>;
    migrationExecutedEvents: Array<MigrationExecutedEvent>;
    migrationInCancelHookFailedEvent?: Maybe<MigrationInCancelHookFailedEvent>;
    migrationInCancelHookFailedEvents: Array<MigrationInCancelHookFailedEvent>;
    migrationOutHookFailedEvent?: Maybe<MigrationOutHookFailedEvent>;
    migrationOutHookFailedEvents: Array<MigrationOutHookFailedEvent>;
    feeEnabledForFundEvent?: Maybe<FeeEnabledForFundEvent>;
    feeEnabledForFundEvents: Array<FeeEnabledForFundEvent>;
    feesRecipientSetForFundEvent?: Maybe<FeesRecipientSetForFundEvent>;
    feesRecipientSetForFundEvents: Array<FeesRecipientSetForFundEvent>;
    feeSettledForFundEvent?: Maybe<FeeSettledForFundEvent>;
    feeSettledForFundEvents: Array<FeeSettledForFundEvent>;
    allSharesOutstandingForcePaidForFundEvent?: Maybe<AllSharesOutstandingForcePaidForFundEvent>;
    allSharesOutstandingForcePaidForFundEvents: Array<AllSharesOutstandingForcePaidForFundEvent>;
    sharesOutstandingPaidForFundEvent?: Maybe<SharesOutstandingPaidForFundEvent>;
    sharesOutstandingPaidForFundEvents: Array<SharesOutstandingPaidForFundEvent>;
    migratedSharesDuePaidEvent?: Maybe<MigratedSharesDuePaidEvent>;
    migratedSharesDuePaidEvents: Array<MigratedSharesDuePaidEvent>;
    policyEnabledForFundEvent?: Maybe<PolicyEnabledForFundEvent>;
    policyEnabledForFundEvents: Array<PolicyEnabledForFundEvent>;
    policyDisabledForFundEvent?: Maybe<PolicyDisabledForFundEvent>;
    policyDisabledForFundEvents: Array<PolicyDisabledForFundEvent>;
    accessorSetEvent?: Maybe<AccessorSetEvent>;
    accessorSetEvents: Array<AccessorSetEvent>;
    ownerSetEvent?: Maybe<OwnerSetEvent>;
    ownerSetEvents: Array<OwnerSetEvent>;
    migratorSetEvent?: Maybe<MigratorSetEvent>;
    migratorSetEvents: Array<MigratorSetEvent>;
    vaultLibSetEvent?: Maybe<VaultLibSetEvent>;
    vaultLibSetEvents: Array<VaultLibSetEvent>;
    approvalEvent?: Maybe<ApprovalEvent>;
    approvalEvents: Array<ApprovalEvent>;
    transferEvent?: Maybe<TransferEvent>;
    transferEvents: Array<TransferEvent>;
    adapterBlacklistAddressesAddedEvent?: Maybe<AdapterBlacklistAddressesAddedEvent>;
    adapterBlacklistAddressesAddedEvents: Array<AdapterBlacklistAddressesAddedEvent>;
    adapterBlacklistAddressesRemovedEvent?: Maybe<AdapterBlacklistAddressesRemovedEvent>;
    adapterBlacklistAddressesRemovedEvents: Array<AdapterBlacklistAddressesRemovedEvent>;
    adapterWhitelistAddressesAddedEvent?: Maybe<AdapterWhitelistAddressesAddedEvent>;
    adapterWhitelistAddressesAddedEvents: Array<AdapterWhitelistAddressesAddedEvent>;
    adapterWhitelistAddressesRemovedEvent?: Maybe<AdapterWhitelistAddressesRemovedEvent>;
    adapterWhitelistAddressesRemovedEvents: Array<AdapterWhitelistAddressesRemovedEvent>;
    assetBlacklistAddressesAddedEvent?: Maybe<AssetBlacklistAddressesAddedEvent>;
    assetBlacklistAddressesAddedEvents: Array<AssetBlacklistAddressesAddedEvent>;
    assetBlacklistAddressesRemovedEvent?: Maybe<AssetBlacklistAddressesRemovedEvent>;
    assetBlacklistAddressesRemovedEvents: Array<AssetBlacklistAddressesRemovedEvent>;
    assetWhitelistAddressesAddedEvent?: Maybe<AssetWhitelistAddressesAddedEvent>;
    assetWhitelistAddressesAddedEvents: Array<AssetWhitelistAddressesAddedEvent>;
    assetWhitelistAddressesRemovedEvent?: Maybe<AssetWhitelistAddressesRemovedEvent>;
    assetWhitelistAddressesRemovedEvents: Array<AssetWhitelistAddressesRemovedEvent>;
    buySharesCallerWhitelistAddressesAddedEvent?: Maybe<BuySharesCallerWhitelistAddressesAddedEvent>;
    buySharesCallerWhitelistAddressesAddedEvents: Array<BuySharesCallerWhitelistAddressesAddedEvent>;
    buySharesCallerWhitelistAddressesRemovedEvent?: Maybe<BuySharesCallerWhitelistAddressesRemovedEvent>;
    buySharesCallerWhitelistAddressesRemovedEvents: Array<BuySharesCallerWhitelistAddressesRemovedEvent>;
    guaranteedRedemptionFundSettingsSetEvent?: Maybe<GuaranteedRedemptionFundSettingsSetEvent>;
    guaranteedRedemptionFundSettingsSetEvents: Array<GuaranteedRedemptionFundSettingsSetEvent>;
    investorWhitelistAddressesAddedEvent?: Maybe<InvestorWhitelistAddressesAddedEvent>;
    investorWhitelistAddressesAddedEvents: Array<InvestorWhitelistAddressesAddedEvent>;
    investorWhitelistAddressesRemovedEvent?: Maybe<InvestorWhitelistAddressesRemovedEvent>;
    investorWhitelistAddressesRemovedEvents: Array<InvestorWhitelistAddressesRemovedEvent>;
    maxConcentrationSetEvent?: Maybe<MaxConcentrationSetEvent>;
    maxConcentrationSetEvents: Array<MaxConcentrationSetEvent>;
    minMaxInvestmentFundSettingsSetEvent?: Maybe<MinMaxInvestmentFundSettingsSetEvent>;
    minMaxInvestmentFundSettingsSetEvents: Array<MinMaxInvestmentFundSettingsSetEvent>;
    managementFeeSettingsAddedEvent?: Maybe<ManagementFeeSettingsAddedEvent>;
    managementFeeSettingsAddedEvents: Array<ManagementFeeSettingsAddedEvent>;
    managementFeeSettledEvent?: Maybe<ManagementFeeSettledEvent>;
    managementFeeSettledEvents: Array<ManagementFeeSettledEvent>;
    managementFeeActivatedForMigratedFundEvent?: Maybe<ManagementFeeActivatedForMigratedFundEvent>;
    managementFeeActivatedForMigratedFundEvents: Array<ManagementFeeActivatedForMigratedFundEvent>;
    performanceFeeSettingsAddedEvent?: Maybe<PerformanceFeeSettingsAddedEvent>;
    performanceFeeSettingsAddedEvents: Array<PerformanceFeeSettingsAddedEvent>;
    performanceFeeActivatedForFundEvent?: Maybe<PerformanceFeeActivatedForFundEvent>;
    performanceFeeActivatedForFundEvents: Array<PerformanceFeeActivatedForFundEvent>;
    performanceFeeSharePriceUpdatedEvent?: Maybe<PerformanceFeeSharePriceUpdatedEvent>;
    performanceFeeSharePriceUpdatedEvents: Array<PerformanceFeeSharePriceUpdatedEvent>;
    performanceFeePaidOutEvent?: Maybe<PerformanceFeePaidOutEvent>;
    performanceFeePaidOutEvents: Array<PerformanceFeePaidOutEvent>;
    performanceFeePerformanceUpdatedEvent?: Maybe<PerformanceFeePerformanceUpdatedEvent>;
    performanceFeePerformanceUpdatedEvents: Array<PerformanceFeePerformanceUpdatedEvent>;
    entranceRateDirectFeeSettingsAddedEvent?: Maybe<EntranceRateDirectFeeSettingsAddedEvent>;
    entranceRateDirectFeeSettingsAddedEvents: Array<EntranceRateDirectFeeSettingsAddedEvent>;
    entranceRateDirectFeeSettledEvent?: Maybe<EntranceRateDirectFeeSettledEvent>;
    entranceRateDirectFeeSettledEvents: Array<EntranceRateDirectFeeSettledEvent>;
    entranceRateBurnFeeSettingsAddedEvent?: Maybe<EntranceRateBurnFeeSettingsAddedEvent>;
    entranceRateBurnFeeSettingsAddedEvents: Array<EntranceRateBurnFeeSettingsAddedEvent>;
    entranceRateBurnFeeSettledEvent?: Maybe<EntranceRateBurnFeeSettledEvent>;
    entranceRateBurnFeeSettledEvents: Array<EntranceRateBurnFeeSettledEvent>;
    overridePauseSetEvent?: Maybe<OverridePauseSetEvent>;
    overridePauseSetEvents: Array<OverridePauseSetEvent>;
    preRedeemSharesHookFailedEvent?: Maybe<PreRedeemSharesHookFailedEvent>;
    preRedeemSharesHookFailedEvents: Array<PreRedeemSharesHookFailedEvent>;
    vaultProxyDeployedEvent?: Maybe<VaultProxyDeployedEvent>;
    vaultProxyDeployedEvents: Array<VaultProxyDeployedEvent>;
    comptrollerProxyDeployedEvent?: Maybe<ComptrollerProxyDeployedEvent>;
    comptrollerProxyDeployedEvents: Array<ComptrollerProxyDeployedEvent>;
    comptrollerLibSetEvent?: Maybe<ComptrollerLibSetEvent>;
    comptrollerLibSetEvents: Array<ComptrollerLibSetEvent>;
    adapterRegisteredEvent?: Maybe<AdapterRegisteredEvent>;
    adapterRegisteredEvents: Array<AdapterRegisteredEvent>;
    adapterDeregisteredEvent?: Maybe<AdapterDeregisteredEvent>;
    adapterDeregisteredEvents: Array<AdapterDeregisteredEvent>;
    trackedAssetsLimitSetEvent?: Maybe<TrackedAssetsLimitSetEvent>;
    trackedAssetsLimitSetEvents: Array<TrackedAssetsLimitSetEvent>;
    policyRegisteredEvent?: Maybe<PolicyRegisteredEvent>;
    policyRegisteredEvents: Array<PolicyRegisteredEvent>;
    policyDeregisteredEvent?: Maybe<PolicyDeregisteredEvent>;
    policyDeregisteredEvents: Array<PolicyDeregisteredEvent>;
    guaranteedRedemptionAdapterAddedEvent?: Maybe<GuaranteedRedemptionAdapterAddedEvent>;
    guaranteedRedemptionAdapterAddedEvents: Array<GuaranteedRedemptionAdapterAddedEvent>;
    guaranteedRedemptionAdapterRemovedEvent?: Maybe<GuaranteedRedemptionAdapterRemovedEvent>;
    guaranteedRedemptionAdapterRemovedEvents: Array<GuaranteedRedemptionAdapterRemovedEvent>;
    guaranteedRedemptionRedemptionWindowBufferSetEvent?: Maybe<GuaranteedRedemptionRedemptionWindowBufferSetEvent>;
    guaranteedRedemptionRedemptionWindowBufferSetEvents: Array<GuaranteedRedemptionRedemptionWindowBufferSetEvent>;
    fundDeployerSetEvent?: Maybe<FundDeployerSetEvent>;
    fundDeployerSetEvents: Array<FundDeployerSetEvent>;
    valueInterpreterSetEvent?: Maybe<ValueInterpreterSetEvent>;
    valueInterpreterSetEvents: Array<ValueInterpreterSetEvent>;
    ownershipTransferredEvent?: Maybe<OwnershipTransferredEvent>;
    ownershipTransferredEvents: Array<OwnershipTransferredEvent>;
    derivativeAddedEvent?: Maybe<DerivativeAddedEvent>;
    derivativeAddedEvents: Array<DerivativeAddedEvent>;
    derivativeRemovedEvent?: Maybe<DerivativeRemovedEvent>;
    derivativeRemovedEvents: Array<DerivativeRemovedEvent>;
    derivativeUpdatedEvent?: Maybe<DerivativeUpdatedEvent>;
    derivativeUpdatedEvents: Array<DerivativeUpdatedEvent>;
    aggregatorUpdatedEvent?: Maybe<AggregatorUpdatedEvent>;
    aggregatorUpdatedEvents: Array<AggregatorUpdatedEvent>;
    ethUsdAggregatorSetEvent?: Maybe<EthUsdAggregatorSetEvent>;
    ethUsdAggregatorSetEvents: Array<EthUsdAggregatorSetEvent>;
    primitiveAddedEvent?: Maybe<PrimitiveAddedEvent>;
    primitiveAddedEvents: Array<PrimitiveAddedEvent>;
    primitiveRemovedEvent?: Maybe<PrimitiveRemovedEvent>;
    primitiveRemovedEvents: Array<PrimitiveRemovedEvent>;
    feeRegisteredEvent?: Maybe<FeeRegisteredEvent>;
    feeRegisteredEvents: Array<FeeRegisteredEvent>;
    feeDeregisteredEvent?: Maybe<FeeDeregisteredEvent>;
    feeDeregisteredEvents: Array<FeeDeregisteredEvent>;
    migrationTimelockSetEvent?: Maybe<MigrationTimelockSetEvent>;
    migrationTimelockSetEvents: Array<MigrationTimelockSetEvent>;
    nominatedOwnerRemovedEvent?: Maybe<NominatedOwnerRemovedEvent>;
    nominatedOwnerRemovedEvents: Array<NominatedOwnerRemovedEvent>;
    nominatedOwnerSetEvent?: Maybe<NominatedOwnerSetEvent>;
    nominatedOwnerSetEvents: Array<NominatedOwnerSetEvent>;
    dispatcherOwnershipTransferredEvent?: Maybe<DispatcherOwnershipTransferredEvent>;
    dispatcherOwnershipTransferredEvents: Array<DispatcherOwnershipTransferredEvent>;
    sharesTokenSymbolSetEvent?: Maybe<SharesTokenSymbolSetEvent>;
    sharesTokenSymbolSetEvents: Array<SharesTokenSymbolSetEvent>;
    releaseStatusSetEvent?: Maybe<ReleaseStatusSetEvent>;
    releaseStatusSetEvents: Array<ReleaseStatusSetEvent>;
    vaultCallRegisteredEvent?: Maybe<VaultCallRegisteredEvent>;
    vaultCallRegisteredEvents: Array<VaultCallRegisteredEvent>;
    vaultCallDeregisteredEvent?: Maybe<VaultCallDeregisteredEvent>;
    vaultCallDeregisteredEvents: Array<VaultCallDeregisteredEvent>;
    transaction?: Maybe<Transaction>;
    transactions: Array<Transaction>;
    integrationManager?: Maybe<IntegrationManager>;
    integrationManagers: Array<IntegrationManager>;
    policyManager?: Maybe<PolicyManager>;
    policyManagers: Array<PolicyManager>;
    feeManager?: Maybe<FeeManager>;
    feeManagers: Array<FeeManager>;
    guaranteedRedemption?: Maybe<GuaranteedRedemption>;
    guaranteedRedemptions: Array<GuaranteedRedemption>;
    fund?: Maybe<Fund>;
    funds: Array<Fund>;
    comptrollerProxy?: Maybe<ComptrollerProxy>;
    comptrollerProxies: Array<ComptrollerProxy>;
    hourlyFundState?: Maybe<HourlyFundState>;
    hourlyFundStates: Array<HourlyFundState>;
    dailyFundState?: Maybe<DailyFundState>;
    dailyFundStates: Array<DailyFundState>;
    monthlyFundState?: Maybe<MonthlyFundState>;
    monthlyFundStates: Array<MonthlyFundState>;
    migration?: Maybe<Migration>;
    migrations: Array<Migration>;
    release?: Maybe<Release>;
    releases: Array<Release>;
    account?: Maybe<Account>;
    accounts: Array<Account>;
    investment?: Maybe<Investment>;
    investments: Array<Investment>;
    investmentState?: Maybe<InvestmentState>;
    investmentStates: Array<InvestmentState>;
    fee?: Maybe<Fee>;
    fees: Array<Fee>;
    managementFeeSetting?: Maybe<ManagementFeeSetting>;
    managementFeeSettings: Array<ManagementFeeSetting>;
    performanceFeeSetting?: Maybe<PerformanceFeeSetting>;
    performanceFeeSettings: Array<PerformanceFeeSetting>;
    entranceRateDirectFeeSetting?: Maybe<EntranceRateDirectFeeSetting>;
    entranceRateDirectFeeSettings: Array<EntranceRateDirectFeeSetting>;
    entranceRateBurnFeeSetting?: Maybe<EntranceRateBurnFeeSetting>;
    entranceRateBurnFeeSettings: Array<EntranceRateBurnFeeSetting>;
    integrationAdapter?: Maybe<IntegrationAdapter>;
    integrationAdapters: Array<IntegrationAdapter>;
    policy?: Maybe<Policy>;
    policies: Array<Policy>;
    adapterBlacklistSetting?: Maybe<AdapterBlacklistSetting>;
    adapterBlacklistSettings: Array<AdapterBlacklistSetting>;
    adapterWhitelistSetting?: Maybe<AdapterWhitelistSetting>;
    adapterWhitelistSettings: Array<AdapterWhitelistSetting>;
    assetBlacklistSetting?: Maybe<AssetBlacklistSetting>;
    assetBlacklistSettings: Array<AssetBlacklistSetting>;
    assetWhitelistSetting?: Maybe<AssetWhitelistSetting>;
    assetWhitelistSettings: Array<AssetWhitelistSetting>;
    buySharesCallerWhitelistSetting?: Maybe<BuySharesCallerWhitelistSetting>;
    buySharesCallerWhitelistSettings: Array<BuySharesCallerWhitelistSetting>;
    guaranteedRedemptionSetting?: Maybe<GuaranteedRedemptionSetting>;
    guaranteedRedemptionSettings: Array<GuaranteedRedemptionSetting>;
    investorWhitelistSetting?: Maybe<InvestorWhitelistSetting>;
    investorWhitelistSettings: Array<InvestorWhitelistSetting>;
    maxConcentrationSetting?: Maybe<MaxConcentrationSetting>;
    maxConcentrationSettings: Array<MaxConcentrationSetting>;
    minMaxInvestmentSetting?: Maybe<MinMaxInvestmentSetting>;
    minMaxInvestmentSettings: Array<MinMaxInvestmentSetting>;
    unknownPolicySetting?: Maybe<UnknownPolicySetting>;
    unknownPolicySettings: Array<UnknownPolicySetting>;
    shareState?: Maybe<ShareState>;
    shareStates: Array<ShareState>;
    portfolioState?: Maybe<PortfolioState>;
    portfolioStates: Array<PortfolioState>;
    holdingState?: Maybe<HoldingState>;
    holdingStates: Array<HoldingState>;
    fundState?: Maybe<FundState>;
    fundStates: Array<FundState>;
    feeState?: Maybe<FeeState>;
    feeStates: Array<FeeState>;
    managementFeeState?: Maybe<ManagementFeeState>;
    managementFeeStates: Array<ManagementFeeState>;
    performanceFeeState?: Maybe<PerformanceFeeState>;
    performanceFeeStates: Array<PerformanceFeeState>;
    entranceRateDirectFeeState?: Maybe<EntranceRateDirectFeeState>;
    entranceRateDirectFeeStates: Array<EntranceRateDirectFeeState>;
    entranceRateBurnFeeState?: Maybe<EntranceRateBurnFeeState>;
    entranceRateBurnFeeStates: Array<EntranceRateBurnFeeState>;
    tokenSwapTrade?: Maybe<TokenSwapTrade>;
    tokenSwapTrades: Array<TokenSwapTrade>;
    multiTokenSwapTrade?: Maybe<MultiTokenSwapTrade>;
    multiTokenSwapTrades: Array<MultiTokenSwapTrade>;
    lendTrade?: Maybe<LendTrade>;
    lendTrades: Array<LendTrade>;
    multiLendTrade?: Maybe<MultiLendTrade>;
    multiLendTrades: Array<MultiLendTrade>;
    redeemTrade?: Maybe<RedeemTrade>;
    redeemTrades: Array<RedeemTrade>;
    multiRedeemTrade?: Maybe<MultiRedeemTrade>;
    multiRedeemTrades: Array<MultiRedeemTrade>;
    addTrackedAssetsTrade?: Maybe<AddTrackedAssetsTrade>;
    addTrackedAssetsTrades: Array<AddTrackedAssetsTrade>;
    removeTrackedAssetsTrade?: Maybe<RemoveTrackedAssetsTrade>;
    removeTrackedAssetsTrades: Array<RemoveTrackedAssetsTrade>;
    approveAssetsTrade?: Maybe<ApproveAssetsTrade>;
    approveAssetsTrades: Array<ApproveAssetsTrade>;
    stakeTrade?: Maybe<StakeTrade>;
    stakeTrades: Array<StakeTrade>;
    unstakeTrade?: Maybe<UnstakeTrade>;
    unstakeTrades: Array<UnstakeTrade>;
    claimRewardsTrade?: Maybe<ClaimRewardsTrade>;
    claimRewardsTrades: Array<ClaimRewardsTrade>;
    claimRewardsAndReinvestTrade?: Maybe<ClaimRewardsAndReinvestTrade>;
    claimRewardsAndReinvestTrades: Array<ClaimRewardsAndReinvestTrade>;
    claimRewardsAndSwapTrade?: Maybe<ClaimRewardsAndSwapTrade>;
    claimRewardsAndSwapTrades: Array<ClaimRewardsAndSwapTrade>;
    lendAndStakeTrade?: Maybe<LendAndStakeTrade>;
    lendAndStakeTrades: Array<LendAndStakeTrade>;
    unstakeAndRedeemTrade?: Maybe<UnstakeAndRedeemTrade>;
    unstakeAndRedeemTrades: Array<UnstakeAndRedeemTrade>;
    asset?: Maybe<Asset>;
    assets: Array<Asset>;
    currency?: Maybe<Currency>;
    currencies: Array<Currency>;
    curvePoolAssetDetail?: Maybe<CurvePoolAssetDetail>;
    curvePoolAssetDetails: Array<CurvePoolAssetDetail>;
    uniswapV2PoolAssetDetail?: Maybe<UniswapV2PoolAssetDetail>;
    uniswapV2PoolAssetDetails: Array<UniswapV2PoolAssetDetail>;
    assetAmount?: Maybe<AssetAmount>;
    assetAmounts: Array<AssetAmount>;
    assetPrice?: Maybe<AssetPrice>;
    assetPrices: Array<AssetPrice>;
    currencyPrice?: Maybe<CurrencyPrice>;
    currencyPrices: Array<CurrencyPrice>;
    hourlyAssetPriceCandle?: Maybe<HourlyAssetPriceCandle>;
    hourlyAssetPriceCandles: Array<HourlyAssetPriceCandle>;
    dailyAssetPriceCandle?: Maybe<DailyAssetPriceCandle>;
    dailyAssetPriceCandles: Array<DailyAssetPriceCandle>;
    monthlyAssetPriceCandle?: Maybe<MonthlyAssetPriceCandle>;
    monthlyAssetPriceCandles: Array<MonthlyAssetPriceCandle>;
    hourlyCurrencyPriceCandle?: Maybe<HourlyCurrencyPriceCandle>;
    hourlyCurrencyPriceCandles: Array<HourlyCurrencyPriceCandle>;
    dailyCurrencyPriceCandle?: Maybe<DailyCurrencyPriceCandle>;
    dailyCurrencyPriceCandles: Array<DailyCurrencyPriceCandle>;
    monthlyCurrencyPriceCandle?: Maybe<MonthlyCurrencyPriceCandle>;
    monthlyCurrencyPriceCandles: Array<MonthlyCurrencyPriceCandle>;
    hourlyPriceCandleGroup?: Maybe<HourlyPriceCandleGroup>;
    hourlyPriceCandleGroups: Array<HourlyPriceCandleGroup>;
    dailyPriceCandleGroup?: Maybe<DailyPriceCandleGroup>;
    dailyPriceCandleGroups: Array<DailyPriceCandleGroup>;
    monthlyPriceCandleGroup?: Maybe<MonthlyPriceCandleGroup>;
    monthlyPriceCandleGroups: Array<MonthlyPriceCandleGroup>;
    chainlinkAggregatorProxy?: Maybe<ChainlinkAggregatorProxy>;
    chainlinkAggregatorProxies: Array<ChainlinkAggregatorProxy>;
    cron?: Maybe<Cron>;
    crons: Array<Cron>;
    network?: Maybe<Network>;
    networks: Array<Network>;
    networkState?: Maybe<NetworkState>;
    networkStates: Array<NetworkState>;
    networkAssetHolding?: Maybe<NetworkAssetHolding>;
    networkAssetHoldings: Array<NetworkAssetHolding>;
    eventInterface?: Maybe<EventInterface>;
    eventInterfaces: Array<EventInterface>;
    networkEventInterface?: Maybe<NetworkEventInterface>;
    networkEventInterfaces: Array<NetworkEventInterface>;
    fundEventInterface?: Maybe<FundEventInterface>;
    fundEventInterfaces: Array<FundEventInterface>;
    comptrollerEventInterface?: Maybe<ComptrollerEventInterface>;
    comptrollerEventInterfaces: Array<ComptrollerEventInterface>;
    sharesChangeInterface?: Maybe<SharesChangeInterface>;
    sharesChangeInterfaces: Array<SharesChangeInterface>;
    feeSharesChangeInterface?: Maybe<FeeSharesChangeInterface>;
    feeSharesChangeInterfaces: Array<FeeSharesChangeInterface>;
    investmentSharesChangeInterface?: Maybe<InvestmentSharesChangeInterface>;
    investmentSharesChangeInterfaces: Array<InvestmentSharesChangeInterface>;
    fundStateInterface?: Maybe<FundStateInterface>;
    fundStateInterfaces: Array<FundStateInterface>;
    feeSettingInterface?: Maybe<FeeSettingInterface>;
    feeSettingInterfaces: Array<FeeSettingInterface>;
    policySettingInterface?: Maybe<PolicySettingInterface>;
    policySettingInterfaces: Array<PolicySettingInterface>;
    individualFeeStateInterface?: Maybe<IndividualFeeStateInterface>;
    individualFeeStateInterfaces: Array<IndividualFeeStateInterface>;
    periodicFundStateInterface?: Maybe<PeriodicFundStateInterface>;
    periodicFundStateInterfaces: Array<PeriodicFundStateInterface>;
    trade?: Maybe<Trade>;
    trades: Array<Trade>;
    /** Access to subgraph metadata */
    _meta?: Maybe<_Meta_>;
};
export declare type SubscriptionNewFundCreatedEventArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionNewFundCreatedEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<NewFundCreatedEvent_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<NewFundCreatedEvent_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionVaultProxySetEventArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionVaultProxySetEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<VaultProxySetEvent_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<VaultProxySetEvent_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionSharesBoughtEventArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionSharesBoughtEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<SharesBoughtEvent_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<SharesBoughtEvent_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionSharesRedeemedEventArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionSharesRedeemedEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<SharesRedeemedEvent_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<SharesRedeemedEvent_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionAssetWithdrawnEventArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionAssetWithdrawnEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<AssetWithdrawnEvent_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<AssetWithdrawnEvent_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionTrackedAssetAddedEventArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionTrackedAssetAddedEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<TrackedAssetAddedEvent_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<TrackedAssetAddedEvent_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionTrackedAssetRemovedEventArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionTrackedAssetRemovedEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<TrackedAssetRemovedEvent_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<TrackedAssetRemovedEvent_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionAuthUserAddedForFundEventArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionAuthUserAddedForFundEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<AuthUserAddedForFundEvent_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<AuthUserAddedForFundEvent_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionAuthUserRemovedForFundEventArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionAuthUserRemovedForFundEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<AuthUserRemovedForFundEvent_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<AuthUserRemovedForFundEvent_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionCallOnIntegrationExecutedForFundEventArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionCallOnIntegrationExecutedForFundEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<CallOnIntegrationExecutedForFundEvent_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<CallOnIntegrationExecutedForFundEvent_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionMigrationSignaledEventArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionMigrationSignaledEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<MigrationSignaledEvent_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<MigrationSignaledEvent_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionMigrationCancelledEventArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionMigrationCancelledEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<MigrationCancelledEvent_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<MigrationCancelledEvent_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionMigrationExecutedEventArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionMigrationExecutedEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<MigrationExecutedEvent_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<MigrationExecutedEvent_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionMigrationInCancelHookFailedEventArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionMigrationInCancelHookFailedEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<MigrationInCancelHookFailedEvent_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<MigrationInCancelHookFailedEvent_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionMigrationOutHookFailedEventArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionMigrationOutHookFailedEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<MigrationOutHookFailedEvent_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<MigrationOutHookFailedEvent_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionFeeEnabledForFundEventArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionFeeEnabledForFundEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<FeeEnabledForFundEvent_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<FeeEnabledForFundEvent_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionFeesRecipientSetForFundEventArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionFeesRecipientSetForFundEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<FeesRecipientSetForFundEvent_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<FeesRecipientSetForFundEvent_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionFeeSettledForFundEventArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionFeeSettledForFundEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<FeeSettledForFundEvent_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<FeeSettledForFundEvent_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionAllSharesOutstandingForcePaidForFundEventArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionAllSharesOutstandingForcePaidForFundEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<AllSharesOutstandingForcePaidForFundEvent_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<AllSharesOutstandingForcePaidForFundEvent_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionSharesOutstandingPaidForFundEventArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionSharesOutstandingPaidForFundEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<SharesOutstandingPaidForFundEvent_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<SharesOutstandingPaidForFundEvent_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionMigratedSharesDuePaidEventArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionMigratedSharesDuePaidEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<MigratedSharesDuePaidEvent_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<MigratedSharesDuePaidEvent_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionPolicyEnabledForFundEventArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionPolicyEnabledForFundEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<PolicyEnabledForFundEvent_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<PolicyEnabledForFundEvent_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionPolicyDisabledForFundEventArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionPolicyDisabledForFundEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<PolicyDisabledForFundEvent_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<PolicyDisabledForFundEvent_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionAccessorSetEventArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionAccessorSetEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<AccessorSetEvent_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<AccessorSetEvent_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionOwnerSetEventArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionOwnerSetEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<OwnerSetEvent_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<OwnerSetEvent_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionMigratorSetEventArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionMigratorSetEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<MigratorSetEvent_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<MigratorSetEvent_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionVaultLibSetEventArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionVaultLibSetEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<VaultLibSetEvent_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<VaultLibSetEvent_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionApprovalEventArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionApprovalEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<ApprovalEvent_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<ApprovalEvent_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionTransferEventArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionTransferEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<TransferEvent_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<TransferEvent_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionAdapterBlacklistAddressesAddedEventArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionAdapterBlacklistAddressesAddedEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<AdapterBlacklistAddressesAddedEvent_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<AdapterBlacklistAddressesAddedEvent_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionAdapterBlacklistAddressesRemovedEventArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionAdapterBlacklistAddressesRemovedEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<AdapterBlacklistAddressesRemovedEvent_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<AdapterBlacklistAddressesRemovedEvent_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionAdapterWhitelistAddressesAddedEventArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionAdapterWhitelistAddressesAddedEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<AdapterWhitelistAddressesAddedEvent_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<AdapterWhitelistAddressesAddedEvent_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionAdapterWhitelistAddressesRemovedEventArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionAdapterWhitelistAddressesRemovedEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<AdapterWhitelistAddressesRemovedEvent_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<AdapterWhitelistAddressesRemovedEvent_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionAssetBlacklistAddressesAddedEventArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionAssetBlacklistAddressesAddedEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<AssetBlacklistAddressesAddedEvent_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<AssetBlacklistAddressesAddedEvent_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionAssetBlacklistAddressesRemovedEventArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionAssetBlacklistAddressesRemovedEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<AssetBlacklistAddressesRemovedEvent_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<AssetBlacklistAddressesRemovedEvent_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionAssetWhitelistAddressesAddedEventArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionAssetWhitelistAddressesAddedEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<AssetWhitelistAddressesAddedEvent_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<AssetWhitelistAddressesAddedEvent_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionAssetWhitelistAddressesRemovedEventArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionAssetWhitelistAddressesRemovedEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<AssetWhitelistAddressesRemovedEvent_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<AssetWhitelistAddressesRemovedEvent_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionBuySharesCallerWhitelistAddressesAddedEventArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionBuySharesCallerWhitelistAddressesAddedEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<BuySharesCallerWhitelistAddressesAddedEvent_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<BuySharesCallerWhitelistAddressesAddedEvent_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionBuySharesCallerWhitelistAddressesRemovedEventArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionBuySharesCallerWhitelistAddressesRemovedEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<BuySharesCallerWhitelistAddressesRemovedEvent_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<BuySharesCallerWhitelistAddressesRemovedEvent_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionGuaranteedRedemptionFundSettingsSetEventArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionGuaranteedRedemptionFundSettingsSetEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<GuaranteedRedemptionFundSettingsSetEvent_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<GuaranteedRedemptionFundSettingsSetEvent_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionInvestorWhitelistAddressesAddedEventArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionInvestorWhitelistAddressesAddedEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<InvestorWhitelistAddressesAddedEvent_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<InvestorWhitelistAddressesAddedEvent_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionInvestorWhitelistAddressesRemovedEventArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionInvestorWhitelistAddressesRemovedEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<InvestorWhitelistAddressesRemovedEvent_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<InvestorWhitelistAddressesRemovedEvent_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionMaxConcentrationSetEventArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionMaxConcentrationSetEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<MaxConcentrationSetEvent_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<MaxConcentrationSetEvent_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionMinMaxInvestmentFundSettingsSetEventArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionMinMaxInvestmentFundSettingsSetEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<MinMaxInvestmentFundSettingsSetEvent_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<MinMaxInvestmentFundSettingsSetEvent_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionManagementFeeSettingsAddedEventArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionManagementFeeSettingsAddedEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<ManagementFeeSettingsAddedEvent_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<ManagementFeeSettingsAddedEvent_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionManagementFeeSettledEventArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionManagementFeeSettledEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<ManagementFeeSettledEvent_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<ManagementFeeSettledEvent_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionManagementFeeActivatedForMigratedFundEventArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionManagementFeeActivatedForMigratedFundEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<ManagementFeeActivatedForMigratedFundEvent_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<ManagementFeeActivatedForMigratedFundEvent_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionPerformanceFeeSettingsAddedEventArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionPerformanceFeeSettingsAddedEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<PerformanceFeeSettingsAddedEvent_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<PerformanceFeeSettingsAddedEvent_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionPerformanceFeeActivatedForFundEventArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionPerformanceFeeActivatedForFundEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<PerformanceFeeActivatedForFundEvent_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<PerformanceFeeActivatedForFundEvent_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionPerformanceFeeSharePriceUpdatedEventArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionPerformanceFeeSharePriceUpdatedEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<PerformanceFeeSharePriceUpdatedEvent_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<PerformanceFeeSharePriceUpdatedEvent_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionPerformanceFeePaidOutEventArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionPerformanceFeePaidOutEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<PerformanceFeePaidOutEvent_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<PerformanceFeePaidOutEvent_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionPerformanceFeePerformanceUpdatedEventArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionPerformanceFeePerformanceUpdatedEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<PerformanceFeePerformanceUpdatedEvent_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<PerformanceFeePerformanceUpdatedEvent_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionEntranceRateDirectFeeSettingsAddedEventArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionEntranceRateDirectFeeSettingsAddedEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<EntranceRateDirectFeeSettingsAddedEvent_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<EntranceRateDirectFeeSettingsAddedEvent_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionEntranceRateDirectFeeSettledEventArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionEntranceRateDirectFeeSettledEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<EntranceRateDirectFeeSettledEvent_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<EntranceRateDirectFeeSettledEvent_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionEntranceRateBurnFeeSettingsAddedEventArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionEntranceRateBurnFeeSettingsAddedEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<EntranceRateBurnFeeSettingsAddedEvent_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<EntranceRateBurnFeeSettingsAddedEvent_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionEntranceRateBurnFeeSettledEventArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionEntranceRateBurnFeeSettledEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<EntranceRateBurnFeeSettledEvent_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<EntranceRateBurnFeeSettledEvent_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionOverridePauseSetEventArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionOverridePauseSetEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<OverridePauseSetEvent_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<OverridePauseSetEvent_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionPreRedeemSharesHookFailedEventArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionPreRedeemSharesHookFailedEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<PreRedeemSharesHookFailedEvent_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<PreRedeemSharesHookFailedEvent_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionVaultProxyDeployedEventArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionVaultProxyDeployedEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<VaultProxyDeployedEvent_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<VaultProxyDeployedEvent_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionComptrollerProxyDeployedEventArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionComptrollerProxyDeployedEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<ComptrollerProxyDeployedEvent_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<ComptrollerProxyDeployedEvent_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionComptrollerLibSetEventArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionComptrollerLibSetEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<ComptrollerLibSetEvent_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<ComptrollerLibSetEvent_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionAdapterRegisteredEventArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionAdapterRegisteredEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<AdapterRegisteredEvent_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<AdapterRegisteredEvent_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionAdapterDeregisteredEventArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionAdapterDeregisteredEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<AdapterDeregisteredEvent_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<AdapterDeregisteredEvent_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionTrackedAssetsLimitSetEventArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionTrackedAssetsLimitSetEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<TrackedAssetsLimitSetEvent_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<TrackedAssetsLimitSetEvent_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionPolicyRegisteredEventArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionPolicyRegisteredEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<PolicyRegisteredEvent_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<PolicyRegisteredEvent_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionPolicyDeregisteredEventArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionPolicyDeregisteredEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<PolicyDeregisteredEvent_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<PolicyDeregisteredEvent_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionGuaranteedRedemptionAdapterAddedEventArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionGuaranteedRedemptionAdapterAddedEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<GuaranteedRedemptionAdapterAddedEvent_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<GuaranteedRedemptionAdapterAddedEvent_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionGuaranteedRedemptionAdapterRemovedEventArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionGuaranteedRedemptionAdapterRemovedEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<GuaranteedRedemptionAdapterRemovedEvent_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<GuaranteedRedemptionAdapterRemovedEvent_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionGuaranteedRedemptionRedemptionWindowBufferSetEventArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionGuaranteedRedemptionRedemptionWindowBufferSetEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<GuaranteedRedemptionRedemptionWindowBufferSetEvent_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<GuaranteedRedemptionRedemptionWindowBufferSetEvent_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionFundDeployerSetEventArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionFundDeployerSetEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<FundDeployerSetEvent_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<FundDeployerSetEvent_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionValueInterpreterSetEventArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionValueInterpreterSetEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<ValueInterpreterSetEvent_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<ValueInterpreterSetEvent_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionOwnershipTransferredEventArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionOwnershipTransferredEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<OwnershipTransferredEvent_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<OwnershipTransferredEvent_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionDerivativeAddedEventArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionDerivativeAddedEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<DerivativeAddedEvent_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<DerivativeAddedEvent_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionDerivativeRemovedEventArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionDerivativeRemovedEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<DerivativeRemovedEvent_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<DerivativeRemovedEvent_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionDerivativeUpdatedEventArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionDerivativeUpdatedEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<DerivativeUpdatedEvent_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<DerivativeUpdatedEvent_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionAggregatorUpdatedEventArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionAggregatorUpdatedEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<AggregatorUpdatedEvent_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<AggregatorUpdatedEvent_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionEthUsdAggregatorSetEventArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionEthUsdAggregatorSetEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<EthUsdAggregatorSetEvent_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<EthUsdAggregatorSetEvent_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionPrimitiveAddedEventArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionPrimitiveAddedEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<PrimitiveAddedEvent_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<PrimitiveAddedEvent_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionPrimitiveRemovedEventArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionPrimitiveRemovedEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<PrimitiveRemovedEvent_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<PrimitiveRemovedEvent_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionFeeRegisteredEventArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionFeeRegisteredEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<FeeRegisteredEvent_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<FeeRegisteredEvent_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionFeeDeregisteredEventArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionFeeDeregisteredEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<FeeDeregisteredEvent_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<FeeDeregisteredEvent_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionMigrationTimelockSetEventArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionMigrationTimelockSetEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<MigrationTimelockSetEvent_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<MigrationTimelockSetEvent_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionNominatedOwnerRemovedEventArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionNominatedOwnerRemovedEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<NominatedOwnerRemovedEvent_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<NominatedOwnerRemovedEvent_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionNominatedOwnerSetEventArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionNominatedOwnerSetEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<NominatedOwnerSetEvent_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<NominatedOwnerSetEvent_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionDispatcherOwnershipTransferredEventArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionDispatcherOwnershipTransferredEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<DispatcherOwnershipTransferredEvent_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<DispatcherOwnershipTransferredEvent_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionSharesTokenSymbolSetEventArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionSharesTokenSymbolSetEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<SharesTokenSymbolSetEvent_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<SharesTokenSymbolSetEvent_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionReleaseStatusSetEventArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionReleaseStatusSetEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<ReleaseStatusSetEvent_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<ReleaseStatusSetEvent_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionVaultCallRegisteredEventArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionVaultCallRegisteredEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<VaultCallRegisteredEvent_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<VaultCallRegisteredEvent_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionVaultCallDeregisteredEventArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionVaultCallDeregisteredEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<VaultCallDeregisteredEvent_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<VaultCallDeregisteredEvent_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionTransactionArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionTransactionsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<Transaction_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<Transaction_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionIntegrationManagerArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionIntegrationManagersArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<IntegrationManager_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<IntegrationManager_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionPolicyManagerArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionPolicyManagersArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<PolicyManager_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<PolicyManager_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionFeeManagerArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionFeeManagersArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<FeeManager_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<FeeManager_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionGuaranteedRedemptionArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionGuaranteedRedemptionsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<GuaranteedRedemption_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<GuaranteedRedemption_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionFundArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionFundsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<Fund_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<Fund_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionComptrollerProxyArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionComptrollerProxiesArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<ComptrollerProxy_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<ComptrollerProxy_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionHourlyFundStateArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionHourlyFundStatesArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<HourlyFundState_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<HourlyFundState_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionDailyFundStateArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionDailyFundStatesArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<DailyFundState_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<DailyFundState_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionMonthlyFundStateArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionMonthlyFundStatesArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<MonthlyFundState_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<MonthlyFundState_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionMigrationArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionMigrationsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<Migration_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<Migration_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionReleaseArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionReleasesArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<Release_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<Release_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionAccountArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionAccountsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<Account_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<Account_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionInvestmentArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionInvestmentsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<Investment_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<Investment_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionInvestmentStateArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionInvestmentStatesArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<InvestmentState_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<InvestmentState_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionFeeArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionFeesArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<Fee_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<Fee_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionManagementFeeSettingArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionManagementFeeSettingsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<ManagementFeeSetting_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<ManagementFeeSetting_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionPerformanceFeeSettingArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionPerformanceFeeSettingsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<PerformanceFeeSetting_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<PerformanceFeeSetting_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionEntranceRateDirectFeeSettingArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionEntranceRateDirectFeeSettingsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<EntranceRateDirectFeeSetting_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<EntranceRateDirectFeeSetting_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionEntranceRateBurnFeeSettingArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionEntranceRateBurnFeeSettingsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<EntranceRateBurnFeeSetting_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<EntranceRateBurnFeeSetting_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionIntegrationAdapterArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionIntegrationAdaptersArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<IntegrationAdapter_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<IntegrationAdapter_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionPolicyArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionPoliciesArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<Policy_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<Policy_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionAdapterBlacklistSettingArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionAdapterBlacklistSettingsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<AdapterBlacklistSetting_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<AdapterBlacklistSetting_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionAdapterWhitelistSettingArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionAdapterWhitelistSettingsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<AdapterWhitelistSetting_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<AdapterWhitelistSetting_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionAssetBlacklistSettingArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionAssetBlacklistSettingsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<AssetBlacklistSetting_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<AssetBlacklistSetting_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionAssetWhitelistSettingArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionAssetWhitelistSettingsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<AssetWhitelistSetting_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<AssetWhitelistSetting_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionBuySharesCallerWhitelistSettingArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionBuySharesCallerWhitelistSettingsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<BuySharesCallerWhitelistSetting_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<BuySharesCallerWhitelistSetting_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionGuaranteedRedemptionSettingArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionGuaranteedRedemptionSettingsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<GuaranteedRedemptionSetting_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<GuaranteedRedemptionSetting_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionInvestorWhitelistSettingArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionInvestorWhitelistSettingsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<InvestorWhitelistSetting_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<InvestorWhitelistSetting_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionMaxConcentrationSettingArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionMaxConcentrationSettingsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<MaxConcentrationSetting_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<MaxConcentrationSetting_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionMinMaxInvestmentSettingArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionMinMaxInvestmentSettingsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<MinMaxInvestmentSetting_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<MinMaxInvestmentSetting_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionUnknownPolicySettingArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionUnknownPolicySettingsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<UnknownPolicySetting_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<UnknownPolicySetting_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionShareStateArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionShareStatesArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<ShareState_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<ShareState_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionPortfolioStateArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionPortfolioStatesArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<PortfolioState_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<PortfolioState_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionHoldingStateArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionHoldingStatesArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<HoldingState_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<HoldingState_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionFundStateArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionFundStatesArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<FundState_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<FundState_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionFeeStateArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionFeeStatesArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<FeeState_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<FeeState_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionManagementFeeStateArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionManagementFeeStatesArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<ManagementFeeState_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<ManagementFeeState_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionPerformanceFeeStateArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionPerformanceFeeStatesArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<PerformanceFeeState_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<PerformanceFeeState_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionEntranceRateDirectFeeStateArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionEntranceRateDirectFeeStatesArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<EntranceRateDirectFeeState_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<EntranceRateDirectFeeState_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionEntranceRateBurnFeeStateArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionEntranceRateBurnFeeStatesArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<EntranceRateBurnFeeState_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<EntranceRateBurnFeeState_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionTokenSwapTradeArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionTokenSwapTradesArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<TokenSwapTrade_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<TokenSwapTrade_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionMultiTokenSwapTradeArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionMultiTokenSwapTradesArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<MultiTokenSwapTrade_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<MultiTokenSwapTrade_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionLendTradeArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionLendTradesArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<LendTrade_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<LendTrade_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionMultiLendTradeArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionMultiLendTradesArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<MultiLendTrade_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<MultiLendTrade_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionRedeemTradeArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionRedeemTradesArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<RedeemTrade_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<RedeemTrade_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionMultiRedeemTradeArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionMultiRedeemTradesArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<MultiRedeemTrade_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<MultiRedeemTrade_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionAddTrackedAssetsTradeArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionAddTrackedAssetsTradesArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<AddTrackedAssetsTrade_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<AddTrackedAssetsTrade_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionRemoveTrackedAssetsTradeArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionRemoveTrackedAssetsTradesArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<RemoveTrackedAssetsTrade_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<RemoveTrackedAssetsTrade_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionApproveAssetsTradeArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionApproveAssetsTradesArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<ApproveAssetsTrade_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<ApproveAssetsTrade_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionStakeTradeArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionStakeTradesArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<StakeTrade_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<StakeTrade_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionUnstakeTradeArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionUnstakeTradesArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<UnstakeTrade_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<UnstakeTrade_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionClaimRewardsTradeArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionClaimRewardsTradesArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<ClaimRewardsTrade_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<ClaimRewardsTrade_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionClaimRewardsAndReinvestTradeArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionClaimRewardsAndReinvestTradesArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<ClaimRewardsAndReinvestTrade_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<ClaimRewardsAndReinvestTrade_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionClaimRewardsAndSwapTradeArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionClaimRewardsAndSwapTradesArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<ClaimRewardsAndSwapTrade_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<ClaimRewardsAndSwapTrade_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionLendAndStakeTradeArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionLendAndStakeTradesArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<LendAndStakeTrade_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<LendAndStakeTrade_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionUnstakeAndRedeemTradeArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionUnstakeAndRedeemTradesArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<UnstakeAndRedeemTrade_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<UnstakeAndRedeemTrade_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionAssetArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionAssetsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<Asset_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<Asset_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionCurrencyArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionCurrenciesArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<Currency_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<Currency_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionCurvePoolAssetDetailArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionCurvePoolAssetDetailsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<CurvePoolAssetDetail_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<CurvePoolAssetDetail_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionUniswapV2PoolAssetDetailArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionUniswapV2PoolAssetDetailsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<UniswapV2PoolAssetDetail_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<UniswapV2PoolAssetDetail_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionAssetAmountArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionAssetAmountsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<AssetAmount_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<AssetAmount_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionAssetPriceArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionAssetPricesArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<AssetPrice_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<AssetPrice_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionCurrencyPriceArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionCurrencyPricesArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<CurrencyPrice_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<CurrencyPrice_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionHourlyAssetPriceCandleArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionHourlyAssetPriceCandlesArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<HourlyAssetPriceCandle_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<HourlyAssetPriceCandle_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionDailyAssetPriceCandleArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionDailyAssetPriceCandlesArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<DailyAssetPriceCandle_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<DailyAssetPriceCandle_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionMonthlyAssetPriceCandleArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionMonthlyAssetPriceCandlesArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<MonthlyAssetPriceCandle_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<MonthlyAssetPriceCandle_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionHourlyCurrencyPriceCandleArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionHourlyCurrencyPriceCandlesArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<HourlyCurrencyPriceCandle_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<HourlyCurrencyPriceCandle_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionDailyCurrencyPriceCandleArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionDailyCurrencyPriceCandlesArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<DailyCurrencyPriceCandle_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<DailyCurrencyPriceCandle_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionMonthlyCurrencyPriceCandleArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionMonthlyCurrencyPriceCandlesArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<MonthlyCurrencyPriceCandle_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<MonthlyCurrencyPriceCandle_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionHourlyPriceCandleGroupArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionHourlyPriceCandleGroupsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<HourlyPriceCandleGroup_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<HourlyPriceCandleGroup_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionDailyPriceCandleGroupArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionDailyPriceCandleGroupsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<DailyPriceCandleGroup_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<DailyPriceCandleGroup_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionMonthlyPriceCandleGroupArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionMonthlyPriceCandleGroupsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<MonthlyPriceCandleGroup_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<MonthlyPriceCandleGroup_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionChainlinkAggregatorProxyArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionChainlinkAggregatorProxiesArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<ChainlinkAggregatorProxy_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<ChainlinkAggregatorProxy_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionCronArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionCronsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<Cron_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<Cron_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionNetworkArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionNetworksArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<Network_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<Network_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionNetworkStateArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionNetworkStatesArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<NetworkState_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<NetworkState_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionNetworkAssetHoldingArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionNetworkAssetHoldingsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<NetworkAssetHolding_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<NetworkAssetHolding_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionEventInterfaceArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionEventInterfacesArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<EventInterface_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<EventInterface_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionNetworkEventInterfaceArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionNetworkEventInterfacesArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<NetworkEventInterface_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<NetworkEventInterface_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionFundEventInterfaceArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionFundEventInterfacesArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<FundEventInterface_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<FundEventInterface_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionComptrollerEventInterfaceArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionComptrollerEventInterfacesArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<ComptrollerEventInterface_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<ComptrollerEventInterface_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionSharesChangeInterfaceArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionSharesChangeInterfacesArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<SharesChangeInterface_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<SharesChangeInterface_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionFeeSharesChangeInterfaceArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionFeeSharesChangeInterfacesArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<FeeSharesChangeInterface_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<FeeSharesChangeInterface_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionInvestmentSharesChangeInterfaceArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionInvestmentSharesChangeInterfacesArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<InvestmentSharesChangeInterface_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<InvestmentSharesChangeInterface_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionFundStateInterfaceArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionFundStateInterfacesArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<FundStateInterface_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<FundStateInterface_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionFeeSettingInterfaceArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionFeeSettingInterfacesArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<FeeSettingInterface_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<FeeSettingInterface_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionPolicySettingInterfaceArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionPolicySettingInterfacesArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<PolicySettingInterface_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<PolicySettingInterface_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionIndividualFeeStateInterfaceArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionIndividualFeeStateInterfacesArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<IndividualFeeStateInterface_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<IndividualFeeStateInterface_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionPeriodicFundStateInterfaceArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionPeriodicFundStateInterfacesArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<PeriodicFundStateInterface_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<PeriodicFundStateInterface_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionTradeArgs = {
    id: Scalars['ID'];
    block?: Maybe<Block_Height>;
};
export declare type SubscriptionTradesArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<Trade_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<Trade_Filter>;
    block?: Maybe<Block_Height>;
};
export declare type Subscription_MetaArgs = {
    block?: Maybe<Block_Height>;
};
export declare type TokenSwapTrade = Trade & {
    __typename?: 'TokenSwapTrade';
    id: Scalars['ID'];
    fund: Fund;
    adapter: IntegrationAdapter;
    method: IntegrationMethod;
    incomingAssetAmount: AssetAmount;
    outgoingAssetAmount: AssetAmount;
    price: Scalars['BigDecimal'];
    timestamp: Scalars['BigInt'];
    fundState: FundState;
};
export declare type TokenSwapTrade_Filter = {
    id?: Maybe<Scalars['ID']>;
    id_not?: Maybe<Scalars['ID']>;
    id_gt?: Maybe<Scalars['ID']>;
    id_lt?: Maybe<Scalars['ID']>;
    id_gte?: Maybe<Scalars['ID']>;
    id_lte?: Maybe<Scalars['ID']>;
    id_in?: Maybe<Array<Scalars['ID']>>;
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    fund?: Maybe<Scalars['String']>;
    fund_not?: Maybe<Scalars['String']>;
    fund_gt?: Maybe<Scalars['String']>;
    fund_lt?: Maybe<Scalars['String']>;
    fund_gte?: Maybe<Scalars['String']>;
    fund_lte?: Maybe<Scalars['String']>;
    fund_in?: Maybe<Array<Scalars['String']>>;
    fund_not_in?: Maybe<Array<Scalars['String']>>;
    fund_contains?: Maybe<Scalars['String']>;
    fund_not_contains?: Maybe<Scalars['String']>;
    fund_starts_with?: Maybe<Scalars['String']>;
    fund_not_starts_with?: Maybe<Scalars['String']>;
    fund_ends_with?: Maybe<Scalars['String']>;
    fund_not_ends_with?: Maybe<Scalars['String']>;
    adapter?: Maybe<Scalars['String']>;
    adapter_not?: Maybe<Scalars['String']>;
    adapter_gt?: Maybe<Scalars['String']>;
    adapter_lt?: Maybe<Scalars['String']>;
    adapter_gte?: Maybe<Scalars['String']>;
    adapter_lte?: Maybe<Scalars['String']>;
    adapter_in?: Maybe<Array<Scalars['String']>>;
    adapter_not_in?: Maybe<Array<Scalars['String']>>;
    adapter_contains?: Maybe<Scalars['String']>;
    adapter_not_contains?: Maybe<Scalars['String']>;
    adapter_starts_with?: Maybe<Scalars['String']>;
    adapter_not_starts_with?: Maybe<Scalars['String']>;
    adapter_ends_with?: Maybe<Scalars['String']>;
    adapter_not_ends_with?: Maybe<Scalars['String']>;
    method?: Maybe<IntegrationMethod>;
    method_not?: Maybe<IntegrationMethod>;
    incomingAssetAmount?: Maybe<Scalars['String']>;
    incomingAssetAmount_not?: Maybe<Scalars['String']>;
    incomingAssetAmount_gt?: Maybe<Scalars['String']>;
    incomingAssetAmount_lt?: Maybe<Scalars['String']>;
    incomingAssetAmount_gte?: Maybe<Scalars['String']>;
    incomingAssetAmount_lte?: Maybe<Scalars['String']>;
    incomingAssetAmount_in?: Maybe<Array<Scalars['String']>>;
    incomingAssetAmount_not_in?: Maybe<Array<Scalars['String']>>;
    incomingAssetAmount_contains?: Maybe<Scalars['String']>;
    incomingAssetAmount_not_contains?: Maybe<Scalars['String']>;
    incomingAssetAmount_starts_with?: Maybe<Scalars['String']>;
    incomingAssetAmount_not_starts_with?: Maybe<Scalars['String']>;
    incomingAssetAmount_ends_with?: Maybe<Scalars['String']>;
    incomingAssetAmount_not_ends_with?: Maybe<Scalars['String']>;
    outgoingAssetAmount?: Maybe<Scalars['String']>;
    outgoingAssetAmount_not?: Maybe<Scalars['String']>;
    outgoingAssetAmount_gt?: Maybe<Scalars['String']>;
    outgoingAssetAmount_lt?: Maybe<Scalars['String']>;
    outgoingAssetAmount_gte?: Maybe<Scalars['String']>;
    outgoingAssetAmount_lte?: Maybe<Scalars['String']>;
    outgoingAssetAmount_in?: Maybe<Array<Scalars['String']>>;
    outgoingAssetAmount_not_in?: Maybe<Array<Scalars['String']>>;
    outgoingAssetAmount_contains?: Maybe<Scalars['String']>;
    outgoingAssetAmount_not_contains?: Maybe<Scalars['String']>;
    outgoingAssetAmount_starts_with?: Maybe<Scalars['String']>;
    outgoingAssetAmount_not_starts_with?: Maybe<Scalars['String']>;
    outgoingAssetAmount_ends_with?: Maybe<Scalars['String']>;
    outgoingAssetAmount_not_ends_with?: Maybe<Scalars['String']>;
    price?: Maybe<Scalars['BigDecimal']>;
    price_not?: Maybe<Scalars['BigDecimal']>;
    price_gt?: Maybe<Scalars['BigDecimal']>;
    price_lt?: Maybe<Scalars['BigDecimal']>;
    price_gte?: Maybe<Scalars['BigDecimal']>;
    price_lte?: Maybe<Scalars['BigDecimal']>;
    price_in?: Maybe<Array<Scalars['BigDecimal']>>;
    price_not_in?: Maybe<Array<Scalars['BigDecimal']>>;
    timestamp?: Maybe<Scalars['BigInt']>;
    timestamp_not?: Maybe<Scalars['BigInt']>;
    timestamp_gt?: Maybe<Scalars['BigInt']>;
    timestamp_lt?: Maybe<Scalars['BigInt']>;
    timestamp_gte?: Maybe<Scalars['BigInt']>;
    timestamp_lte?: Maybe<Scalars['BigInt']>;
    timestamp_in?: Maybe<Array<Scalars['BigInt']>>;
    timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;
    fundState?: Maybe<Scalars['String']>;
    fundState_not?: Maybe<Scalars['String']>;
    fundState_gt?: Maybe<Scalars['String']>;
    fundState_lt?: Maybe<Scalars['String']>;
    fundState_gte?: Maybe<Scalars['String']>;
    fundState_lte?: Maybe<Scalars['String']>;
    fundState_in?: Maybe<Array<Scalars['String']>>;
    fundState_not_in?: Maybe<Array<Scalars['String']>>;
    fundState_contains?: Maybe<Scalars['String']>;
    fundState_not_contains?: Maybe<Scalars['String']>;
    fundState_starts_with?: Maybe<Scalars['String']>;
    fundState_not_starts_with?: Maybe<Scalars['String']>;
    fundState_ends_with?: Maybe<Scalars['String']>;
    fundState_not_ends_with?: Maybe<Scalars['String']>;
};
export declare enum TokenSwapTrade_OrderBy {
    Id = "id",
    Fund = "fund",
    Adapter = "adapter",
    Method = "method",
    IncomingAssetAmount = "incomingAssetAmount",
    OutgoingAssetAmount = "outgoingAssetAmount",
    Price = "price",
    Timestamp = "timestamp",
    FundState = "fundState"
}
export declare type TrackedAssetAddedEvent = EventInterface & FundEventInterface & {
    __typename?: 'TrackedAssetAddedEvent';
    id: Scalars['ID'];
    fund: Fund;
    asset: Asset;
    timestamp: Scalars['BigInt'];
    transaction: Transaction;
};
export declare type TrackedAssetAddedEvent_Filter = {
    id?: Maybe<Scalars['ID']>;
    id_not?: Maybe<Scalars['ID']>;
    id_gt?: Maybe<Scalars['ID']>;
    id_lt?: Maybe<Scalars['ID']>;
    id_gte?: Maybe<Scalars['ID']>;
    id_lte?: Maybe<Scalars['ID']>;
    id_in?: Maybe<Array<Scalars['ID']>>;
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    fund?: Maybe<Scalars['String']>;
    fund_not?: Maybe<Scalars['String']>;
    fund_gt?: Maybe<Scalars['String']>;
    fund_lt?: Maybe<Scalars['String']>;
    fund_gte?: Maybe<Scalars['String']>;
    fund_lte?: Maybe<Scalars['String']>;
    fund_in?: Maybe<Array<Scalars['String']>>;
    fund_not_in?: Maybe<Array<Scalars['String']>>;
    fund_contains?: Maybe<Scalars['String']>;
    fund_not_contains?: Maybe<Scalars['String']>;
    fund_starts_with?: Maybe<Scalars['String']>;
    fund_not_starts_with?: Maybe<Scalars['String']>;
    fund_ends_with?: Maybe<Scalars['String']>;
    fund_not_ends_with?: Maybe<Scalars['String']>;
    asset?: Maybe<Scalars['String']>;
    asset_not?: Maybe<Scalars['String']>;
    asset_gt?: Maybe<Scalars['String']>;
    asset_lt?: Maybe<Scalars['String']>;
    asset_gte?: Maybe<Scalars['String']>;
    asset_lte?: Maybe<Scalars['String']>;
    asset_in?: Maybe<Array<Scalars['String']>>;
    asset_not_in?: Maybe<Array<Scalars['String']>>;
    asset_contains?: Maybe<Scalars['String']>;
    asset_not_contains?: Maybe<Scalars['String']>;
    asset_starts_with?: Maybe<Scalars['String']>;
    asset_not_starts_with?: Maybe<Scalars['String']>;
    asset_ends_with?: Maybe<Scalars['String']>;
    asset_not_ends_with?: Maybe<Scalars['String']>;
    timestamp?: Maybe<Scalars['BigInt']>;
    timestamp_not?: Maybe<Scalars['BigInt']>;
    timestamp_gt?: Maybe<Scalars['BigInt']>;
    timestamp_lt?: Maybe<Scalars['BigInt']>;
    timestamp_gte?: Maybe<Scalars['BigInt']>;
    timestamp_lte?: Maybe<Scalars['BigInt']>;
    timestamp_in?: Maybe<Array<Scalars['BigInt']>>;
    timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;
    transaction?: Maybe<Scalars['String']>;
    transaction_not?: Maybe<Scalars['String']>;
    transaction_gt?: Maybe<Scalars['String']>;
    transaction_lt?: Maybe<Scalars['String']>;
    transaction_gte?: Maybe<Scalars['String']>;
    transaction_lte?: Maybe<Scalars['String']>;
    transaction_in?: Maybe<Array<Scalars['String']>>;
    transaction_not_in?: Maybe<Array<Scalars['String']>>;
    transaction_contains?: Maybe<Scalars['String']>;
    transaction_not_contains?: Maybe<Scalars['String']>;
    transaction_starts_with?: Maybe<Scalars['String']>;
    transaction_not_starts_with?: Maybe<Scalars['String']>;
    transaction_ends_with?: Maybe<Scalars['String']>;
    transaction_not_ends_with?: Maybe<Scalars['String']>;
};
export declare enum TrackedAssetAddedEvent_OrderBy {
    Id = "id",
    Fund = "fund",
    Asset = "asset",
    Timestamp = "timestamp",
    Transaction = "transaction"
}
export declare type TrackedAssetRemovedEvent = EventInterface & FundEventInterface & {
    __typename?: 'TrackedAssetRemovedEvent';
    id: Scalars['ID'];
    fund: Fund;
    account: Account;
    asset: Asset;
    timestamp: Scalars['BigInt'];
    transaction: Transaction;
};
export declare type TrackedAssetRemovedEvent_Filter = {
    id?: Maybe<Scalars['ID']>;
    id_not?: Maybe<Scalars['ID']>;
    id_gt?: Maybe<Scalars['ID']>;
    id_lt?: Maybe<Scalars['ID']>;
    id_gte?: Maybe<Scalars['ID']>;
    id_lte?: Maybe<Scalars['ID']>;
    id_in?: Maybe<Array<Scalars['ID']>>;
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    fund?: Maybe<Scalars['String']>;
    fund_not?: Maybe<Scalars['String']>;
    fund_gt?: Maybe<Scalars['String']>;
    fund_lt?: Maybe<Scalars['String']>;
    fund_gte?: Maybe<Scalars['String']>;
    fund_lte?: Maybe<Scalars['String']>;
    fund_in?: Maybe<Array<Scalars['String']>>;
    fund_not_in?: Maybe<Array<Scalars['String']>>;
    fund_contains?: Maybe<Scalars['String']>;
    fund_not_contains?: Maybe<Scalars['String']>;
    fund_starts_with?: Maybe<Scalars['String']>;
    fund_not_starts_with?: Maybe<Scalars['String']>;
    fund_ends_with?: Maybe<Scalars['String']>;
    fund_not_ends_with?: Maybe<Scalars['String']>;
    account?: Maybe<Scalars['String']>;
    account_not?: Maybe<Scalars['String']>;
    account_gt?: Maybe<Scalars['String']>;
    account_lt?: Maybe<Scalars['String']>;
    account_gte?: Maybe<Scalars['String']>;
    account_lte?: Maybe<Scalars['String']>;
    account_in?: Maybe<Array<Scalars['String']>>;
    account_not_in?: Maybe<Array<Scalars['String']>>;
    account_contains?: Maybe<Scalars['String']>;
    account_not_contains?: Maybe<Scalars['String']>;
    account_starts_with?: Maybe<Scalars['String']>;
    account_not_starts_with?: Maybe<Scalars['String']>;
    account_ends_with?: Maybe<Scalars['String']>;
    account_not_ends_with?: Maybe<Scalars['String']>;
    asset?: Maybe<Scalars['String']>;
    asset_not?: Maybe<Scalars['String']>;
    asset_gt?: Maybe<Scalars['String']>;
    asset_lt?: Maybe<Scalars['String']>;
    asset_gte?: Maybe<Scalars['String']>;
    asset_lte?: Maybe<Scalars['String']>;
    asset_in?: Maybe<Array<Scalars['String']>>;
    asset_not_in?: Maybe<Array<Scalars['String']>>;
    asset_contains?: Maybe<Scalars['String']>;
    asset_not_contains?: Maybe<Scalars['String']>;
    asset_starts_with?: Maybe<Scalars['String']>;
    asset_not_starts_with?: Maybe<Scalars['String']>;
    asset_ends_with?: Maybe<Scalars['String']>;
    asset_not_ends_with?: Maybe<Scalars['String']>;
    timestamp?: Maybe<Scalars['BigInt']>;
    timestamp_not?: Maybe<Scalars['BigInt']>;
    timestamp_gt?: Maybe<Scalars['BigInt']>;
    timestamp_lt?: Maybe<Scalars['BigInt']>;
    timestamp_gte?: Maybe<Scalars['BigInt']>;
    timestamp_lte?: Maybe<Scalars['BigInt']>;
    timestamp_in?: Maybe<Array<Scalars['BigInt']>>;
    timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;
    transaction?: Maybe<Scalars['String']>;
    transaction_not?: Maybe<Scalars['String']>;
    transaction_gt?: Maybe<Scalars['String']>;
    transaction_lt?: Maybe<Scalars['String']>;
    transaction_gte?: Maybe<Scalars['String']>;
    transaction_lte?: Maybe<Scalars['String']>;
    transaction_in?: Maybe<Array<Scalars['String']>>;
    transaction_not_in?: Maybe<Array<Scalars['String']>>;
    transaction_contains?: Maybe<Scalars['String']>;
    transaction_not_contains?: Maybe<Scalars['String']>;
    transaction_starts_with?: Maybe<Scalars['String']>;
    transaction_not_starts_with?: Maybe<Scalars['String']>;
    transaction_ends_with?: Maybe<Scalars['String']>;
    transaction_not_ends_with?: Maybe<Scalars['String']>;
};
export declare enum TrackedAssetRemovedEvent_OrderBy {
    Id = "id",
    Fund = "fund",
    Account = "account",
    Asset = "asset",
    Timestamp = "timestamp",
    Transaction = "transaction"
}
export declare type TrackedAssetsLimitSetEvent = EventInterface & NetworkEventInterface & {
    __typename?: 'TrackedAssetsLimitSetEvent';
    id: Scalars['ID'];
    timestamp: Scalars['BigInt'];
    nextTrackedAssetsLimit: Scalars['BigInt'];
    transaction: Transaction;
};
export declare type TrackedAssetsLimitSetEvent_Filter = {
    id?: Maybe<Scalars['ID']>;
    id_not?: Maybe<Scalars['ID']>;
    id_gt?: Maybe<Scalars['ID']>;
    id_lt?: Maybe<Scalars['ID']>;
    id_gte?: Maybe<Scalars['ID']>;
    id_lte?: Maybe<Scalars['ID']>;
    id_in?: Maybe<Array<Scalars['ID']>>;
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    timestamp?: Maybe<Scalars['BigInt']>;
    timestamp_not?: Maybe<Scalars['BigInt']>;
    timestamp_gt?: Maybe<Scalars['BigInt']>;
    timestamp_lt?: Maybe<Scalars['BigInt']>;
    timestamp_gte?: Maybe<Scalars['BigInt']>;
    timestamp_lte?: Maybe<Scalars['BigInt']>;
    timestamp_in?: Maybe<Array<Scalars['BigInt']>>;
    timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;
    nextTrackedAssetsLimit?: Maybe<Scalars['BigInt']>;
    nextTrackedAssetsLimit_not?: Maybe<Scalars['BigInt']>;
    nextTrackedAssetsLimit_gt?: Maybe<Scalars['BigInt']>;
    nextTrackedAssetsLimit_lt?: Maybe<Scalars['BigInt']>;
    nextTrackedAssetsLimit_gte?: Maybe<Scalars['BigInt']>;
    nextTrackedAssetsLimit_lte?: Maybe<Scalars['BigInt']>;
    nextTrackedAssetsLimit_in?: Maybe<Array<Scalars['BigInt']>>;
    nextTrackedAssetsLimit_not_in?: Maybe<Array<Scalars['BigInt']>>;
    transaction?: Maybe<Scalars['String']>;
    transaction_not?: Maybe<Scalars['String']>;
    transaction_gt?: Maybe<Scalars['String']>;
    transaction_lt?: Maybe<Scalars['String']>;
    transaction_gte?: Maybe<Scalars['String']>;
    transaction_lte?: Maybe<Scalars['String']>;
    transaction_in?: Maybe<Array<Scalars['String']>>;
    transaction_not_in?: Maybe<Array<Scalars['String']>>;
    transaction_contains?: Maybe<Scalars['String']>;
    transaction_not_contains?: Maybe<Scalars['String']>;
    transaction_starts_with?: Maybe<Scalars['String']>;
    transaction_not_starts_with?: Maybe<Scalars['String']>;
    transaction_ends_with?: Maybe<Scalars['String']>;
    transaction_not_ends_with?: Maybe<Scalars['String']>;
};
export declare enum TrackedAssetsLimitSetEvent_OrderBy {
    Id = "id",
    Timestamp = "timestamp",
    NextTrackedAssetsLimit = "nextTrackedAssetsLimit",
    Transaction = "transaction"
}
export declare type Trade = {
    id: Scalars['ID'];
    fund: Fund;
    adapter: IntegrationAdapter;
    method: IntegrationMethod;
    timestamp: Scalars['BigInt'];
    fundState: FundState;
};
export declare type Trade_Filter = {
    id?: Maybe<Scalars['ID']>;
    id_not?: Maybe<Scalars['ID']>;
    id_gt?: Maybe<Scalars['ID']>;
    id_lt?: Maybe<Scalars['ID']>;
    id_gte?: Maybe<Scalars['ID']>;
    id_lte?: Maybe<Scalars['ID']>;
    id_in?: Maybe<Array<Scalars['ID']>>;
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    fund?: Maybe<Scalars['String']>;
    fund_not?: Maybe<Scalars['String']>;
    fund_gt?: Maybe<Scalars['String']>;
    fund_lt?: Maybe<Scalars['String']>;
    fund_gte?: Maybe<Scalars['String']>;
    fund_lte?: Maybe<Scalars['String']>;
    fund_in?: Maybe<Array<Scalars['String']>>;
    fund_not_in?: Maybe<Array<Scalars['String']>>;
    fund_contains?: Maybe<Scalars['String']>;
    fund_not_contains?: Maybe<Scalars['String']>;
    fund_starts_with?: Maybe<Scalars['String']>;
    fund_not_starts_with?: Maybe<Scalars['String']>;
    fund_ends_with?: Maybe<Scalars['String']>;
    fund_not_ends_with?: Maybe<Scalars['String']>;
    adapter?: Maybe<Scalars['String']>;
    adapter_not?: Maybe<Scalars['String']>;
    adapter_gt?: Maybe<Scalars['String']>;
    adapter_lt?: Maybe<Scalars['String']>;
    adapter_gte?: Maybe<Scalars['String']>;
    adapter_lte?: Maybe<Scalars['String']>;
    adapter_in?: Maybe<Array<Scalars['String']>>;
    adapter_not_in?: Maybe<Array<Scalars['String']>>;
    adapter_contains?: Maybe<Scalars['String']>;
    adapter_not_contains?: Maybe<Scalars['String']>;
    adapter_starts_with?: Maybe<Scalars['String']>;
    adapter_not_starts_with?: Maybe<Scalars['String']>;
    adapter_ends_with?: Maybe<Scalars['String']>;
    adapter_not_ends_with?: Maybe<Scalars['String']>;
    method?: Maybe<IntegrationMethod>;
    method_not?: Maybe<IntegrationMethod>;
    timestamp?: Maybe<Scalars['BigInt']>;
    timestamp_not?: Maybe<Scalars['BigInt']>;
    timestamp_gt?: Maybe<Scalars['BigInt']>;
    timestamp_lt?: Maybe<Scalars['BigInt']>;
    timestamp_gte?: Maybe<Scalars['BigInt']>;
    timestamp_lte?: Maybe<Scalars['BigInt']>;
    timestamp_in?: Maybe<Array<Scalars['BigInt']>>;
    timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;
    fundState?: Maybe<Scalars['String']>;
    fundState_not?: Maybe<Scalars['String']>;
    fundState_gt?: Maybe<Scalars['String']>;
    fundState_lt?: Maybe<Scalars['String']>;
    fundState_gte?: Maybe<Scalars['String']>;
    fundState_lte?: Maybe<Scalars['String']>;
    fundState_in?: Maybe<Array<Scalars['String']>>;
    fundState_not_in?: Maybe<Array<Scalars['String']>>;
    fundState_contains?: Maybe<Scalars['String']>;
    fundState_not_contains?: Maybe<Scalars['String']>;
    fundState_starts_with?: Maybe<Scalars['String']>;
    fundState_not_starts_with?: Maybe<Scalars['String']>;
    fundState_ends_with?: Maybe<Scalars['String']>;
    fundState_not_ends_with?: Maybe<Scalars['String']>;
};
export declare enum Trade_OrderBy {
    Id = "id",
    Fund = "fund",
    Adapter = "adapter",
    Method = "method",
    Timestamp = "timestamp",
    FundState = "fundState"
}
export declare type Transaction = {
    __typename?: 'Transaction';
    id: Scalars['ID'];
    from: Scalars['String'];
    to?: Maybe<Scalars['String']>;
    value: Scalars['BigDecimal'];
    timestamp: Scalars['BigInt'];
    block: Scalars['BigInt'];
    gasUsed: Scalars['Int'];
    gasPrice: Scalars['BigDecimal'];
    input: Scalars['String'];
    events: Array<EventInterface>;
};
export declare type TransactionEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<EventInterface_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<EventInterface_Filter>;
};
export declare type Transaction_Filter = {
    id?: Maybe<Scalars['ID']>;
    id_not?: Maybe<Scalars['ID']>;
    id_gt?: Maybe<Scalars['ID']>;
    id_lt?: Maybe<Scalars['ID']>;
    id_gte?: Maybe<Scalars['ID']>;
    id_lte?: Maybe<Scalars['ID']>;
    id_in?: Maybe<Array<Scalars['ID']>>;
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    from?: Maybe<Scalars['String']>;
    from_not?: Maybe<Scalars['String']>;
    from_gt?: Maybe<Scalars['String']>;
    from_lt?: Maybe<Scalars['String']>;
    from_gte?: Maybe<Scalars['String']>;
    from_lte?: Maybe<Scalars['String']>;
    from_in?: Maybe<Array<Scalars['String']>>;
    from_not_in?: Maybe<Array<Scalars['String']>>;
    from_contains?: Maybe<Scalars['String']>;
    from_not_contains?: Maybe<Scalars['String']>;
    from_starts_with?: Maybe<Scalars['String']>;
    from_not_starts_with?: Maybe<Scalars['String']>;
    from_ends_with?: Maybe<Scalars['String']>;
    from_not_ends_with?: Maybe<Scalars['String']>;
    to?: Maybe<Scalars['String']>;
    to_not?: Maybe<Scalars['String']>;
    to_gt?: Maybe<Scalars['String']>;
    to_lt?: Maybe<Scalars['String']>;
    to_gte?: Maybe<Scalars['String']>;
    to_lte?: Maybe<Scalars['String']>;
    to_in?: Maybe<Array<Scalars['String']>>;
    to_not_in?: Maybe<Array<Scalars['String']>>;
    to_contains?: Maybe<Scalars['String']>;
    to_not_contains?: Maybe<Scalars['String']>;
    to_starts_with?: Maybe<Scalars['String']>;
    to_not_starts_with?: Maybe<Scalars['String']>;
    to_ends_with?: Maybe<Scalars['String']>;
    to_not_ends_with?: Maybe<Scalars['String']>;
    value?: Maybe<Scalars['BigDecimal']>;
    value_not?: Maybe<Scalars['BigDecimal']>;
    value_gt?: Maybe<Scalars['BigDecimal']>;
    value_lt?: Maybe<Scalars['BigDecimal']>;
    value_gte?: Maybe<Scalars['BigDecimal']>;
    value_lte?: Maybe<Scalars['BigDecimal']>;
    value_in?: Maybe<Array<Scalars['BigDecimal']>>;
    value_not_in?: Maybe<Array<Scalars['BigDecimal']>>;
    timestamp?: Maybe<Scalars['BigInt']>;
    timestamp_not?: Maybe<Scalars['BigInt']>;
    timestamp_gt?: Maybe<Scalars['BigInt']>;
    timestamp_lt?: Maybe<Scalars['BigInt']>;
    timestamp_gte?: Maybe<Scalars['BigInt']>;
    timestamp_lte?: Maybe<Scalars['BigInt']>;
    timestamp_in?: Maybe<Array<Scalars['BigInt']>>;
    timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;
    block?: Maybe<Scalars['BigInt']>;
    block_not?: Maybe<Scalars['BigInt']>;
    block_gt?: Maybe<Scalars['BigInt']>;
    block_lt?: Maybe<Scalars['BigInt']>;
    block_gte?: Maybe<Scalars['BigInt']>;
    block_lte?: Maybe<Scalars['BigInt']>;
    block_in?: Maybe<Array<Scalars['BigInt']>>;
    block_not_in?: Maybe<Array<Scalars['BigInt']>>;
    gasUsed?: Maybe<Scalars['Int']>;
    gasUsed_not?: Maybe<Scalars['Int']>;
    gasUsed_gt?: Maybe<Scalars['Int']>;
    gasUsed_lt?: Maybe<Scalars['Int']>;
    gasUsed_gte?: Maybe<Scalars['Int']>;
    gasUsed_lte?: Maybe<Scalars['Int']>;
    gasUsed_in?: Maybe<Array<Scalars['Int']>>;
    gasUsed_not_in?: Maybe<Array<Scalars['Int']>>;
    gasPrice?: Maybe<Scalars['BigDecimal']>;
    gasPrice_not?: Maybe<Scalars['BigDecimal']>;
    gasPrice_gt?: Maybe<Scalars['BigDecimal']>;
    gasPrice_lt?: Maybe<Scalars['BigDecimal']>;
    gasPrice_gte?: Maybe<Scalars['BigDecimal']>;
    gasPrice_lte?: Maybe<Scalars['BigDecimal']>;
    gasPrice_in?: Maybe<Array<Scalars['BigDecimal']>>;
    gasPrice_not_in?: Maybe<Array<Scalars['BigDecimal']>>;
    input?: Maybe<Scalars['String']>;
    input_not?: Maybe<Scalars['String']>;
    input_gt?: Maybe<Scalars['String']>;
    input_lt?: Maybe<Scalars['String']>;
    input_gte?: Maybe<Scalars['String']>;
    input_lte?: Maybe<Scalars['String']>;
    input_in?: Maybe<Array<Scalars['String']>>;
    input_not_in?: Maybe<Array<Scalars['String']>>;
    input_contains?: Maybe<Scalars['String']>;
    input_not_contains?: Maybe<Scalars['String']>;
    input_starts_with?: Maybe<Scalars['String']>;
    input_not_starts_with?: Maybe<Scalars['String']>;
    input_ends_with?: Maybe<Scalars['String']>;
    input_not_ends_with?: Maybe<Scalars['String']>;
};
export declare enum Transaction_OrderBy {
    Id = "id",
    From = "from",
    To = "to",
    Value = "value",
    Timestamp = "timestamp",
    Block = "block",
    GasUsed = "gasUsed",
    GasPrice = "gasPrice",
    Input = "input",
    Events = "events"
}
export declare type TransferEvent = EventInterface & FundEventInterface & {
    __typename?: 'TransferEvent';
    id: Scalars['ID'];
    fund: Fund;
    timestamp: Scalars['BigInt'];
    transaction: Transaction;
    from: Scalars['String'];
    to: Scalars['String'];
    amount: Scalars['BigDecimal'];
};
export declare type TransferEvent_Filter = {
    id?: Maybe<Scalars['ID']>;
    id_not?: Maybe<Scalars['ID']>;
    id_gt?: Maybe<Scalars['ID']>;
    id_lt?: Maybe<Scalars['ID']>;
    id_gte?: Maybe<Scalars['ID']>;
    id_lte?: Maybe<Scalars['ID']>;
    id_in?: Maybe<Array<Scalars['ID']>>;
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    fund?: Maybe<Scalars['String']>;
    fund_not?: Maybe<Scalars['String']>;
    fund_gt?: Maybe<Scalars['String']>;
    fund_lt?: Maybe<Scalars['String']>;
    fund_gte?: Maybe<Scalars['String']>;
    fund_lte?: Maybe<Scalars['String']>;
    fund_in?: Maybe<Array<Scalars['String']>>;
    fund_not_in?: Maybe<Array<Scalars['String']>>;
    fund_contains?: Maybe<Scalars['String']>;
    fund_not_contains?: Maybe<Scalars['String']>;
    fund_starts_with?: Maybe<Scalars['String']>;
    fund_not_starts_with?: Maybe<Scalars['String']>;
    fund_ends_with?: Maybe<Scalars['String']>;
    fund_not_ends_with?: Maybe<Scalars['String']>;
    timestamp?: Maybe<Scalars['BigInt']>;
    timestamp_not?: Maybe<Scalars['BigInt']>;
    timestamp_gt?: Maybe<Scalars['BigInt']>;
    timestamp_lt?: Maybe<Scalars['BigInt']>;
    timestamp_gte?: Maybe<Scalars['BigInt']>;
    timestamp_lte?: Maybe<Scalars['BigInt']>;
    timestamp_in?: Maybe<Array<Scalars['BigInt']>>;
    timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;
    transaction?: Maybe<Scalars['String']>;
    transaction_not?: Maybe<Scalars['String']>;
    transaction_gt?: Maybe<Scalars['String']>;
    transaction_lt?: Maybe<Scalars['String']>;
    transaction_gte?: Maybe<Scalars['String']>;
    transaction_lte?: Maybe<Scalars['String']>;
    transaction_in?: Maybe<Array<Scalars['String']>>;
    transaction_not_in?: Maybe<Array<Scalars['String']>>;
    transaction_contains?: Maybe<Scalars['String']>;
    transaction_not_contains?: Maybe<Scalars['String']>;
    transaction_starts_with?: Maybe<Scalars['String']>;
    transaction_not_starts_with?: Maybe<Scalars['String']>;
    transaction_ends_with?: Maybe<Scalars['String']>;
    transaction_not_ends_with?: Maybe<Scalars['String']>;
    from?: Maybe<Scalars['String']>;
    from_not?: Maybe<Scalars['String']>;
    from_gt?: Maybe<Scalars['String']>;
    from_lt?: Maybe<Scalars['String']>;
    from_gte?: Maybe<Scalars['String']>;
    from_lte?: Maybe<Scalars['String']>;
    from_in?: Maybe<Array<Scalars['String']>>;
    from_not_in?: Maybe<Array<Scalars['String']>>;
    from_contains?: Maybe<Scalars['String']>;
    from_not_contains?: Maybe<Scalars['String']>;
    from_starts_with?: Maybe<Scalars['String']>;
    from_not_starts_with?: Maybe<Scalars['String']>;
    from_ends_with?: Maybe<Scalars['String']>;
    from_not_ends_with?: Maybe<Scalars['String']>;
    to?: Maybe<Scalars['String']>;
    to_not?: Maybe<Scalars['String']>;
    to_gt?: Maybe<Scalars['String']>;
    to_lt?: Maybe<Scalars['String']>;
    to_gte?: Maybe<Scalars['String']>;
    to_lte?: Maybe<Scalars['String']>;
    to_in?: Maybe<Array<Scalars['String']>>;
    to_not_in?: Maybe<Array<Scalars['String']>>;
    to_contains?: Maybe<Scalars['String']>;
    to_not_contains?: Maybe<Scalars['String']>;
    to_starts_with?: Maybe<Scalars['String']>;
    to_not_starts_with?: Maybe<Scalars['String']>;
    to_ends_with?: Maybe<Scalars['String']>;
    to_not_ends_with?: Maybe<Scalars['String']>;
    amount?: Maybe<Scalars['BigDecimal']>;
    amount_not?: Maybe<Scalars['BigDecimal']>;
    amount_gt?: Maybe<Scalars['BigDecimal']>;
    amount_lt?: Maybe<Scalars['BigDecimal']>;
    amount_gte?: Maybe<Scalars['BigDecimal']>;
    amount_lte?: Maybe<Scalars['BigDecimal']>;
    amount_in?: Maybe<Array<Scalars['BigDecimal']>>;
    amount_not_in?: Maybe<Array<Scalars['BigDecimal']>>;
};
export declare enum TransferEvent_OrderBy {
    Id = "id",
    Fund = "fund",
    Timestamp = "timestamp",
    Transaction = "transaction",
    From = "from",
    To = "to",
    Amount = "amount"
}
export declare type UniswapV2PoolAssetDetail = {
    __typename?: 'UniswapV2PoolAssetDetail';
    id: Scalars['ID'];
    token0: Asset;
    token1: Asset;
};
export declare type UniswapV2PoolAssetDetail_Filter = {
    id?: Maybe<Scalars['ID']>;
    id_not?: Maybe<Scalars['ID']>;
    id_gt?: Maybe<Scalars['ID']>;
    id_lt?: Maybe<Scalars['ID']>;
    id_gte?: Maybe<Scalars['ID']>;
    id_lte?: Maybe<Scalars['ID']>;
    id_in?: Maybe<Array<Scalars['ID']>>;
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    token0?: Maybe<Scalars['String']>;
    token0_not?: Maybe<Scalars['String']>;
    token0_gt?: Maybe<Scalars['String']>;
    token0_lt?: Maybe<Scalars['String']>;
    token0_gte?: Maybe<Scalars['String']>;
    token0_lte?: Maybe<Scalars['String']>;
    token0_in?: Maybe<Array<Scalars['String']>>;
    token0_not_in?: Maybe<Array<Scalars['String']>>;
    token0_contains?: Maybe<Scalars['String']>;
    token0_not_contains?: Maybe<Scalars['String']>;
    token0_starts_with?: Maybe<Scalars['String']>;
    token0_not_starts_with?: Maybe<Scalars['String']>;
    token0_ends_with?: Maybe<Scalars['String']>;
    token0_not_ends_with?: Maybe<Scalars['String']>;
    token1?: Maybe<Scalars['String']>;
    token1_not?: Maybe<Scalars['String']>;
    token1_gt?: Maybe<Scalars['String']>;
    token1_lt?: Maybe<Scalars['String']>;
    token1_gte?: Maybe<Scalars['String']>;
    token1_lte?: Maybe<Scalars['String']>;
    token1_in?: Maybe<Array<Scalars['String']>>;
    token1_not_in?: Maybe<Array<Scalars['String']>>;
    token1_contains?: Maybe<Scalars['String']>;
    token1_not_contains?: Maybe<Scalars['String']>;
    token1_starts_with?: Maybe<Scalars['String']>;
    token1_not_starts_with?: Maybe<Scalars['String']>;
    token1_ends_with?: Maybe<Scalars['String']>;
    token1_not_ends_with?: Maybe<Scalars['String']>;
};
export declare enum UniswapV2PoolAssetDetail_OrderBy {
    Id = "id",
    Token0 = "token0",
    Token1 = "token1"
}
export declare type UnknownPolicySetting = PolicySettingInterface & {
    __typename?: 'UnknownPolicySetting';
    id: Scalars['ID'];
    policy: Policy;
    comptroller: ComptrollerProxy;
    timestamp: Scalars['BigInt'];
    enabled: Scalars['Boolean'];
    events: Array<FundEventInterface>;
};
export declare type UnknownPolicySettingEventsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<FundEventInterface_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<FundEventInterface_Filter>;
};
export declare type UnknownPolicySetting_Filter = {
    id?: Maybe<Scalars['ID']>;
    id_not?: Maybe<Scalars['ID']>;
    id_gt?: Maybe<Scalars['ID']>;
    id_lt?: Maybe<Scalars['ID']>;
    id_gte?: Maybe<Scalars['ID']>;
    id_lte?: Maybe<Scalars['ID']>;
    id_in?: Maybe<Array<Scalars['ID']>>;
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    policy?: Maybe<Scalars['String']>;
    policy_not?: Maybe<Scalars['String']>;
    policy_gt?: Maybe<Scalars['String']>;
    policy_lt?: Maybe<Scalars['String']>;
    policy_gte?: Maybe<Scalars['String']>;
    policy_lte?: Maybe<Scalars['String']>;
    policy_in?: Maybe<Array<Scalars['String']>>;
    policy_not_in?: Maybe<Array<Scalars['String']>>;
    policy_contains?: Maybe<Scalars['String']>;
    policy_not_contains?: Maybe<Scalars['String']>;
    policy_starts_with?: Maybe<Scalars['String']>;
    policy_not_starts_with?: Maybe<Scalars['String']>;
    policy_ends_with?: Maybe<Scalars['String']>;
    policy_not_ends_with?: Maybe<Scalars['String']>;
    comptroller?: Maybe<Scalars['String']>;
    comptroller_not?: Maybe<Scalars['String']>;
    comptroller_gt?: Maybe<Scalars['String']>;
    comptroller_lt?: Maybe<Scalars['String']>;
    comptroller_gte?: Maybe<Scalars['String']>;
    comptroller_lte?: Maybe<Scalars['String']>;
    comptroller_in?: Maybe<Array<Scalars['String']>>;
    comptroller_not_in?: Maybe<Array<Scalars['String']>>;
    comptroller_contains?: Maybe<Scalars['String']>;
    comptroller_not_contains?: Maybe<Scalars['String']>;
    comptroller_starts_with?: Maybe<Scalars['String']>;
    comptroller_not_starts_with?: Maybe<Scalars['String']>;
    comptroller_ends_with?: Maybe<Scalars['String']>;
    comptroller_not_ends_with?: Maybe<Scalars['String']>;
    timestamp?: Maybe<Scalars['BigInt']>;
    timestamp_not?: Maybe<Scalars['BigInt']>;
    timestamp_gt?: Maybe<Scalars['BigInt']>;
    timestamp_lt?: Maybe<Scalars['BigInt']>;
    timestamp_gte?: Maybe<Scalars['BigInt']>;
    timestamp_lte?: Maybe<Scalars['BigInt']>;
    timestamp_in?: Maybe<Array<Scalars['BigInt']>>;
    timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;
    enabled?: Maybe<Scalars['Boolean']>;
    enabled_not?: Maybe<Scalars['Boolean']>;
    enabled_in?: Maybe<Array<Scalars['Boolean']>>;
    enabled_not_in?: Maybe<Array<Scalars['Boolean']>>;
    events?: Maybe<Array<Scalars['String']>>;
    events_not?: Maybe<Array<Scalars['String']>>;
    events_contains?: Maybe<Array<Scalars['String']>>;
    events_not_contains?: Maybe<Array<Scalars['String']>>;
};
export declare enum UnknownPolicySetting_OrderBy {
    Id = "id",
    Policy = "policy",
    Comptroller = "comptroller",
    Timestamp = "timestamp",
    Enabled = "enabled",
    Events = "events"
}
export declare type UnstakeAndRedeemTrade = Trade & {
    __typename?: 'UnstakeAndRedeemTrade';
    id: Scalars['ID'];
    fund: Fund;
    adapter: IntegrationAdapter;
    method: IntegrationMethod;
    incomingAssetAmounts: Array<AssetAmount>;
    outgoingAssetAmount: AssetAmount;
    timestamp: Scalars['BigInt'];
    fundState: FundState;
};
export declare type UnstakeAndRedeemTradeIncomingAssetAmountsArgs = {
    skip?: Maybe<Scalars['Int']>;
    first?: Maybe<Scalars['Int']>;
    orderBy?: Maybe<AssetAmount_OrderBy>;
    orderDirection?: Maybe<OrderDirection>;
    where?: Maybe<AssetAmount_Filter>;
};
export declare type UnstakeAndRedeemTrade_Filter = {
    id?: Maybe<Scalars['ID']>;
    id_not?: Maybe<Scalars['ID']>;
    id_gt?: Maybe<Scalars['ID']>;
    id_lt?: Maybe<Scalars['ID']>;
    id_gte?: Maybe<Scalars['ID']>;
    id_lte?: Maybe<Scalars['ID']>;
    id_in?: Maybe<Array<Scalars['ID']>>;
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    fund?: Maybe<Scalars['String']>;
    fund_not?: Maybe<Scalars['String']>;
    fund_gt?: Maybe<Scalars['String']>;
    fund_lt?: Maybe<Scalars['String']>;
    fund_gte?: Maybe<Scalars['String']>;
    fund_lte?: Maybe<Scalars['String']>;
    fund_in?: Maybe<Array<Scalars['String']>>;
    fund_not_in?: Maybe<Array<Scalars['String']>>;
    fund_contains?: Maybe<Scalars['String']>;
    fund_not_contains?: Maybe<Scalars['String']>;
    fund_starts_with?: Maybe<Scalars['String']>;
    fund_not_starts_with?: Maybe<Scalars['String']>;
    fund_ends_with?: Maybe<Scalars['String']>;
    fund_not_ends_with?: Maybe<Scalars['String']>;
    adapter?: Maybe<Scalars['String']>;
    adapter_not?: Maybe<Scalars['String']>;
    adapter_gt?: Maybe<Scalars['String']>;
    adapter_lt?: Maybe<Scalars['String']>;
    adapter_gte?: Maybe<Scalars['String']>;
    adapter_lte?: Maybe<Scalars['String']>;
    adapter_in?: Maybe<Array<Scalars['String']>>;
    adapter_not_in?: Maybe<Array<Scalars['String']>>;
    adapter_contains?: Maybe<Scalars['String']>;
    adapter_not_contains?: Maybe<Scalars['String']>;
    adapter_starts_with?: Maybe<Scalars['String']>;
    adapter_not_starts_with?: Maybe<Scalars['String']>;
    adapter_ends_with?: Maybe<Scalars['String']>;
    adapter_not_ends_with?: Maybe<Scalars['String']>;
    method?: Maybe<IntegrationMethod>;
    method_not?: Maybe<IntegrationMethod>;
    incomingAssetAmounts?: Maybe<Array<Scalars['String']>>;
    incomingAssetAmounts_not?: Maybe<Array<Scalars['String']>>;
    incomingAssetAmounts_contains?: Maybe<Array<Scalars['String']>>;
    incomingAssetAmounts_not_contains?: Maybe<Array<Scalars['String']>>;
    outgoingAssetAmount?: Maybe<Scalars['String']>;
    outgoingAssetAmount_not?: Maybe<Scalars['String']>;
    outgoingAssetAmount_gt?: Maybe<Scalars['String']>;
    outgoingAssetAmount_lt?: Maybe<Scalars['String']>;
    outgoingAssetAmount_gte?: Maybe<Scalars['String']>;
    outgoingAssetAmount_lte?: Maybe<Scalars['String']>;
    outgoingAssetAmount_in?: Maybe<Array<Scalars['String']>>;
    outgoingAssetAmount_not_in?: Maybe<Array<Scalars['String']>>;
    outgoingAssetAmount_contains?: Maybe<Scalars['String']>;
    outgoingAssetAmount_not_contains?: Maybe<Scalars['String']>;
    outgoingAssetAmount_starts_with?: Maybe<Scalars['String']>;
    outgoingAssetAmount_not_starts_with?: Maybe<Scalars['String']>;
    outgoingAssetAmount_ends_with?: Maybe<Scalars['String']>;
    outgoingAssetAmount_not_ends_with?: Maybe<Scalars['String']>;
    timestamp?: Maybe<Scalars['BigInt']>;
    timestamp_not?: Maybe<Scalars['BigInt']>;
    timestamp_gt?: Maybe<Scalars['BigInt']>;
    timestamp_lt?: Maybe<Scalars['BigInt']>;
    timestamp_gte?: Maybe<Scalars['BigInt']>;
    timestamp_lte?: Maybe<Scalars['BigInt']>;
    timestamp_in?: Maybe<Array<Scalars['BigInt']>>;
    timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;
    fundState?: Maybe<Scalars['String']>;
    fundState_not?: Maybe<Scalars['String']>;
    fundState_gt?: Maybe<Scalars['String']>;
    fundState_lt?: Maybe<Scalars['String']>;
    fundState_gte?: Maybe<Scalars['String']>;
    fundState_lte?: Maybe<Scalars['String']>;
    fundState_in?: Maybe<Array<Scalars['String']>>;
    fundState_not_in?: Maybe<Array<Scalars['String']>>;
    fundState_contains?: Maybe<Scalars['String']>;
    fundState_not_contains?: Maybe<Scalars['String']>;
    fundState_starts_with?: Maybe<Scalars['String']>;
    fundState_not_starts_with?: Maybe<Scalars['String']>;
    fundState_ends_with?: Maybe<Scalars['String']>;
    fundState_not_ends_with?: Maybe<Scalars['String']>;
};
export declare enum UnstakeAndRedeemTrade_OrderBy {
    Id = "id",
    Fund = "fund",
    Adapter = "adapter",
    Method = "method",
    IncomingAssetAmounts = "incomingAssetAmounts",
    OutgoingAssetAmount = "outgoingAssetAmount",
    Timestamp = "timestamp",
    FundState = "fundState"
}
export declare type UnstakeTrade = Trade & {
    __typename?: 'UnstakeTrade';
    id: Scalars['ID'];
    fund: Fund;
    adapter: IntegrationAdapter;
    method: IntegrationMethod;
    incomingAssetAmount: AssetAmount;
    outgoingAssetAmount: AssetAmount;
    timestamp: Scalars['BigInt'];
    fundState: FundState;
};
export declare type UnstakeTrade_Filter = {
    id?: Maybe<Scalars['ID']>;
    id_not?: Maybe<Scalars['ID']>;
    id_gt?: Maybe<Scalars['ID']>;
    id_lt?: Maybe<Scalars['ID']>;
    id_gte?: Maybe<Scalars['ID']>;
    id_lte?: Maybe<Scalars['ID']>;
    id_in?: Maybe<Array<Scalars['ID']>>;
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    fund?: Maybe<Scalars['String']>;
    fund_not?: Maybe<Scalars['String']>;
    fund_gt?: Maybe<Scalars['String']>;
    fund_lt?: Maybe<Scalars['String']>;
    fund_gte?: Maybe<Scalars['String']>;
    fund_lte?: Maybe<Scalars['String']>;
    fund_in?: Maybe<Array<Scalars['String']>>;
    fund_not_in?: Maybe<Array<Scalars['String']>>;
    fund_contains?: Maybe<Scalars['String']>;
    fund_not_contains?: Maybe<Scalars['String']>;
    fund_starts_with?: Maybe<Scalars['String']>;
    fund_not_starts_with?: Maybe<Scalars['String']>;
    fund_ends_with?: Maybe<Scalars['String']>;
    fund_not_ends_with?: Maybe<Scalars['String']>;
    adapter?: Maybe<Scalars['String']>;
    adapter_not?: Maybe<Scalars['String']>;
    adapter_gt?: Maybe<Scalars['String']>;
    adapter_lt?: Maybe<Scalars['String']>;
    adapter_gte?: Maybe<Scalars['String']>;
    adapter_lte?: Maybe<Scalars['String']>;
    adapter_in?: Maybe<Array<Scalars['String']>>;
    adapter_not_in?: Maybe<Array<Scalars['String']>>;
    adapter_contains?: Maybe<Scalars['String']>;
    adapter_not_contains?: Maybe<Scalars['String']>;
    adapter_starts_with?: Maybe<Scalars['String']>;
    adapter_not_starts_with?: Maybe<Scalars['String']>;
    adapter_ends_with?: Maybe<Scalars['String']>;
    adapter_not_ends_with?: Maybe<Scalars['String']>;
    method?: Maybe<IntegrationMethod>;
    method_not?: Maybe<IntegrationMethod>;
    incomingAssetAmount?: Maybe<Scalars['String']>;
    incomingAssetAmount_not?: Maybe<Scalars['String']>;
    incomingAssetAmount_gt?: Maybe<Scalars['String']>;
    incomingAssetAmount_lt?: Maybe<Scalars['String']>;
    incomingAssetAmount_gte?: Maybe<Scalars['String']>;
    incomingAssetAmount_lte?: Maybe<Scalars['String']>;
    incomingAssetAmount_in?: Maybe<Array<Scalars['String']>>;
    incomingAssetAmount_not_in?: Maybe<Array<Scalars['String']>>;
    incomingAssetAmount_contains?: Maybe<Scalars['String']>;
    incomingAssetAmount_not_contains?: Maybe<Scalars['String']>;
    incomingAssetAmount_starts_with?: Maybe<Scalars['String']>;
    incomingAssetAmount_not_starts_with?: Maybe<Scalars['String']>;
    incomingAssetAmount_ends_with?: Maybe<Scalars['String']>;
    incomingAssetAmount_not_ends_with?: Maybe<Scalars['String']>;
    outgoingAssetAmount?: Maybe<Scalars['String']>;
    outgoingAssetAmount_not?: Maybe<Scalars['String']>;
    outgoingAssetAmount_gt?: Maybe<Scalars['String']>;
    outgoingAssetAmount_lt?: Maybe<Scalars['String']>;
    outgoingAssetAmount_gte?: Maybe<Scalars['String']>;
    outgoingAssetAmount_lte?: Maybe<Scalars['String']>;
    outgoingAssetAmount_in?: Maybe<Array<Scalars['String']>>;
    outgoingAssetAmount_not_in?: Maybe<Array<Scalars['String']>>;
    outgoingAssetAmount_contains?: Maybe<Scalars['String']>;
    outgoingAssetAmount_not_contains?: Maybe<Scalars['String']>;
    outgoingAssetAmount_starts_with?: Maybe<Scalars['String']>;
    outgoingAssetAmount_not_starts_with?: Maybe<Scalars['String']>;
    outgoingAssetAmount_ends_with?: Maybe<Scalars['String']>;
    outgoingAssetAmount_not_ends_with?: Maybe<Scalars['String']>;
    timestamp?: Maybe<Scalars['BigInt']>;
    timestamp_not?: Maybe<Scalars['BigInt']>;
    timestamp_gt?: Maybe<Scalars['BigInt']>;
    timestamp_lt?: Maybe<Scalars['BigInt']>;
    timestamp_gte?: Maybe<Scalars['BigInt']>;
    timestamp_lte?: Maybe<Scalars['BigInt']>;
    timestamp_in?: Maybe<Array<Scalars['BigInt']>>;
    timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;
    fundState?: Maybe<Scalars['String']>;
    fundState_not?: Maybe<Scalars['String']>;
    fundState_gt?: Maybe<Scalars['String']>;
    fundState_lt?: Maybe<Scalars['String']>;
    fundState_gte?: Maybe<Scalars['String']>;
    fundState_lte?: Maybe<Scalars['String']>;
    fundState_in?: Maybe<Array<Scalars['String']>>;
    fundState_not_in?: Maybe<Array<Scalars['String']>>;
    fundState_contains?: Maybe<Scalars['String']>;
    fundState_not_contains?: Maybe<Scalars['String']>;
    fundState_starts_with?: Maybe<Scalars['String']>;
    fundState_not_starts_with?: Maybe<Scalars['String']>;
    fundState_ends_with?: Maybe<Scalars['String']>;
    fundState_not_ends_with?: Maybe<Scalars['String']>;
};
export declare enum UnstakeTrade_OrderBy {
    Id = "id",
    Fund = "fund",
    Adapter = "adapter",
    Method = "method",
    IncomingAssetAmount = "incomingAssetAmount",
    OutgoingAssetAmount = "outgoingAssetAmount",
    Timestamp = "timestamp",
    FundState = "fundState"
}
export declare type ValueInterpreterSetEvent = EventInterface & NetworkEventInterface & {
    __typename?: 'ValueInterpreterSetEvent';
    id: Scalars['ID'];
    timestamp: Scalars['BigInt'];
    transaction: Transaction;
    prevValueInterpreter?: Maybe<Scalars['String']>;
    nextValueInterpreter: Scalars['String'];
};
export declare type ValueInterpreterSetEvent_Filter = {
    id?: Maybe<Scalars['ID']>;
    id_not?: Maybe<Scalars['ID']>;
    id_gt?: Maybe<Scalars['ID']>;
    id_lt?: Maybe<Scalars['ID']>;
    id_gte?: Maybe<Scalars['ID']>;
    id_lte?: Maybe<Scalars['ID']>;
    id_in?: Maybe<Array<Scalars['ID']>>;
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    timestamp?: Maybe<Scalars['BigInt']>;
    timestamp_not?: Maybe<Scalars['BigInt']>;
    timestamp_gt?: Maybe<Scalars['BigInt']>;
    timestamp_lt?: Maybe<Scalars['BigInt']>;
    timestamp_gte?: Maybe<Scalars['BigInt']>;
    timestamp_lte?: Maybe<Scalars['BigInt']>;
    timestamp_in?: Maybe<Array<Scalars['BigInt']>>;
    timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;
    transaction?: Maybe<Scalars['String']>;
    transaction_not?: Maybe<Scalars['String']>;
    transaction_gt?: Maybe<Scalars['String']>;
    transaction_lt?: Maybe<Scalars['String']>;
    transaction_gte?: Maybe<Scalars['String']>;
    transaction_lte?: Maybe<Scalars['String']>;
    transaction_in?: Maybe<Array<Scalars['String']>>;
    transaction_not_in?: Maybe<Array<Scalars['String']>>;
    transaction_contains?: Maybe<Scalars['String']>;
    transaction_not_contains?: Maybe<Scalars['String']>;
    transaction_starts_with?: Maybe<Scalars['String']>;
    transaction_not_starts_with?: Maybe<Scalars['String']>;
    transaction_ends_with?: Maybe<Scalars['String']>;
    transaction_not_ends_with?: Maybe<Scalars['String']>;
    prevValueInterpreter?: Maybe<Scalars['String']>;
    prevValueInterpreter_not?: Maybe<Scalars['String']>;
    prevValueInterpreter_gt?: Maybe<Scalars['String']>;
    prevValueInterpreter_lt?: Maybe<Scalars['String']>;
    prevValueInterpreter_gte?: Maybe<Scalars['String']>;
    prevValueInterpreter_lte?: Maybe<Scalars['String']>;
    prevValueInterpreter_in?: Maybe<Array<Scalars['String']>>;
    prevValueInterpreter_not_in?: Maybe<Array<Scalars['String']>>;
    prevValueInterpreter_contains?: Maybe<Scalars['String']>;
    prevValueInterpreter_not_contains?: Maybe<Scalars['String']>;
    prevValueInterpreter_starts_with?: Maybe<Scalars['String']>;
    prevValueInterpreter_not_starts_with?: Maybe<Scalars['String']>;
    prevValueInterpreter_ends_with?: Maybe<Scalars['String']>;
    prevValueInterpreter_not_ends_with?: Maybe<Scalars['String']>;
    nextValueInterpreter?: Maybe<Scalars['String']>;
    nextValueInterpreter_not?: Maybe<Scalars['String']>;
    nextValueInterpreter_gt?: Maybe<Scalars['String']>;
    nextValueInterpreter_lt?: Maybe<Scalars['String']>;
    nextValueInterpreter_gte?: Maybe<Scalars['String']>;
    nextValueInterpreter_lte?: Maybe<Scalars['String']>;
    nextValueInterpreter_in?: Maybe<Array<Scalars['String']>>;
    nextValueInterpreter_not_in?: Maybe<Array<Scalars['String']>>;
    nextValueInterpreter_contains?: Maybe<Scalars['String']>;
    nextValueInterpreter_not_contains?: Maybe<Scalars['String']>;
    nextValueInterpreter_starts_with?: Maybe<Scalars['String']>;
    nextValueInterpreter_not_starts_with?: Maybe<Scalars['String']>;
    nextValueInterpreter_ends_with?: Maybe<Scalars['String']>;
    nextValueInterpreter_not_ends_with?: Maybe<Scalars['String']>;
};
export declare enum ValueInterpreterSetEvent_OrderBy {
    Id = "id",
    Timestamp = "timestamp",
    Transaction = "transaction",
    PrevValueInterpreter = "prevValueInterpreter",
    NextValueInterpreter = "nextValueInterpreter"
}
export declare type VaultCallDeregisteredEvent = EventInterface & NetworkEventInterface & {
    __typename?: 'VaultCallDeregisteredEvent';
    id: Scalars['ID'];
    timestamp: Scalars['BigInt'];
    transaction: Transaction;
    contractAddress: Scalars['String'];
    selector: Scalars['String'];
};
export declare type VaultCallDeregisteredEvent_Filter = {
    id?: Maybe<Scalars['ID']>;
    id_not?: Maybe<Scalars['ID']>;
    id_gt?: Maybe<Scalars['ID']>;
    id_lt?: Maybe<Scalars['ID']>;
    id_gte?: Maybe<Scalars['ID']>;
    id_lte?: Maybe<Scalars['ID']>;
    id_in?: Maybe<Array<Scalars['ID']>>;
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    timestamp?: Maybe<Scalars['BigInt']>;
    timestamp_not?: Maybe<Scalars['BigInt']>;
    timestamp_gt?: Maybe<Scalars['BigInt']>;
    timestamp_lt?: Maybe<Scalars['BigInt']>;
    timestamp_gte?: Maybe<Scalars['BigInt']>;
    timestamp_lte?: Maybe<Scalars['BigInt']>;
    timestamp_in?: Maybe<Array<Scalars['BigInt']>>;
    timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;
    transaction?: Maybe<Scalars['String']>;
    transaction_not?: Maybe<Scalars['String']>;
    transaction_gt?: Maybe<Scalars['String']>;
    transaction_lt?: Maybe<Scalars['String']>;
    transaction_gte?: Maybe<Scalars['String']>;
    transaction_lte?: Maybe<Scalars['String']>;
    transaction_in?: Maybe<Array<Scalars['String']>>;
    transaction_not_in?: Maybe<Array<Scalars['String']>>;
    transaction_contains?: Maybe<Scalars['String']>;
    transaction_not_contains?: Maybe<Scalars['String']>;
    transaction_starts_with?: Maybe<Scalars['String']>;
    transaction_not_starts_with?: Maybe<Scalars['String']>;
    transaction_ends_with?: Maybe<Scalars['String']>;
    transaction_not_ends_with?: Maybe<Scalars['String']>;
    contractAddress?: Maybe<Scalars['String']>;
    contractAddress_not?: Maybe<Scalars['String']>;
    contractAddress_gt?: Maybe<Scalars['String']>;
    contractAddress_lt?: Maybe<Scalars['String']>;
    contractAddress_gte?: Maybe<Scalars['String']>;
    contractAddress_lte?: Maybe<Scalars['String']>;
    contractAddress_in?: Maybe<Array<Scalars['String']>>;
    contractAddress_not_in?: Maybe<Array<Scalars['String']>>;
    contractAddress_contains?: Maybe<Scalars['String']>;
    contractAddress_not_contains?: Maybe<Scalars['String']>;
    contractAddress_starts_with?: Maybe<Scalars['String']>;
    contractAddress_not_starts_with?: Maybe<Scalars['String']>;
    contractAddress_ends_with?: Maybe<Scalars['String']>;
    contractAddress_not_ends_with?: Maybe<Scalars['String']>;
    selector?: Maybe<Scalars['String']>;
    selector_not?: Maybe<Scalars['String']>;
    selector_gt?: Maybe<Scalars['String']>;
    selector_lt?: Maybe<Scalars['String']>;
    selector_gte?: Maybe<Scalars['String']>;
    selector_lte?: Maybe<Scalars['String']>;
    selector_in?: Maybe<Array<Scalars['String']>>;
    selector_not_in?: Maybe<Array<Scalars['String']>>;
    selector_contains?: Maybe<Scalars['String']>;
    selector_not_contains?: Maybe<Scalars['String']>;
    selector_starts_with?: Maybe<Scalars['String']>;
    selector_not_starts_with?: Maybe<Scalars['String']>;
    selector_ends_with?: Maybe<Scalars['String']>;
    selector_not_ends_with?: Maybe<Scalars['String']>;
};
export declare enum VaultCallDeregisteredEvent_OrderBy {
    Id = "id",
    Timestamp = "timestamp",
    Transaction = "transaction",
    ContractAddress = "contractAddress",
    Selector = "selector"
}
export declare type VaultCallRegisteredEvent = EventInterface & NetworkEventInterface & {
    __typename?: 'VaultCallRegisteredEvent';
    id: Scalars['ID'];
    timestamp: Scalars['BigInt'];
    transaction: Transaction;
    contractAddress: Scalars['String'];
    selector: Scalars['String'];
};
export declare type VaultCallRegisteredEvent_Filter = {
    id?: Maybe<Scalars['ID']>;
    id_not?: Maybe<Scalars['ID']>;
    id_gt?: Maybe<Scalars['ID']>;
    id_lt?: Maybe<Scalars['ID']>;
    id_gte?: Maybe<Scalars['ID']>;
    id_lte?: Maybe<Scalars['ID']>;
    id_in?: Maybe<Array<Scalars['ID']>>;
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    timestamp?: Maybe<Scalars['BigInt']>;
    timestamp_not?: Maybe<Scalars['BigInt']>;
    timestamp_gt?: Maybe<Scalars['BigInt']>;
    timestamp_lt?: Maybe<Scalars['BigInt']>;
    timestamp_gte?: Maybe<Scalars['BigInt']>;
    timestamp_lte?: Maybe<Scalars['BigInt']>;
    timestamp_in?: Maybe<Array<Scalars['BigInt']>>;
    timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;
    transaction?: Maybe<Scalars['String']>;
    transaction_not?: Maybe<Scalars['String']>;
    transaction_gt?: Maybe<Scalars['String']>;
    transaction_lt?: Maybe<Scalars['String']>;
    transaction_gte?: Maybe<Scalars['String']>;
    transaction_lte?: Maybe<Scalars['String']>;
    transaction_in?: Maybe<Array<Scalars['String']>>;
    transaction_not_in?: Maybe<Array<Scalars['String']>>;
    transaction_contains?: Maybe<Scalars['String']>;
    transaction_not_contains?: Maybe<Scalars['String']>;
    transaction_starts_with?: Maybe<Scalars['String']>;
    transaction_not_starts_with?: Maybe<Scalars['String']>;
    transaction_ends_with?: Maybe<Scalars['String']>;
    transaction_not_ends_with?: Maybe<Scalars['String']>;
    contractAddress?: Maybe<Scalars['String']>;
    contractAddress_not?: Maybe<Scalars['String']>;
    contractAddress_gt?: Maybe<Scalars['String']>;
    contractAddress_lt?: Maybe<Scalars['String']>;
    contractAddress_gte?: Maybe<Scalars['String']>;
    contractAddress_lte?: Maybe<Scalars['String']>;
    contractAddress_in?: Maybe<Array<Scalars['String']>>;
    contractAddress_not_in?: Maybe<Array<Scalars['String']>>;
    contractAddress_contains?: Maybe<Scalars['String']>;
    contractAddress_not_contains?: Maybe<Scalars['String']>;
    contractAddress_starts_with?: Maybe<Scalars['String']>;
    contractAddress_not_starts_with?: Maybe<Scalars['String']>;
    contractAddress_ends_with?: Maybe<Scalars['String']>;
    contractAddress_not_ends_with?: Maybe<Scalars['String']>;
    selector?: Maybe<Scalars['String']>;
    selector_not?: Maybe<Scalars['String']>;
    selector_gt?: Maybe<Scalars['String']>;
    selector_lt?: Maybe<Scalars['String']>;
    selector_gte?: Maybe<Scalars['String']>;
    selector_lte?: Maybe<Scalars['String']>;
    selector_in?: Maybe<Array<Scalars['String']>>;
    selector_not_in?: Maybe<Array<Scalars['String']>>;
    selector_contains?: Maybe<Scalars['String']>;
    selector_not_contains?: Maybe<Scalars['String']>;
    selector_starts_with?: Maybe<Scalars['String']>;
    selector_not_starts_with?: Maybe<Scalars['String']>;
    selector_ends_with?: Maybe<Scalars['String']>;
    selector_not_ends_with?: Maybe<Scalars['String']>;
};
export declare enum VaultCallRegisteredEvent_OrderBy {
    Id = "id",
    Timestamp = "timestamp",
    Transaction = "transaction",
    ContractAddress = "contractAddress",
    Selector = "selector"
}
export declare type VaultLibSetEvent = EventInterface & FundEventInterface & {
    __typename?: 'VaultLibSetEvent';
    id: Scalars['ID'];
    fund: Fund;
    timestamp: Scalars['BigInt'];
    transaction: Transaction;
    prevVaultLib?: Maybe<Scalars['String']>;
    nextVaultLib: Scalars['String'];
};
export declare type VaultLibSetEvent_Filter = {
    id?: Maybe<Scalars['ID']>;
    id_not?: Maybe<Scalars['ID']>;
    id_gt?: Maybe<Scalars['ID']>;
    id_lt?: Maybe<Scalars['ID']>;
    id_gte?: Maybe<Scalars['ID']>;
    id_lte?: Maybe<Scalars['ID']>;
    id_in?: Maybe<Array<Scalars['ID']>>;
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    fund?: Maybe<Scalars['String']>;
    fund_not?: Maybe<Scalars['String']>;
    fund_gt?: Maybe<Scalars['String']>;
    fund_lt?: Maybe<Scalars['String']>;
    fund_gte?: Maybe<Scalars['String']>;
    fund_lte?: Maybe<Scalars['String']>;
    fund_in?: Maybe<Array<Scalars['String']>>;
    fund_not_in?: Maybe<Array<Scalars['String']>>;
    fund_contains?: Maybe<Scalars['String']>;
    fund_not_contains?: Maybe<Scalars['String']>;
    fund_starts_with?: Maybe<Scalars['String']>;
    fund_not_starts_with?: Maybe<Scalars['String']>;
    fund_ends_with?: Maybe<Scalars['String']>;
    fund_not_ends_with?: Maybe<Scalars['String']>;
    timestamp?: Maybe<Scalars['BigInt']>;
    timestamp_not?: Maybe<Scalars['BigInt']>;
    timestamp_gt?: Maybe<Scalars['BigInt']>;
    timestamp_lt?: Maybe<Scalars['BigInt']>;
    timestamp_gte?: Maybe<Scalars['BigInt']>;
    timestamp_lte?: Maybe<Scalars['BigInt']>;
    timestamp_in?: Maybe<Array<Scalars['BigInt']>>;
    timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;
    transaction?: Maybe<Scalars['String']>;
    transaction_not?: Maybe<Scalars['String']>;
    transaction_gt?: Maybe<Scalars['String']>;
    transaction_lt?: Maybe<Scalars['String']>;
    transaction_gte?: Maybe<Scalars['String']>;
    transaction_lte?: Maybe<Scalars['String']>;
    transaction_in?: Maybe<Array<Scalars['String']>>;
    transaction_not_in?: Maybe<Array<Scalars['String']>>;
    transaction_contains?: Maybe<Scalars['String']>;
    transaction_not_contains?: Maybe<Scalars['String']>;
    transaction_starts_with?: Maybe<Scalars['String']>;
    transaction_not_starts_with?: Maybe<Scalars['String']>;
    transaction_ends_with?: Maybe<Scalars['String']>;
    transaction_not_ends_with?: Maybe<Scalars['String']>;
    prevVaultLib?: Maybe<Scalars['String']>;
    prevVaultLib_not?: Maybe<Scalars['String']>;
    prevVaultLib_gt?: Maybe<Scalars['String']>;
    prevVaultLib_lt?: Maybe<Scalars['String']>;
    prevVaultLib_gte?: Maybe<Scalars['String']>;
    prevVaultLib_lte?: Maybe<Scalars['String']>;
    prevVaultLib_in?: Maybe<Array<Scalars['String']>>;
    prevVaultLib_not_in?: Maybe<Array<Scalars['String']>>;
    prevVaultLib_contains?: Maybe<Scalars['String']>;
    prevVaultLib_not_contains?: Maybe<Scalars['String']>;
    prevVaultLib_starts_with?: Maybe<Scalars['String']>;
    prevVaultLib_not_starts_with?: Maybe<Scalars['String']>;
    prevVaultLib_ends_with?: Maybe<Scalars['String']>;
    prevVaultLib_not_ends_with?: Maybe<Scalars['String']>;
    nextVaultLib?: Maybe<Scalars['String']>;
    nextVaultLib_not?: Maybe<Scalars['String']>;
    nextVaultLib_gt?: Maybe<Scalars['String']>;
    nextVaultLib_lt?: Maybe<Scalars['String']>;
    nextVaultLib_gte?: Maybe<Scalars['String']>;
    nextVaultLib_lte?: Maybe<Scalars['String']>;
    nextVaultLib_in?: Maybe<Array<Scalars['String']>>;
    nextVaultLib_not_in?: Maybe<Array<Scalars['String']>>;
    nextVaultLib_contains?: Maybe<Scalars['String']>;
    nextVaultLib_not_contains?: Maybe<Scalars['String']>;
    nextVaultLib_starts_with?: Maybe<Scalars['String']>;
    nextVaultLib_not_starts_with?: Maybe<Scalars['String']>;
    nextVaultLib_ends_with?: Maybe<Scalars['String']>;
    nextVaultLib_not_ends_with?: Maybe<Scalars['String']>;
};
export declare enum VaultLibSetEvent_OrderBy {
    Id = "id",
    Fund = "fund",
    Timestamp = "timestamp",
    Transaction = "transaction",
    PrevVaultLib = "prevVaultLib",
    NextVaultLib = "nextVaultLib"
}
export declare type VaultProxyDeployedEvent = EventInterface & FundEventInterface & NetworkEventInterface & {
    __typename?: 'VaultProxyDeployedEvent';
    id: Scalars['ID'];
    fund: Fund;
    timestamp: Scalars['BigInt'];
    transaction: Transaction;
    fundDeployer: Scalars['String'];
    owner: Account;
    vaultLib: Scalars['String'];
    accessor: Scalars['String'];
    fundName: Scalars['String'];
};
export declare type VaultProxyDeployedEvent_Filter = {
    id?: Maybe<Scalars['ID']>;
    id_not?: Maybe<Scalars['ID']>;
    id_gt?: Maybe<Scalars['ID']>;
    id_lt?: Maybe<Scalars['ID']>;
    id_gte?: Maybe<Scalars['ID']>;
    id_lte?: Maybe<Scalars['ID']>;
    id_in?: Maybe<Array<Scalars['ID']>>;
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    fund?: Maybe<Scalars['String']>;
    fund_not?: Maybe<Scalars['String']>;
    fund_gt?: Maybe<Scalars['String']>;
    fund_lt?: Maybe<Scalars['String']>;
    fund_gte?: Maybe<Scalars['String']>;
    fund_lte?: Maybe<Scalars['String']>;
    fund_in?: Maybe<Array<Scalars['String']>>;
    fund_not_in?: Maybe<Array<Scalars['String']>>;
    fund_contains?: Maybe<Scalars['String']>;
    fund_not_contains?: Maybe<Scalars['String']>;
    fund_starts_with?: Maybe<Scalars['String']>;
    fund_not_starts_with?: Maybe<Scalars['String']>;
    fund_ends_with?: Maybe<Scalars['String']>;
    fund_not_ends_with?: Maybe<Scalars['String']>;
    timestamp?: Maybe<Scalars['BigInt']>;
    timestamp_not?: Maybe<Scalars['BigInt']>;
    timestamp_gt?: Maybe<Scalars['BigInt']>;
    timestamp_lt?: Maybe<Scalars['BigInt']>;
    timestamp_gte?: Maybe<Scalars['BigInt']>;
    timestamp_lte?: Maybe<Scalars['BigInt']>;
    timestamp_in?: Maybe<Array<Scalars['BigInt']>>;
    timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;
    transaction?: Maybe<Scalars['String']>;
    transaction_not?: Maybe<Scalars['String']>;
    transaction_gt?: Maybe<Scalars['String']>;
    transaction_lt?: Maybe<Scalars['String']>;
    transaction_gte?: Maybe<Scalars['String']>;
    transaction_lte?: Maybe<Scalars['String']>;
    transaction_in?: Maybe<Array<Scalars['String']>>;
    transaction_not_in?: Maybe<Array<Scalars['String']>>;
    transaction_contains?: Maybe<Scalars['String']>;
    transaction_not_contains?: Maybe<Scalars['String']>;
    transaction_starts_with?: Maybe<Scalars['String']>;
    transaction_not_starts_with?: Maybe<Scalars['String']>;
    transaction_ends_with?: Maybe<Scalars['String']>;
    transaction_not_ends_with?: Maybe<Scalars['String']>;
    fundDeployer?: Maybe<Scalars['String']>;
    fundDeployer_not?: Maybe<Scalars['String']>;
    fundDeployer_gt?: Maybe<Scalars['String']>;
    fundDeployer_lt?: Maybe<Scalars['String']>;
    fundDeployer_gte?: Maybe<Scalars['String']>;
    fundDeployer_lte?: Maybe<Scalars['String']>;
    fundDeployer_in?: Maybe<Array<Scalars['String']>>;
    fundDeployer_not_in?: Maybe<Array<Scalars['String']>>;
    fundDeployer_contains?: Maybe<Scalars['String']>;
    fundDeployer_not_contains?: Maybe<Scalars['String']>;
    fundDeployer_starts_with?: Maybe<Scalars['String']>;
    fundDeployer_not_starts_with?: Maybe<Scalars['String']>;
    fundDeployer_ends_with?: Maybe<Scalars['String']>;
    fundDeployer_not_ends_with?: Maybe<Scalars['String']>;
    owner?: Maybe<Scalars['String']>;
    owner_not?: Maybe<Scalars['String']>;
    owner_gt?: Maybe<Scalars['String']>;
    owner_lt?: Maybe<Scalars['String']>;
    owner_gte?: Maybe<Scalars['String']>;
    owner_lte?: Maybe<Scalars['String']>;
    owner_in?: Maybe<Array<Scalars['String']>>;
    owner_not_in?: Maybe<Array<Scalars['String']>>;
    owner_contains?: Maybe<Scalars['String']>;
    owner_not_contains?: Maybe<Scalars['String']>;
    owner_starts_with?: Maybe<Scalars['String']>;
    owner_not_starts_with?: Maybe<Scalars['String']>;
    owner_ends_with?: Maybe<Scalars['String']>;
    owner_not_ends_with?: Maybe<Scalars['String']>;
    vaultLib?: Maybe<Scalars['String']>;
    vaultLib_not?: Maybe<Scalars['String']>;
    vaultLib_gt?: Maybe<Scalars['String']>;
    vaultLib_lt?: Maybe<Scalars['String']>;
    vaultLib_gte?: Maybe<Scalars['String']>;
    vaultLib_lte?: Maybe<Scalars['String']>;
    vaultLib_in?: Maybe<Array<Scalars['String']>>;
    vaultLib_not_in?: Maybe<Array<Scalars['String']>>;
    vaultLib_contains?: Maybe<Scalars['String']>;
    vaultLib_not_contains?: Maybe<Scalars['String']>;
    vaultLib_starts_with?: Maybe<Scalars['String']>;
    vaultLib_not_starts_with?: Maybe<Scalars['String']>;
    vaultLib_ends_with?: Maybe<Scalars['String']>;
    vaultLib_not_ends_with?: Maybe<Scalars['String']>;
    accessor?: Maybe<Scalars['String']>;
    accessor_not?: Maybe<Scalars['String']>;
    accessor_gt?: Maybe<Scalars['String']>;
    accessor_lt?: Maybe<Scalars['String']>;
    accessor_gte?: Maybe<Scalars['String']>;
    accessor_lte?: Maybe<Scalars['String']>;
    accessor_in?: Maybe<Array<Scalars['String']>>;
    accessor_not_in?: Maybe<Array<Scalars['String']>>;
    accessor_contains?: Maybe<Scalars['String']>;
    accessor_not_contains?: Maybe<Scalars['String']>;
    accessor_starts_with?: Maybe<Scalars['String']>;
    accessor_not_starts_with?: Maybe<Scalars['String']>;
    accessor_ends_with?: Maybe<Scalars['String']>;
    accessor_not_ends_with?: Maybe<Scalars['String']>;
    fundName?: Maybe<Scalars['String']>;
    fundName_not?: Maybe<Scalars['String']>;
    fundName_gt?: Maybe<Scalars['String']>;
    fundName_lt?: Maybe<Scalars['String']>;
    fundName_gte?: Maybe<Scalars['String']>;
    fundName_lte?: Maybe<Scalars['String']>;
    fundName_in?: Maybe<Array<Scalars['String']>>;
    fundName_not_in?: Maybe<Array<Scalars['String']>>;
    fundName_contains?: Maybe<Scalars['String']>;
    fundName_not_contains?: Maybe<Scalars['String']>;
    fundName_starts_with?: Maybe<Scalars['String']>;
    fundName_not_starts_with?: Maybe<Scalars['String']>;
    fundName_ends_with?: Maybe<Scalars['String']>;
    fundName_not_ends_with?: Maybe<Scalars['String']>;
};
export declare enum VaultProxyDeployedEvent_OrderBy {
    Id = "id",
    Fund = "fund",
    Timestamp = "timestamp",
    Transaction = "transaction",
    FundDeployer = "fundDeployer",
    Owner = "owner",
    VaultLib = "vaultLib",
    Accessor = "accessor",
    FundName = "fundName"
}
export declare type VaultProxySetEvent = EventInterface & FundEventInterface & {
    __typename?: 'VaultProxySetEvent';
    id: Scalars['ID'];
    fund: Fund;
    timestamp: Scalars['BigInt'];
    transaction: Transaction;
    vaultProxy: Scalars['String'];
};
export declare type VaultProxySetEvent_Filter = {
    id?: Maybe<Scalars['ID']>;
    id_not?: Maybe<Scalars['ID']>;
    id_gt?: Maybe<Scalars['ID']>;
    id_lt?: Maybe<Scalars['ID']>;
    id_gte?: Maybe<Scalars['ID']>;
    id_lte?: Maybe<Scalars['ID']>;
    id_in?: Maybe<Array<Scalars['ID']>>;
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    fund?: Maybe<Scalars['String']>;
    fund_not?: Maybe<Scalars['String']>;
    fund_gt?: Maybe<Scalars['String']>;
    fund_lt?: Maybe<Scalars['String']>;
    fund_gte?: Maybe<Scalars['String']>;
    fund_lte?: Maybe<Scalars['String']>;
    fund_in?: Maybe<Array<Scalars['String']>>;
    fund_not_in?: Maybe<Array<Scalars['String']>>;
    fund_contains?: Maybe<Scalars['String']>;
    fund_not_contains?: Maybe<Scalars['String']>;
    fund_starts_with?: Maybe<Scalars['String']>;
    fund_not_starts_with?: Maybe<Scalars['String']>;
    fund_ends_with?: Maybe<Scalars['String']>;
    fund_not_ends_with?: Maybe<Scalars['String']>;
    timestamp?: Maybe<Scalars['BigInt']>;
    timestamp_not?: Maybe<Scalars['BigInt']>;
    timestamp_gt?: Maybe<Scalars['BigInt']>;
    timestamp_lt?: Maybe<Scalars['BigInt']>;
    timestamp_gte?: Maybe<Scalars['BigInt']>;
    timestamp_lte?: Maybe<Scalars['BigInt']>;
    timestamp_in?: Maybe<Array<Scalars['BigInt']>>;
    timestamp_not_in?: Maybe<Array<Scalars['BigInt']>>;
    transaction?: Maybe<Scalars['String']>;
    transaction_not?: Maybe<Scalars['String']>;
    transaction_gt?: Maybe<Scalars['String']>;
    transaction_lt?: Maybe<Scalars['String']>;
    transaction_gte?: Maybe<Scalars['String']>;
    transaction_lte?: Maybe<Scalars['String']>;
    transaction_in?: Maybe<Array<Scalars['String']>>;
    transaction_not_in?: Maybe<Array<Scalars['String']>>;
    transaction_contains?: Maybe<Scalars['String']>;
    transaction_not_contains?: Maybe<Scalars['String']>;
    transaction_starts_with?: Maybe<Scalars['String']>;
    transaction_not_starts_with?: Maybe<Scalars['String']>;
    transaction_ends_with?: Maybe<Scalars['String']>;
    transaction_not_ends_with?: Maybe<Scalars['String']>;
    vaultProxy?: Maybe<Scalars['String']>;
    vaultProxy_not?: Maybe<Scalars['String']>;
    vaultProxy_gt?: Maybe<Scalars['String']>;
    vaultProxy_lt?: Maybe<Scalars['String']>;
    vaultProxy_gte?: Maybe<Scalars['String']>;
    vaultProxy_lte?: Maybe<Scalars['String']>;
    vaultProxy_in?: Maybe<Array<Scalars['String']>>;
    vaultProxy_not_in?: Maybe<Array<Scalars['String']>>;
    vaultProxy_contains?: Maybe<Scalars['String']>;
    vaultProxy_not_contains?: Maybe<Scalars['String']>;
    vaultProxy_starts_with?: Maybe<Scalars['String']>;
    vaultProxy_not_starts_with?: Maybe<Scalars['String']>;
    vaultProxy_ends_with?: Maybe<Scalars['String']>;
    vaultProxy_not_ends_with?: Maybe<Scalars['String']>;
};
export declare enum VaultProxySetEvent_OrderBy {
    Id = "id",
    Fund = "fund",
    Timestamp = "timestamp",
    Transaction = "transaction",
    VaultProxy = "vaultProxy"
}
export declare type _Block_ = {
    __typename?: '_Block_';
    /** The hash of the block */
    hash?: Maybe<Scalars['Bytes']>;
    /** The block number */
    number: Scalars['Int'];
};
/** The type for the top-level _meta field */
export declare type _Meta_ = {
    __typename?: '_Meta_';
    /**
     * Information about a specific subgraph block. The hash of the block
     * will be null if the _meta field has a block constraint that asks for
     * a block number. It will be filled if the _meta field has no block constraint
     * and therefore asks for the latest  block
     */
    block: _Block_;
    /** The deployment ID */
    deployment: Scalars['String'];
    /** If `true`, the subgraph encountered indexing errors at some past block */
    hasIndexingErrors: Scalars['Boolean'];
};
export declare enum _SubgraphErrorPolicy_ {
    /** Data will be returned even if the subgraph has indexing errors */
    Allow = "allow",
    /** If the subgraph has indexing errors, data will be omitted. The default. */
    Deny = "deny"
}
export declare type AssetsQueryVariables = Exact<{
    [key: string]: never;
}>;
export declare type AssetsQuery = ({
    __typename?: 'Query';
} & {
    assets: Array<({
        __typename?: 'Asset';
    } & Pick<Asset, 'id' | 'name' | 'symbol' | 'decimals' | 'type' | 'derivativeType'> & {
        releases: Array<({
            __typename?: 'Release';
        } & Pick<Release, 'id'>)>;
        price?: Maybe<({
            __typename?: 'AssetPrice';
        } & Pick<AssetPrice, 'price' | 'timestamp'>)>;
        underlyingAsset?: Maybe<({
            __typename?: 'Asset';
        } & Pick<Asset, 'id' | 'symbol' | 'name' | 'decimals'>)>;
        uniswapV2PoolAssetDetails?: Maybe<({
            __typename?: 'UniswapV2PoolAssetDetail';
        } & {
            token0: ({
                __typename?: 'Asset';
            } & Pick<Asset, 'id' | 'symbol' | 'decimals'>);
            token1: ({
                __typename?: 'Asset';
            } & Pick<Asset, 'id' | 'symbol' | 'decimals'>);
        })>;
    })>;
});
export declare type CurrentReleaseContractsQueryVariables = Exact<{
    [key: string]: never;
}>;
export declare type CurrentReleaseContractsQuery = ({
    __typename?: 'Query';
} & {
    network?: Maybe<({
        __typename?: 'Network';
    } & {
        currentRelease?: Maybe<({
            __typename?: 'Release';
        } & Pick<Release, 'adapterBlacklist' | 'adapterWhitelist' | 'aggregatedDerivativePriceFeed' | 'assetBlacklist' | 'assetWhitelist' | 'buySharesCallerWhitelist' | 'chaiAdapter' | 'chaiIntegratee' | 'chainlinkPriceFeed' | 'compoundAdapter' | 'comptrollerLib' | 'dispatcher' | 'entranceRateBurnFee' | 'entranceRateDirectFee' | 'feeManager' | 'fundActionsWrapper' | 'fundDeployer' | 'guaranteedRedemption' | 'integrationManager' | 'investorWhitelist' | 'kyberAdapter' | 'kyberIntegratee' | 'managementFee' | 'maxConcentration' | 'minMaxInvestment' | 'paraSwapAdapter' | 'performanceFee' | 'policyManager' | 'synthetixAdapter' | 'synthetixAddressResolver' | 'synthetixDelegateApprovals' | 'synthetixIntegratee' | 'trackedAssetsAdapter' | 'uniswapV2Adapter' | 'uniswapV2Integratee' | 'valueInterpreter' | 'vaultLib' | 'wethToken' | 'zeroExV2Adapter'>)>;
    })>;
});
export declare type VaultQueryVariables = Exact<{
    id: Scalars['ID'];
}>;
export declare type VaultQuery = ({
    __typename?: 'Query';
} & {
    fund?: Maybe<({
        __typename?: 'Fund';
    } & {
        release: ({
            __typename?: 'Release';
        } & Pick<Release, 'id'>);
        accessor: ({
            __typename?: 'ComptrollerProxy';
        } & Pick<ComptrollerProxy, 'id'>);
    })>;
});
export declare const AssetsDocument: import("graphql").DocumentNode;
export declare const CurrentReleaseContractsDocument: import("graphql").DocumentNode;
export declare const VaultDocument: import("graphql").DocumentNode;
export declare type SdkFunctionWrapper = <T>(action: (requestHeaders?: Record<string, string>) => Promise<T>, operationName: string) => Promise<T>;
export declare function getSdk(client: GraphQLClient, withWrapper?: SdkFunctionWrapper): {
    assets(variables?: Exact<{
        [key: string]: never;
    }> | undefined, requestHeaders?: Dom.RequestInit["headers"]): Promise<AssetsQuery>;
    currentReleaseContracts(variables?: Exact<{
        [key: string]: never;
    }> | undefined, requestHeaders?: Dom.RequestInit["headers"]): Promise<CurrentReleaseContractsQuery>;
    vault(variables: VaultQueryVariables, requestHeaders?: Dom.RequestInit["headers"]): Promise<VaultQuery>;
};
export declare type Sdk = ReturnType<typeof getSdk>;
